(function() {var implementors = {
"sandwich":[["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;(<a class=\"enum\" href=\"sandwich/enum.ProtoBasedErrorCode.html\" title=\"enum sandwich::ProtoBasedErrorCode\">ProtoBasedErrorCode</a>, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.74.0/std/primitive.str.html\">str</a>)&gt; for <a class=\"struct\" href=\"sandwich/struct.Error.html\" title=\"struct sandwich::Error\">Error</a>"],["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"enum\" href=\"sandwich/enum.ProtoBasedErrorCode.html\" title=\"enum sandwich::ProtoBasedErrorCode\">ProtoBasedErrorCode</a>&gt; for <a class=\"struct\" href=\"sandwich/struct.Error.html\" title=\"struct sandwich::Error\">Error</a>"],["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"struct\" href=\"sandwich/struct.ErrorCode.html\" title=\"struct sandwich::ErrorCode\">ErrorCode</a>&gt; for <a class=\"struct\" href=\"sandwich/struct.Error.html\" title=\"struct sandwich::Error\">Error</a>"],["impl&lt;ErrorEnum: AllowedProtoBasedErrorCodeEnum&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;(ErrorEnum, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.74.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>)&gt; for <a class=\"struct\" href=\"sandwich/struct.Error.html\" title=\"struct sandwich::Error\">Error</a><span class=\"where fmt-newline\">where\n    <a class=\"struct\" href=\"sandwich/struct.ErrorCode.html\" title=\"struct sandwich::ErrorCode\">ErrorCode</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;(ErrorEnum, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.74.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>)&gt;,</span>"],["impl&lt;ErrorEnum: AllowedProtoBasedErrorCodeEnum&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;ErrorEnum&gt; for <a class=\"struct\" href=\"sandwich/struct.Error.html\" title=\"struct sandwich::Error\">Error</a><span class=\"where fmt-newline\">where\n    <a class=\"struct\" href=\"sandwich/struct.ErrorCode.html\" title=\"struct sandwich::ErrorCode\">ErrorCode</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;ErrorEnum&gt;,</span>"],["impl&lt;'s, ErrorEnum: AllowedProtoBasedErrorCodeEnum&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;(ErrorEnum, &amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.74.0/std/primitive.str.html\">str</a>)&gt; for <a class=\"struct\" href=\"sandwich/struct.Error.html\" title=\"struct sandwich::Error\">Error</a><span class=\"where fmt-newline\">where\n    <a class=\"struct\" href=\"sandwich/struct.ErrorCode.html\" title=\"struct sandwich::ErrorCode\">ErrorCode</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;(ErrorEnum, &amp;'s <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.74.0/std/primitive.str.html\">str</a>)&gt;,</span>"],["impl&lt;S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;(<a class=\"enum\" href=\"sandwich/enum.ProtoBasedErrorCode.html\" title=\"enum sandwich::ProtoBasedErrorCode\">ProtoBasedErrorCode</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.74.0/std/primitive.reference.html\">&amp;S</a>)&gt; for <a class=\"struct\" href=\"sandwich/struct.Error.html\" title=\"struct sandwich::Error\">Error</a><span class=\"where fmt-newline\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.74.0/std/primitive.str.html\">str</a>&gt;,</span>"],["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;<a class=\"struct\" href=\"sandwich/struct.ErrorCode.html\" title=\"struct sandwich::ErrorCode\">ErrorCode</a>&gt; for <a class=\"struct\" href=\"sandwich/struct.ErrorCode.html\" title=\"struct sandwich::ErrorCode\">ErrorCode</a>"],["impl&lt;'s, ErrorEnum: AllowedProtoBasedErrorCodeEnum, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;(ErrorEnum, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.74.0/std/primitive.reference.html\">&amp;'s S</a>)&gt; for <a class=\"struct\" href=\"sandwich/struct.Error.html\" title=\"struct sandwich::Error\">Error</a><span class=\"where fmt-newline\">where\n    <a class=\"struct\" href=\"sandwich/struct.ErrorCode.html\" title=\"struct sandwich::ErrorCode\">ErrorCode</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;(ErrorEnum, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.74.0/std/primitive.reference.html\">&amp;'s S</a>)&gt;,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.74.0/std/primitive.str.html\">str</a>&gt; + 's,</span>"],["impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.74.0/core/ops/bit/trait.Shr.html\" title=\"trait core::ops::bit::Shr\">Shr</a>&lt;(<a class=\"enum\" href=\"sandwich/enum.ProtoBasedErrorCode.html\" title=\"enum sandwich::ProtoBasedErrorCode\">ProtoBasedErrorCode</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.74.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>)&gt; for <a class=\"struct\" href=\"sandwich/struct.Error.html\" title=\"struct sandwich::Error\">Error</a>"]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()