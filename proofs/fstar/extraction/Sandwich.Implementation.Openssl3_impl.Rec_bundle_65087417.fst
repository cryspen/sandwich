module Sandwich.Implementation.Openssl3_impl.Rec_bundle_65087417
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let _ =
  (* This module has implicit dependencies, here we make them explicit. *)
  (* The implicit dependencies arise from typeclasses instances. *)
  let open Sandwich.Error in
  let open Sandwich.Error.Code in
  let open Std.Ffi.Os_str in
  ()

let lib_ctx
      (self: t_ProviderBuilder)
      (lib_ctx: Core.Ptr.Non_null.t_NonNull Openssl3.t_ossl_lib_ctx_st)
     =
  {
    self with
    f_lib_ctx
    =
    Core.Option.Option_Some lib_ctx
    <:
    Core.Option.t_Option (Core.Ptr.Non_null.t_NonNull Openssl3.t_ossl_lib_ctx_st)
  }
  <:
  t_ProviderBuilder

let name (self: t_ProviderBuilder) (name: Core.Ffi.C_str.t_CStr) =
  { self with f_name = Core.Option.Option_Some name <: Core.Option.t_Option Core.Ffi.C_str.t_CStr }
  <:
  t_ProviderBuilder

let v_new (_: Prims.unit) =
  {
    f_name = Core.Option.Option_None <: Core.Option.t_Option Core.Ffi.C_str.t_CStr;
    f_lib_ctx
    =
    Core.Option.Option_None
    <:
    Core.Option.t_Option (Core.Ptr.Non_null.t_NonNull Openssl3.t_ossl_lib_ctx_st)
  }
  <:
  t_ProviderBuilder

let cipher_name
      (#impl_488124255_: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i1: Core.Convert.t_AsRef impl_488124255_ string)
      (name: impl_488124255_)
     =
  match
    Core.Result.impl__ok #Alloc.Ffi.C_str.t_CString
      #Alloc.Ffi.C_str.t_NulError
      (Alloc.Ffi.C_str.impl__CString__new #Alloc.String.t_String
          (Alloc.String.f_to_string #string
              #FStar.Tactics.Typeclasses.solve
              (Core.Convert.f_as_ref #impl_488124255_ #string #FStar.Tactics.Typeclasses.solve name
                <:
                string)
            <:
            Alloc.String.t_String)
        <:
        Core.Result.t_Result Alloc.Ffi.C_str.t_CString Alloc.Ffi.C_str.t_NulError)
  with
  | Core.Option.Option_Some cstr ->
    Core.Option.impl__and_then #(Core.Ptr.Non_null.t_NonNull i8)
      #string
      (Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
          "rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"core::ptr::non_null::impl_3__new\")::<int>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"core::ptr::const_ptr::impl__cast_mut::<\\n        int,\\n    >(unsafe {\\n        openssl3::foreign_mod_3188::v_OPENSSL_cipher_name(\\n            core::ffi::c_str::impl__CStr__as_ptr(\\n                &(deref(core::ops::deref::f_deref(&(cstr)))),\\n            ),\\n        )\\n    })\"))"

        <:
        Core.Option.t_Option (Core.Ptr.Non_null.t_NonNull i8))
      (fun nn ->
          let nn:Core.Ptr.Non_null.t_NonNull i8 = nn in
          Core.Result.impl__ok #string
            #Core.Str.Error.t_Utf8Error
            (Core.Ffi.C_str.impl__CStr__to_str (Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
                    "rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"core::ffi::c_str::impl__CStr__from_ptr\")::<lifetime!(something)>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"rust_primitives::hax::failure(\\n        \\\"(AST import) Fatal error: something we considered as impossible occurred! \\\\027[1mPlease report this by submitting an issue on GitHub!\\\\027[0m\\\\nDetails: Pointer, with [cast] being Types.MutToConstPointer\\\",\\n        \\\"{ Types.attributes = [];\\\\n  contents =\\\\n  Types.PointerCoercion {cast = Types.MutToConstPointer;\\\\n    source =\\\\n    { Types.attributes = [];\\\\n      contents =\\\\n      Types.Call {\\\\n        args =\\\\n        [{ Types.attributes = [];\\\\n           contents =\\\\n           Types.VarRef {\\\\n             id =\\\\n             { Types.id =\\\\n               { Types.local_id = \\\\\\\"58\\\\\\\";\\\\n                 owner =\\\\n                 { Types.index = (0, 194); is_local = true;\\\\n                   krate = \\\\\\\"sandwich\\\\\\\";\\\\n                   path =\\\\n                   [{ Types.data = (Types.TypeNs \\\\\\\"implementation\\\\\\\");\\\\n                      disambiguator = 0 };\\\\n                     { Types.data = (Types.TypeNs \\\\\\\"openssl3_impl\\\\\\\");\\\\n                       disambiguator = 0 };\\\\n                     { Types.data = (Types.TypeNs \\\\\\\"support\\\\\\\");\\\\n                       disambiguator = 0 };\\\\n                     { Types.data = (Types.ValueNs \\\\\\\"cipher_name\\\\\\\");\\\\n                       disambiguator = 0 }\\\\n                     ]\\\\n                   }\\\\n                 };\\\\n               name = \\\\\\\"nn\\\\\\\" }};\\\\n           hir_id = (Some (\\\\\\\"194\\\\\\\", \\\\\\\"71\\\\\\\"));\\\\n           span =\\\\n           { Types.filename =\\\\n             (Types.Real\\\\n                (Types.LocalPath\\\\n                   \\\\\\\"rust/implementation/openssl3_impl/support.rs\\\\\\\"));\\\\n             hi = { Types.col = \\\\\\\"49\\\\\\\"; line = \\\\\\\"255\\\\\\\" };\\\\n             lo = { Types.col = \\\\\\\"47\\\\\\\"; line = \\\\\\\"255\\\\\\\" } };\\\\n           ty =\\\\n           { Types.kind =\\\\n             Types.Adt {\\\\n               def_id =\\\\n               { Types.index = (2, 2358); is_local = false; krate = \\\\\\\"core\\\\\\\";\\\\n                 path =\\\\n                 [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\"); disambiguator = 0 };\\\\n                   { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\");\\\\n                     disambiguator = 0 };\\\\n                   { Types.data = (Types.TypeNs \\\\\\\"NonNull\\\\\\\"); disambiguator = 0\\\\n                     }\\\\n                   ]\\\\n                 };\\\\n               generic_args =\\\\n               [(Types.Type { Types.kind = (Types.Int Types.I8) })];\\\\n               trait_refs = []}\\\\n             }\\\\n           }\\\\n          ];\\\\n        bounds_impls = [];\\\\n        fn_span =\\\\n        { Types.filename =\\\\n          (Types.Real\\\\n             (Types.LocalPath \\\\\\\"rust/implementation/openssl3_impl/support.rs\\\\\\\"));\\\\n          hi = { Types.col = \\\\\\\"58\\\\\\\"; line = \\\\\\\"255\\\\\\\" };\\\\n          lo = { Types.col = \\\\\\\"50\\\\\\\"; line = \\\\\\\"255\\\\\\\" } };\\\\n        from_hir_call = true;\\\\n        fun' =\\\\n        { Types.attributes = [];\\\\n          contents =\\\\n          Types.GlobalName {\\\\n            id =\\\\n            { Types.index = (2, 2381); is_local = false; krate = \\\\\\\"core\\\\\\\";\\\\n              path =\\\\n              [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\"); disambiguator = 0 };\\\\n                { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\"); disambiguator = 0 };\\\\n                { Types.data = Types.Impl; disambiguator = 3 };\\\\n                { Types.data = (Types.ValueNs \\\\\\\"as_ptr\\\\\\\"); disambiguator = 0 }]\\\\n              }};\\\\n          hir_id = None;\\\\n          span =\\\\n          { Types.filename =\\\\n            (Types.Real\\\\n               (Types.LocalPath\\\\n                  \\\\\\\"rust/implementation/openssl3_impl/support.rs\\\\\\\"));\\\\n            hi = { Types.col = \\\\\\\"56\\\\\\\"; line = \\\\\\\"255\\\\\\\" };\\\\n            lo = { Types.col = \\\\\\\"50\\\\\\\"; line = \\\\\\\"255\\\\\\\" } };\\\\n          ty =\\\\n          { Types.kind =\\\\n            (Types.Arrow\\\\n               { Types.bound_vars = [];\\\\n                 value =\\\\n                 { Types.abi = Types.Abi {todo = \\\\\\\"Rust\\\\\\\"}; c_variadic = false;\\\\n                   inputs =\\\\n                   [{ Types.kind =\\\\n                      Types.Adt {\\\\n                        def_id =\\\\n                        { Types.index = (2, 2358); is_local = false;\\\\n                          krate = \\\\\\\"core\\\\\\\";\\\\n                          path =\\\\n                          [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\");\\\\n                             disambiguator = 0 };\\\\n                            { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\");\\\\n                              disambiguator = 0 };\\\\n                            { Types.data = (Types.TypeNs \\\\\\\"NonNull\\\\\\\");\\\\n                              disambiguator = 0 }\\\\n                            ]\\\\n                          };\\\\n                        generic_args =\\\\n                        [(Types.Type { Types.kind = (Types.Int Types.I8) })];\\\\n                        trait_refs = []}\\\\n                      }\\\\n                     ];\\\\n                   output =\\\\n                   { Types.kind =\\\\n                     (Types.RawPtr\\\\n                        ({ Types.kind = (Types.Int Types.I8) }, true))\\\\n                     };\\\\n                   safety = Types.Safe }\\\\n                 })\\\\n            }\\\\n          };\\\\n        generic_args = [(Types.Type { Types.kind = (Types.Int Types.I8) })];\\\\n        trait = None;\\\\n        ty =\\\\n        { Types.kind =\\\\n          (Types.Arrow\\\\n             { Types.bound_vars = [];\\\\n               value =\\\\n               { Types.abi = Types.Abi {todo = \\\\\\\"Rust\\\\\\\"}; c_variadic = false;\\\\n                 inputs =\\\\n                 [{ Types.kind =\\\\n                    Types.Adt {\\\\n                      def_id =\\\\n                      { Types.index = (2, 2358); is_local = false;\\\\n                        krate = \\\\\\\"core\\\\\\\";\\\\n                        path =\\\\n                        [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\");\\\\n                           disambiguator = 0 };\\\\n                          { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\");\\\\n                            disambiguator = 0 };\\\\n                          { Types.data = (Types.TypeNs \\\\\\\"NonNull\\\\\\\");\\\\n                            disambiguator = 0 }\\\\n                          ]\\\\n                        };\\\\n                      generic_args =\\\\n                      [(Types.Type { Types.kind = (Types.Int Types.I8) })];\\\\n                      trait_refs = []}\\\\n                    }\\\\n                   ];\\\\n                 output =\\\\n                 { Types.kind =\\\\n                   (Types.RawPtr\\\\n                      ({ Types.kind = (Types.Int Types.I8) }, true))\\\\n                   };\\\\n                 safety = Types.Safe }\\\\n               })\\\\n          }};\\\\n      hir_id = None;\\\\n      span =\\\\n      { Types.filename =\\\\n        (Types.Real\\\\n           (Types.LocalPath \\\\\\\"rust/implementation/openssl3_impl/support.rs\\\\\\\"));\\\\n        hi = { Types.col = \\\\\\\"58\\\\\\\"; line = \\\\\\\"255\\\\\\\" };\\\\n        lo = { Types.col = \\\\\\\"47\\\\\\\"; line = \\\\\\\"255\\\\\\\" } };\\\\n      ty =\\\\n      { Types.kind =\\\\n        (Types.RawPtr ({ Types.kind = (Types.Int Types.I8) }, true)) }\\\\n      }};\\\\n  hir_id = (Some (\\\\\\\"194\\\\\\\", \\\\\\\"69\\\\\\\"));\\\\n  span =\\\\n  { Types.filename =\\\\n    (Types.Real\\\\n       (Types.LocalPath \\\\\\\"rust/implementation/openssl3_impl/support.rs\\\\\\\"));\\\\n    hi = { Types.col = \\\\\\\"58\\\\\\\"; line = \\\\\\\"255\\\\\\\" };\\\\n    lo = { Types.col = \\\\\\\"47\\\\\\\"; line = \\\\\\\"255\\\\\\\" } };\\\\n  ty =\\\\n  { Types.kind =\\\\n    (Types.RawPtr ({ Types.kind = (Types.Int Types.I8) }, false)) }\\\\n  }\\\",\\n    )\"))"

                  <:
                  Core.Ffi.C_str.t_CStr)
              <:
              Core.Result.t_Result string Core.Str.Error.t_Utf8Error)
          <:
          Core.Option.t_Option string)
  | Core.Option.Option_None  -> Core.Option.Option_None <: Core.Option.t_Option string

let err_get_lib (err: u64) =
  cast ((err >>! Openssl3.v_ERR_LIB_OFFSET <: u64) &. (cast (Openssl3.v_ERR_LIB_MASK <: u32) <: u64)
      <:
      u64)
  <:
  i32

let err_get_reason (err: u64) =
  cast (err &. (cast (Openssl3.v_ERR_REASON_MASK <: u32) <: u64) <: u64) <: i32

let is_BIO_eof (bio: Core.Ptr.Non_null.t_NonNull Openssl3.t_bio_st) =
  (Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
      "rust_primitives::hax::failure(\n        \"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\n        \"openssl3::foreign_mod_550::v_BIO_ctrl\",\n    )(\n        rust_primitives::hax::failure(\n            \"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\n            \"core::ptr::non_null::impl_3__as_ptr::<openssl3::t_bio_st>(bio)\",\n        ),\n        cast(openssl3::v_BIO_CTRL_EOF),\n        0,\n        rust_primitives::hax::failure(\n            \"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\n            \"core::ptr::null_mut::<core::ffi::t_c_void>(Tuple0)\",\n        ),\n    )"

    <:
    i64) =.
  1L

let peek_last_error (_: Prims.unit) = Openssl3.Foreign_mod_652.v_ERR_peek_last_error ()

let as_nonnull (self: t_LibCtx) =
  Sandwich.Support.Pimpl.impl_2__as_nonnull #Openssl3.t_ossl_lib_ctx_st
    self.Sandwich.Implementation.Openssl3_impl.f_lib_ctx

let errstr (_: Prims.unit) =
  match
    Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
      "rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"sandwich::support::pimpl::impl_2__new\")::<lifetime!(something),openssl3::t_bio_st>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"openssl3::foreign_mod_528::v_BIO_new(openssl3::foreign_mod_568::v_BIO_s_mem(Tuple0))\"),rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"(|x| { { openssl3::foreign_mod_556::v_BIO_free_all(x) } })\"))"

  with
  | Core.Option.Option_Some bio ->
    let _:Prims.unit =
      Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
        "rust_primitives::hax::failure(\n        \"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\n        \"openssl3::foreign_mod_664::v_ERR_print_errors\",\n    )(\n        rust_primitives::hax::failure(\n            \"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\n            \"core::ptr::non_null::impl_3__as_ptr::<\\n        openssl3::t_bio_st,\\n    >(\\n        sandwich::support::pimpl::impl_2__as_nonnull::<\\n            lifetime!(something),\\n            openssl3::t_bio_st,\\n        >(&(bio)),\\n    )\",\n        ),\n    )"

    in
    let _:Prims.unit = () in
    let buffer:Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global =
      Alloc.Vec.from_elem #u8 0uy v_DEFAULT_BUFFER_LEN
    in
    Rust_primitives.Hax.failure "(reject_RawOrMutPointer) ExplicitRejection { reason: \"a node of kind [Raw_pointer] have been found in the AST\" }"
      "{\n        let mut buffer_ptr: raw_pointer!() = {\n            alloc::vec::impl_1__as_mut_ptr::<int, alloc::alloc::t_Global>(&mut (buffer))\n        };\n        {\n            let mut size: int = { 0 };\n            {\n                let _: tuple0 = {\n                    {\n                        loop {\n                            {\n                                let mut readbytes: int = { 0 };\n                                {\n                                    let ret: int = {\n                                        unsafe {\n                                            openssl3::foreign_mod_539::v_BIO_read_ex(\n                                                core::ptr::non_null::impl_3__as_ptr::<\n                                                    openssl3::t_bio_st,\n                                                >(\n                                                    sandwich::support::pimpl::impl_2__as_nonnull::<\n                                                        lifetime!(something),\n                                                        openssl3::t_bio_st,\n                                                    >(&(bio)),\n                                                ),\n                                                core::ptr::mut_ptr::impl__cast::<\n                                                    int,\n                                                    core::ffi::t_c_void,\n                                                >(buffer_ptr),\n                                                sandwich::implementation::openssl3_impl::support::errstr__DEFAULT_BUFFER_LEN,\n                                                address_of,\n                                            )\n                                        }\n                                    };\n                                    {\n                                        let _: tuple0 = {\n                                            (if core::cmp::PartialEq::eq(ret, 0) {\n                                                rust_primitives::hax::never_to_any({ (break (Tuple0)) })\n                                            })\n                                        };\n                                        {\n                                            let _: tuple0 = {\n                                                (if core::cmp::PartialEq::eq(readbytes, 0) {\n                                                    rust_primitives::hax::never_to_any({ (break (Tuple0)) })\n                                                })\n                                            };\n                                            {\n                                                let _: tuple0 = {\n                                                    (size = core::ops::arith::Add::add(size, readbytes))\n                                                };\n                                                {\n                                                    let _: tuple0 = {\n                                                        (if core::cmp::PartialOrd::lt(\n                                                            readbytes,\n                                                            sandwich::implementation::openssl3_impl::support::errstr__DEFAULT_BUFFER_LEN,\n                                                        ) {\n                                                            rust_primitives::hax::never_to_any({ (break (Tuple0)) })\n                                                        })\n                                                    };\n                                                    {\n                                                        let current_position: int = {\n                                                            alloc::vec::impl_1__len::<\n                                                                int,\n                                                                alloc::alloc::t_Global,\n                                                            >(&(buffer))\n                                                        };\n                                                        (match (core::num::impl__usize__checked_add(\n                                                            current_position,\n                                                            sandwich::implementation::openssl3_impl::support::errstr__DEFAULT_BUFFER_LEN,\n                                                        )) {\n                                                            core::option::Option_Some(new_size) => {\n                                                                let _: tuple0 = {\n                                                                    alloc::vec::impl_2__resize::<\n                                                                        int,\n                                                                        alloc::alloc::t_Global,\n                                                                    >(&mut (buffer), new_size, 0)\n                                                                };\n                                                                {\n                                                                    let _: tuple0 = {\n                                                                        (buffer_ptr = unsafe {\n                                                                            core::ptr::mut_ptr::impl__add::<\n                                                                                int,\n                                                                            >(\n                                                                                alloc::vec::impl_1__as_mut_ptr::<\n                                                                                    int,\n                                                                                    alloc::alloc::t_Global,\n                                                                                >(&mut (buffer)),\n                                                                                current_position,\n                                                                            )\n                                                                        })\n                                                                    };\n                                                                    Tuple0\n                                                                }\n                                                            }\n                                                            _ => {\n                                                                let _: rust_primitives::hax::t_Never = { (break (Tuple0)) };\n                                                                Tuple0\n                                                            }\n                                                        })\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                };\n                {\n                    let _: tuple0 = {\n                        alloc::vec::impl_2__resize::<\n                            int,\n                            alloc::alloc::t_Global,\n                        >(&mut (buffer), size, 0)\n                    };\n                    {\n                        let _: tuple0 = {\n                            (match (core::iter::traits::iterator::f_position::<\n                                arrow!(& int -> bool),\n                            >(\n                                &mut (core::slice::impl__iter::<\n                                    int,\n                                >(&(deref(core::ops::deref::f_deref(&(buffer)))))),\n                                (|x| { core::cmp::PartialEq::eq(deref(x), 0) }),\n                            )) {\n                                core::option::Option_Some(first_null_byte) => {\n                                    let _: tuple0 = {\n                                        (if core::cmp::PartialEq::eq(first_null_byte, 0) {\n                                            rust_primitives::hax::never_to_any({\n                                                (return alloc::string::f_to_string(\n                                                    &(deref(\"no additional information\")),\n                                                ))\n                                            })\n                                        })\n                                    };\n                                    {\n                                        let _: tuple0 = {\n                                            alloc::vec::impl_2__resize::<\n                                                int,\n                                                alloc::alloc::t_Global,\n                                            >(&mut (buffer), first_null_byte, 0)\n                                        };\n                                        Tuple0\n                                    }\n                                }\n                                _ => {\n                                    (if alloc::vec::impl_1__is_empty::<\n                                        int,\n                                        alloc::alloc::t_Global,\n                                    >(&(buffer)) {\n                                        rust_primitives::hax::never_to_any({\n                                            (return alloc::string::f_to_string(\n                                                &(deref(\"no additional information\")),\n                                            ))\n                                        })\n                                    })\n                                }\n                            })\n                        };\n                        {\n                            core::result::impl__unwrap_or_else::<\n                                alloc::string::t_String,\n                                alloc::string::t_FromUtf8Error,\n                                arrow!(\n                                    alloc::string::t_FromUtf8Error -> alloc::string::t_String\n                                ),\n                            >(\n                                alloc::string::impl__String__from_utf8(buffer),\n                                (|_| {\n                                    core::convert::f_into(&(deref(\"unknown error (not UTF-8)\")))\n                                }),\n                            )\n                        }\n                    }\n                }\n            }\n        }\n    }"

  | _ ->
    Core.Convert.f_into #string
      #Alloc.String.t_String
      #FStar.Tactics.Typeclasses.solve
      "unknown error (BIO unavailable)"

let build (self: t_ProviderBuilder) =
  match self.Sandwich.Implementation.Openssl3_impl.f_name with
  | Core.Option.Option_Some name ->
    (match self.Sandwich.Implementation.Openssl3_impl.f_lib_ctx with
      | Core.Option.Option_Some lib_ctx ->
        (match
            Core.Option.impl__ok_or_else #(Sandwich.Support.Pimpl.t_Pimpl
                Openssl3.t_ossl_provider_st)
              #(Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String)
              (Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
                  "rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"sandwich::support::pimpl::impl_2__new\")::<lifetime!(something),openssl3::t_ossl_provider_st>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"openssl3::foreign_mod_684::v_OSSL_PROVIDER_load(\\n        core::ptr::non_null::impl_3__as_ptr::<openssl3::t_ossl_lib_ctx_st>(lib_ctx),\\n        core::ffi::c_str::impl__CStr__as_ptr(&(deref(name))),\\n    )\"),rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"(|x| {\\n        {\\n            let _: int = { openssl3::foreign_mod_688::v_OSSL_PROVIDER_unload(x) };\\n            Tuple0\\n        }\\n    })\"))"

                <:
                Core.Option.t_Option (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_ossl_provider_st))
              (fun temp_0_ ->
                  let _:Prims.unit = temp_0_ in
                  let res:Alloc.String.t_String =
                    Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
                          (sz 1)
                          (let list = ["failed to load provider: "] in
                            FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                            Rust_primitives.Hax.array_of_list 1 list)
                          (let list =
                              [
                                Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                                  (errstr () <: Alloc.String.t_String)
                                <:
                                Core.Fmt.Rt.t_Argument
                              ]
                            in
                            FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                            Rust_primitives.Hax.array_of_list 1 list)
                        <:
                        Core.Fmt.t_Arguments)
                  in
                  (Sandwich_proto.Errors.SystemError_SYSTEMERROR_BACKEND
                    <:
                    Sandwich_proto.Errors.t_SystemError),
                  Core.Hint.must_use #Alloc.String.t_String res
                  <:
                  (Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String))
          with
          | Core.Result.Result_Ok provider ->
            Core.Result.Result_Ok (t_Provider provider <: t_Provider)
            <:
            Core.Result.t_Result t_Provider Sandwich.Error.t_Error
          | Core.Result.Result_Err err ->
            Core.Result.Result_Err (Core.Convert.f_from #FStar.Tactics.Typeclasses.solve err)
            <:
            Core.Result.t_Result t_Provider Sandwich.Error.t_Error)
      | _ ->
        Core.Result.Result_Err
        (Core.Convert.f_into #(Sandwich_proto.Errors.t_SystemError & string)
            #Sandwich.Error.t_Error
            #FStar.Tactics.Typeclasses.solve
            ((Sandwich_proto.Errors.SystemError_SYSTEMERROR_BACKEND
                <:
                Sandwich_proto.Errors.t_SystemError),
              "missing library context for provider"
              <:
              (Sandwich_proto.Errors.t_SystemError & string)))
        <:
        Core.Result.t_Result t_Provider Sandwich.Error.t_Error)
  | _ ->
    Core.Result.Result_Err
    (Core.Convert.f_into #(Sandwich_proto.Errors.t_SystemError & string)
        #Sandwich.Error.t_Error
        #FStar.Tactics.Typeclasses.solve
        ((Sandwich_proto.Errors.SystemError_SYSTEMERROR_BACKEND
            <:
            Sandwich_proto.Errors.t_SystemError),
          "missing name for provider"
          <:
          (Sandwich_proto.Errors.t_SystemError & string)))
    <:
    Core.Result.t_Result t_Provider Sandwich.Error.t_Error

let v_BIO_from_buffer
      (#impl_424714745_: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()]
          i1:
          Core.Convert.t_AsRef impl_424714745_ (t_Slice u8))
      (buffer: impl_424714745_)
     =
  let buffer:t_Slice u8 =
    Core.Convert.f_as_ref #impl_424714745_ #(t_Slice u8) #FStar.Tactics.Typeclasses.solve buffer
  in
  match
    Core.Result.impl__map_err #i32
      #Core.Num.Error.t_TryFromIntError
      #(Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String)
      (Core.Convert.f_try_into #usize
          #i32
          #FStar.Tactics.Typeclasses.solve
          (Core.Slice.impl__len #u8 buffer <: usize)
        <:
        Core.Result.t_Result i32 Core.Num.Error.t_TryFromIntError)
      (fun e ->
          let e:Core.Num.Error.t_TryFromIntError = e in
          let res:Alloc.String.t_String =
            Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
                  (sz 1)
                  (let list = ["cannot create a BIO object: "] in
                    FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                    Rust_primitives.Hax.array_of_list 1 list)
                  (let list =
                      [
                        Core.Fmt.Rt.impl_1__new_display #Core.Num.Error.t_TryFromIntError e
                        <:
                        Core.Fmt.Rt.t_Argument
                      ]
                    in
                    FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                    Rust_primitives.Hax.array_of_list 1 list)
                <:
                Core.Fmt.t_Arguments)
          in
          (Sandwich_proto.Errors.SystemError_SYSTEMERROR_INTEGER_OVERFLOW
            <:
            Sandwich_proto.Errors.t_SystemError),
          Core.Hint.must_use #Alloc.String.t_String res
          <:
          (Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String))
  with
  | Core.Result.Result_Ok (size: i32) ->
    Core.Option.impl__ok_or_else #(Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_bio_st)
      #Sandwich.Error.t_Error
      (Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
          "rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"sandwich::support::pimpl::impl_2__new\")::<lifetime!(something),openssl3::t_bio_st>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"openssl3::foreign_mod_570::v_BIO_new_mem_buf(\\n        core::ptr::const_ptr::impl__cast::<\\n            int,\\n            core::ffi::t_c_void,\\n        >(core::slice::impl__as_ptr::<int>(&(deref(buffer)))),\\n        size,\\n    )\"),rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"(|x| { openssl3::foreign_mod_556::v_BIO_free_all(x) })\"))"

        <:
        Core.Option.t_Option (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_bio_st))
      (fun temp_0_ ->
          let _:Prims.unit = temp_0_ in
          Core.Convert.f_into #(Sandwich_proto.Errors.t_SystemError & string)
            #Sandwich.Error.t_Error
            #FStar.Tactics.Typeclasses.solve
            ((Sandwich_proto.Errors.SystemError_SYSTEMERROR_MEMORY
                <:
                Sandwich_proto.Errors.t_SystemError),
              "cannot allocate a new BIO object"
              <:
              (Sandwich_proto.Errors.t_SystemError & string))
          <:
          Sandwich.Error.t_Error)
  | Core.Result.Result_Err err ->
    Core.Result.Result_Err (Core.Convert.f_from #FStar.Tactics.Typeclasses.solve err)
    <:
    Core.Result.t_Result (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_bio_st) Sandwich.Error.t_Error

let v_EVP_PKEY_from_BIO
      (lib_ctx: t_LibCtx)
      (bio: Core.Ptr.Non_null.t_NonNull Openssl3.t_bio_st)
      (format: Sandwich_api_proto.Encoding_format.t_ASN1EncodingFormat)
     =
  Core.Option.impl__ok_or_else #(Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_evp_pkey_st)
    #Sandwich.Error.t_Error
    (Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
        "rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"sandwich::support::pimpl::impl_2__new\")::<lifetime!(something),openssl3::t_evp_pkey_st>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"(match (format) {\\n        sandwich_api_proto::encoding_format::ASN1EncodingFormat_ENCODING_FORMAT_PEM => {\\n            openssl3::foreign_mod_3014::v_PEM_read_bio_PrivateKey_ex(\\n                core::ptr::non_null::impl_3__as_ptr::<openssl3::t_bio_st>(bio),\\n                core::ptr::null_mut::<raw_pointer!()>(Tuple0),\\n                core::option::Option_None(),\\n                core::ptr::null_mut::<core::ffi::t_c_void>(Tuple0),\\n                core::ptr::non_null::impl_3__as_ptr::<\\n                    openssl3::t_ossl_lib_ctx_st,\\n                >(\\n                    sandwich::implementation::openssl3_impl::impl_3__as_nonnull::<\\n                        lifetime!(something),\\n                    >(&(deref(lib_ctx))),\\n                ),\\n                core::ptr::null::<int>(Tuple0),\\n            )\\n        }\\n        sandwich_api_proto::encoding_format::ASN1EncodingFormat_ENCODING_FORMAT_DER => {\\n            openssl3::foreign_mod_2518::d2i_PrivateKey_ex_bio(\\n                core::ptr::non_null::impl_3__as_ptr::<openssl3::t_bio_st>(bio),\\n                core::ptr::null_mut::<raw_pointer!()>(Tuple0),\\n                core::ptr::non_null::impl_3__as_ptr::<\\n                    openssl3::t_ossl_lib_ctx_st,\\n                >(\\n                    sandwich::implementation::openssl3_impl::impl_3__as_nonnull::<\\n                        lifetime!(something),\\n                    >(&(deref(lib_ctx))),\\n                ),\\n                core::ptr::null::<int>(Tuple0),\\n            )\\n        }\\n    })\"),rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"(|x| { openssl3::foreign_mod_1685::v_EVP_PKEY_free(x) })\"))"

      <:
      Core.Option.t_Option (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_evp_pkey_st))
    (fun temp_0_ ->
        let _:Prims.unit = temp_0_ in
        let res:Alloc.String.t_String =
          Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
                (sz 1)
                (let list = ["failed to read the private key: "] in
                  FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                  Rust_primitives.Hax.array_of_list 1 list)
                (let list =
                    [
                      Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                        (errstr () <: Alloc.String.t_String)
                      <:
                      Core.Fmt.Rt.t_Argument
                    ]
                  in
                  FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                  Rust_primitives.Hax.array_of_list 1 list)
              <:
              Core.Fmt.t_Arguments)
        in
        Core.Convert.f_into #(Sandwich_proto.Errors.t_PrivateKeyError & Alloc.String.t_String)
          #Sandwich.Error.t_Error
          #FStar.Tactics.Typeclasses.solve
          ((Sandwich_proto.Errors.PrivateKeyError_PRIVATEKEYERROR_MALFORMED
              <:
              Sandwich_proto.Errors.t_PrivateKeyError),
            (Core.Hint.must_use #Alloc.String.t_String res <: Alloc.String.t_String)
            <:
            (Sandwich_proto.Errors.t_PrivateKeyError & Alloc.String.t_String)))

let v_X509_from_BIO
      (lib_ctx: t_LibCtx)
      (bio: Core.Ptr.Non_null.t_NonNull Openssl3.t_bio_st)
      (format: Sandwich_api_proto.Encoding_format.t_ASN1EncodingFormat)
     =
  match
    Core.Option.impl__ok_or #(Core.Ptr.Non_null.t_NonNull Openssl3.t_x509_st)
      #(Sandwich_proto.Errors.t_SystemError & string)
      (Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
          "rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"core::ptr::non_null::impl_3__new\")::<openssl3::t_x509_st>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"unsafe {\\n        openssl3::foreign_mod_2632::v_X509_new_ex(\\n            core::ptr::non_null::impl_3__as_ptr::<\\n                openssl3::t_ossl_lib_ctx_st,\\n            >(\\n                sandwich::implementation::openssl3_impl::impl_3__as_nonnull::<\\n                    lifetime!(something),\\n                >(&(deref(lib_ctx))),\\n            ),\\n            core::ptr::null::<int>(Tuple0),\\n        )\\n    }\"))"

        <:
        Core.Option.t_Option (Core.Ptr.Non_null.t_NonNull Openssl3.t_x509_st))
      ((Sandwich_proto.Errors.SystemError_SYSTEMERROR_MEMORY <: Sandwich_proto.Errors.t_SystemError),
        "failed to allocate a new `X509` object"
        <:
        (Sandwich_proto.Errors.t_SystemError & string))
  with
  | Core.Result.Result_Ok x509 ->
    Rust_primitives.Hax.failure "(reject_RawOrMutPointer) ExplicitRejection { reason: \"a node of kind [Raw_pointer] have been found in the AST\" }"
      "{\n        let mut inplace_ptr: raw_pointer!() = {\n            core::ptr::non_null::impl_3__as_ptr::<openssl3::t_x509_st>(x509)\n        };\n        {\n            let ptr: raw_pointer!() = {\n                (match (format) {\n                    sandwich_api_proto::encoding_format::ASN1EncodingFormat_ENCODING_FORMAT_PEM => {\n                        let _: core::ptr::non_null::t_NonNull<openssl3::t_x509_st> = {\n                            (match (core::ops::try_trait::f_branch(\n                                core::option::impl__ok_or_else::<\n                                    core::ptr::non_null::t_NonNull<openssl3::t_x509_st>,\n                                    tuple2<\n                                        sandwich_proto::errors::t_CertificateError,\n                                        alloc::string::t_String,\n                                    >,\n                                    arrow!(\n                                        tuple0 -> tuple2 <\n                                        sandwich_proto::errors::t_CertificateError,\n                                        alloc::string::t_String >\n                                    ),\n                                >(\n                                    core::ptr::non_null::impl_3__new::<\n                                        openssl3::t_x509_st,\n                                    >(unsafe {\n                                        openssl3::foreign_mod_2975::v_PEM_read_bio_X509(\n                                            core::ptr::non_null::impl_3__as_ptr::<\n                                                openssl3::t_bio_st,\n                                            >(bio),\n                                            address_of,\n                                            core::option::Option_None(),\n                                            core::ptr::null_mut::<core::ffi::t_c_void>(Tuple0),\n                                        )\n                                    }),\n                                    (|_| {\n                                        {\n                                            let _: tuple0 = {\n                                                unsafe {\n                                                    openssl3::foreign_mod_2628::v_X509_free(inplace_ptr)\n                                                }\n                                            };\n                                            {\n                                                Tuple2(\n                                                    sandwich_proto::errors::CertificateError_CERTIFICATEERROR_MALFORMED(),\n                                                    core::hint::must_use::<\n                                                        alloc::string::t_String,\n                                                    >({\n                                                        let res: alloc::string::t_String = {\n                                                            alloc::fmt::format(\n                                                                core::fmt::impl_2__new_v1::<\n                                                                    lifetime!(something),\n                                                                    generic_value!(todo),\n                                                                    generic_value!(todo),\n                                                                >(\n                                                                    &(deref(&([\"failed to read the certificate: \"]))),\n                                                                    &(deref(\n                                                                        &([\n                                                                            core::fmt::rt::impl_1__new_display::<\n                                                                                lifetime!(something),\n                                                                                alloc::string::t_String,\n                                                                            >(\n                                                                                &(deref(\n                                                                                    &(sandwich::implementation::openssl3_impl::support::errstr(\n                                                                                        Tuple0,\n                                                                                    )),\n                                                                                )),\n                                                                            ),\n                                                                        ]),\n                                                                    )),\n                                                                ),\n                                                            )\n                                                        };\n                                                        { res }\n                                                    }),\n                                                )\n                                            }\n                                        }\n                                    }),\n                                ),\n                            )) {\n                                core::ops::control_flow::ControlFlow_Break(residual) => {\n                                    rust_primitives::hax::never_to_any(\n                                        (return core::ops::try_trait::f_from_residual(residual)),\n                                    )\n                                }\n                                core::ops::control_flow::ControlFlow_Continue(val) => val,\n                            })\n                        };\n                        { inplace_ptr }\n                    }\n                    sandwich_api_proto::encoding_format::ASN1EncodingFormat_ENCODING_FORMAT_DER => {\n                        let _: core::ptr::non_null::t_NonNull<openssl3::t_x509_st> = {\n                            (match (core::ops::try_trait::f_branch(\n                                core::option::impl__ok_or_else::<\n                                    core::ptr::non_null::t_NonNull<openssl3::t_x509_st>,\n                                    tuple2<\n                                        sandwich_proto::errors::t_CertificateError,\n                                        alloc::string::t_String,\n                                    >,\n                                    arrow!(\n                                        tuple0 -> tuple2 <\n                                        sandwich_proto::errors::t_CertificateError,\n                                        alloc::string::t_String >\n                                    ),\n                                >(\n                                    core::ptr::non_null::impl_3__new::<\n                                        openssl3::t_x509_st,\n                                    >(unsafe {\n                                        openssl3::foreign_mod_2504::d2i_X509_bio(\n                                            core::ptr::non_null::impl_3__as_ptr::<\n                                                openssl3::t_bio_st,\n                                            >(bio),\n                                            address_of,\n                                        )\n                                    }),\n                                    (|_| {\n                                        {\n                                            let _: tuple0 = {\n                                                unsafe {\n                                                    openssl3::foreign_mod_2628::v_X509_free(inplace_ptr)\n                                                }\n                                            };\n                                            {\n                                                Tuple2(\n                                                    sandwich_proto::errors::CertificateError_CERTIFICATEERROR_MALFORMED(),\n                                                    core::hint::must_use::<\n                                                        alloc::string::t_String,\n                                                    >({\n                                                        let res: alloc::string::t_String = {\n                                                            alloc::fmt::format(\n                                                                core::fmt::impl_2__new_v1::<\n                                                                    lifetime!(something),\n                                                                    generic_value!(todo),\n                                                                    generic_value!(todo),\n                                                                >(\n                                                                    &(deref(&([\"failed to read the certificate: \"]))),\n                                                                    &(deref(\n                                                                        &([\n                                                                            core::fmt::rt::impl_1__new_display::<\n                                                                                lifetime!(something),\n                                                                                alloc::string::t_String,\n                                                                            >(\n                                                                                &(deref(\n                                                                                    &(sandwich::implementation::openssl3_impl::support::errstr(\n                                                                                        Tuple0,\n                                                                                    )),\n                                                                                )),\n                                                                            ),\n                                                                        ]),\n                                                                    )),\n                                                                ),\n                                                            )\n                                                        };\n                                                        { res }\n                                                    }),\n                                                )\n                                            }\n                                        }\n                                    }),\n                                ),\n                            )) {\n                                core::ops::control_flow::ControlFlow_Break(residual) => {\n                                    rust_primitives::hax::never_to_any(\n                                        (return core::ops::try_trait::f_from_residual(residual)),\n                                    )\n                                }\n                                core::ops::control_flow::ControlFlow_Continue(val) => val,\n                            })\n                        };\n                        { inplace_ptr }\n                    }\n                })\n            };\n            {\n                core::result::Result_Ok(unsafe {\n                    sandwich::support::pimpl::impl_2__new_unchecked::<\n                        lifetime!(something),\n                        openssl3::t_x509_st,\n                    >(ptr, (|x| { openssl3::foreign_mod_2628::v_X509_free(x) }))\n                })\n            }\n        }\n    }"

  | Core.Result.Result_Err err ->
    Core.Result.Result_Err (Core.Convert.f_from #FStar.Tactics.Typeclasses.solve err)
    <:
    Core.Result.t_Result (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_x509_st) Sandwich.Error.t_Error

let new_BIO (bio_meth: Core.Ptr.Non_null.t_NonNull Openssl3.t_bio_method_st) =
  Core.Option.impl__ok_or_else #(Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_bio_st)
    #Sandwich.Error.t_Error
    (Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
        "rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"sandwich::support::pimpl::impl_2__new\")::<lifetime!(something),openssl3::t_bio_st>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"openssl3::foreign_mod_528::v_BIO_new(\\n        rust_primitives::hax::failure(\\n            \\\"(AST import) Fatal error: something we considered as impossible occurred! \\\\027[1mPlease report this by submitting an issue on GitHub!\\\\027[0m\\\\nDetails: Pointer, with [cast] being Types.MutToConstPointer\\\",\\n            \\\"{ Types.attributes = [];\\\\n  contents =\\\\n  Types.PointerCoercion {cast = Types.MutToConstPointer;\\\\n    source =\\\\n    { Types.attributes = [];\\\\n      contents =\\\\n      Types.Call {\\\\n        args =\\\\n        [{ Types.attributes = [];\\\\n           contents =\\\\n           Types.VarRef {\\\\n             id =\\\\n             { Types.id =\\\\n               { Types.local_id = \\\\\\\"2\\\\\\\";\\\\n                 owner =\\\\n                 { Types.index = (0, 174); is_local = true;\\\\n                   krate = \\\\\\\"sandwich\\\\\\\";\\\\n                   path =\\\\n                   [{ Types.data = (Types.TypeNs \\\\\\\"implementation\\\\\\\");\\\\n                      disambiguator = 0 };\\\\n                     { Types.data = (Types.TypeNs \\\\\\\"openssl3_impl\\\\\\\");\\\\n                       disambiguator = 0 };\\\\n                     { Types.data = (Types.TypeNs \\\\\\\"support\\\\\\\");\\\\n                       disambiguator = 0 };\\\\n                     { Types.data = (Types.ValueNs \\\\\\\"new_BIO\\\\\\\");\\\\n                       disambiguator = 0 }\\\\n                     ]\\\\n                   }\\\\n                 };\\\\n               name = \\\\\\\"bio_meth\\\\\\\" }};\\\\n           hir_id = (Some (\\\\\\\"174\\\\\\\", \\\\\\\"18\\\\\\\"));\\\\n           span =\\\\n           { Types.filename =\\\\n             (Types.Real\\\\n                (Types.LocalPath\\\\n                   \\\\\\\"rust/implementation/openssl3_impl/support.rs\\\\\\\"));\\\\n             hi = { Types.col = \\\\\\\"45\\\\\\\"; line = \\\\\\\"110\\\\\\\" };\\\\n             lo = { Types.col = \\\\\\\"37\\\\\\\"; line = \\\\\\\"110\\\\\\\" } };\\\\n           ty =\\\\n           { Types.kind =\\\\n             Types.Adt {\\\\n               def_id =\\\\n               { Types.index = (2, 2358); is_local = false; krate = \\\\\\\"core\\\\\\\";\\\\n                 path =\\\\n                 [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\"); disambiguator = 0 };\\\\n                   { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\");\\\\n                     disambiguator = 0 };\\\\n                   { Types.data = (Types.TypeNs \\\\\\\"NonNull\\\\\\\"); disambiguator = 0\\\\n                     }\\\\n                   ]\\\\n                 };\\\\n               generic_args =\\\\n               [(Types.Type\\\\n                   { Types.kind =\\\\n                     Types.Adt {\\\\n                       def_id =\\\\n                       { Types.index = (27, 23380); is_local = false;\\\\n                         krate = \\\\\\\"openssl3\\\\\\\";\\\\n                         path =\\\\n                         [{ Types.data = (Types.TypeNs \\\\\\\"bio_method_st\\\\\\\");\\\\n                            disambiguator = 0 }\\\\n                           ]\\\\n                         };\\\\n                       generic_args = []; trait_refs = []}\\\\n                     })\\\\n                 ];\\\\n               trait_refs = []}\\\\n             }\\\\n           }\\\\n          ];\\\\n        bounds_impls = [];\\\\n        fn_span =\\\\n        { Types.filename =\\\\n          (Types.Real\\\\n             (Types.LocalPath \\\\\\\"rust/implementation/openssl3_impl/support.rs\\\\\\\"));\\\\n          hi = { Types.col = \\\\\\\"54\\\\\\\"; line = \\\\\\\"110\\\\\\\" };\\\\n          lo = { Types.col = \\\\\\\"46\\\\\\\"; line = \\\\\\\"110\\\\\\\" } };\\\\n        from_hir_call = true;\\\\n        fun' =\\\\n        { Types.attributes = [];\\\\n          contents =\\\\n          Types.GlobalName {\\\\n            id =\\\\n            { Types.index = (2, 2381); is_local = false; krate = \\\\\\\"core\\\\\\\";\\\\n              path =\\\\n              [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\"); disambiguator = 0 };\\\\n                { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\"); disambiguator = 0 };\\\\n                { Types.data = Types.Impl; disambiguator = 3 };\\\\n                { Types.data = (Types.ValueNs \\\\\\\"as_ptr\\\\\\\"); disambiguator = 0 }]\\\\n              }};\\\\n          hir_id = None;\\\\n          span =\\\\n          { Types.filename =\\\\n            (Types.Real\\\\n               (Types.LocalPath\\\\n                  \\\\\\\"rust/implementation/openssl3_impl/support.rs\\\\\\\"));\\\\n            hi = { Types.col = \\\\\\\"52\\\\\\\"; line = \\\\\\\"110\\\\\\\" };\\\\n            lo = { Types.col = \\\\\\\"46\\\\\\\"; line = \\\\\\\"110\\\\\\\" } };\\\\n          ty =\\\\n          { Types.kind =\\\\n            (Types.Arrow\\\\n               { Types.bound_vars = [];\\\\n                 value =\\\\n                 { Types.abi = Types.Abi {todo = \\\\\\\"Rust\\\\\\\"}; c_variadic = false;\\\\n                   inputs =\\\\n                   [{ Types.kind =\\\\n                      Types.Adt {\\\\n                        def_id =\\\\n                        { Types.index = (2, 2358); is_local = false;\\\\n                          krate = \\\\\\\"core\\\\\\\";\\\\n                          path =\\\\n                          [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\");\\\\n                             disambiguator = 0 };\\\\n                            { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\");\\\\n                              disambiguator = 0 };\\\\n                            { Types.data = (Types.TypeNs \\\\\\\"NonNull\\\\\\\");\\\\n                              disambiguator = 0 }\\\\n                            ]\\\\n                          };\\\\n                        generic_args =\\\\n                        [(Types.Type\\\\n                            { Types.kind =\\\\n                              Types.Adt {\\\\n                                def_id =\\\\n                                { Types.index = (27, 23380);\\\\n                                  is_local = false; krate = \\\\\\\"openssl3\\\\\\\";\\\\n                                  path =\\\\n                                  [{ Types.data =\\\\n                                     (Types.TypeNs \\\\\\\"bio_method_st\\\\\\\");\\\\n                                     disambiguator = 0 }\\\\n                                    ]\\\\n                                  };\\\\n                                generic_args = []; trait_refs = []}\\\\n                              })\\\\n                          ];\\\\n                        trait_refs = []}\\\\n                      }\\\\n                     ];\\\\n                   output =\\\\n                   { Types.kind =\\\\n                     (Types.RawPtr\\\\n                        ({ Types.kind =\\\\n                           Types.Adt {\\\\n                             def_id =\\\\n                             { Types.index = (27, 23380); is_local = false;\\\\n                               krate = \\\\\\\"openssl3\\\\\\\";\\\\n                               path =\\\\n                               [{ Types.data = (Types.TypeNs \\\\\\\"bio_method_st\\\\\\\");\\\\n                                  disambiguator = 0 }\\\\n                                 ]\\\\n                               };\\\\n                             generic_args = []; trait_refs = []}\\\\n                           },\\\\n                         true))\\\\n                     };\\\\n                   safety = Types.Safe }\\\\n                 })\\\\n            }\\\\n          };\\\\n        generic_args =\\\\n        [(Types.Type\\\\n            { Types.kind =\\\\n              Types.Adt {\\\\n                def_id =\\\\n                { Types.index = (27, 23380); is_local = false;\\\\n                  krate = \\\\\\\"openssl3\\\\\\\";\\\\n                  path =\\\\n                  [{ Types.data = (Types.TypeNs \\\\\\\"bio_method_st\\\\\\\");\\\\n                     disambiguator = 0 }\\\\n                    ]\\\\n                  };\\\\n                generic_args = []; trait_refs = []}\\\\n              })\\\\n          ];\\\\n        trait = None;\\\\n        ty =\\\\n        { Types.kind =\\\\n          (Types.Arrow\\\\n             { Types.bound_vars = [];\\\\n               value =\\\\n               { Types.abi = Types.Abi {todo = \\\\\\\"Rust\\\\\\\"}; c_variadic = false;\\\\n                 inputs =\\\\n                 [{ Types.kind =\\\\n                    Types.Adt {\\\\n                      def_id =\\\\n                      { Types.index = (2, 2358); is_local = false;\\\\n                        krate = \\\\\\\"core\\\\\\\";\\\\n                        path =\\\\n                        [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\");\\\\n                           disambiguator = 0 };\\\\n                          { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\");\\\\n                            disambiguator = 0 };\\\\n                          { Types.data = (Types.TypeNs \\\\\\\"NonNull\\\\\\\");\\\\n                            disambiguator = 0 }\\\\n                          ]\\\\n                        };\\\\n                      generic_args =\\\\n                      [(Types.Type\\\\n                          { Types.kind =\\\\n                            Types.Adt {\\\\n                              def_id =\\\\n                              { Types.index = (27, 23380); is_local = false;\\\\n                                krate = \\\\\\\"openssl3\\\\\\\";\\\\n                                path =\\\\n                                [{ Types.data =\\\\n                                   (Types.TypeNs \\\\\\\"bio_method_st\\\\\\\");\\\\n                                   disambiguator = 0 }\\\\n                                  ]\\\\n                                };\\\\n                              generic_args = []; trait_refs = []}\\\\n                            })\\\\n                        ];\\\\n                      trait_refs = []}\\\\n                    }\\\\n                   ];\\\\n                 output =\\\\n                 { Types.kind =\\\\n                   (Types.RawPtr\\\\n                      ({ Types.kind =\\\\n                         Types.Adt {\\\\n                           def_id =\\\\n                           { Types.index = (27, 23380); is_local = false;\\\\n                             krate = \\\\\\\"openssl3\\\\\\\";\\\\n                             path =\\\\n                             [{ Types.data = (Types.TypeNs \\\\\\\"bio_method_st\\\\\\\");\\\\n                                disambiguator = 0 }\\\\n                               ]\\\\n                             };\\\\n                           generic_args = []; trait_refs = []}\\\\n                         },\\\\n                       true))\\\\n                   };\\\\n                 safety = Types.Safe }\\\\n               })\\\\n          }};\\\\n      hir_id = None;\\\\n      span =\\\\n      { Types.filename =\\\\n        (Types.Real\\\\n           (Types.LocalPath \\\\\\\"rust/implementation/openssl3_impl/support.rs\\\\\\\"));\\\\n        hi = { Types.col = \\\\\\\"54\\\\\\\"; line = \\\\\\\"110\\\\\\\" };\\\\n        lo = { Types.col = \\\\\\\"37\\\\\\\"; line = \\\\\\\"110\\\\\\\" } };\\\\n      ty =\\\\n      { Types.kind =\\\\n        (Types.RawPtr\\\\n           ({ Types.kind =\\\\n              Types.Adt {\\\\n                def_id =\\\\n                { Types.index = (27, 23380); is_local = false;\\\\n                  krate = \\\\\\\"openssl3\\\\\\\";\\\\n                  path =\\\\n                  [{ Types.data = (Types.TypeNs \\\\\\\"bio_method_st\\\\\\\");\\\\n                     disambiguator = 0 }\\\\n                    ]\\\\n                  };\\\\n                generic_args = []; trait_refs = []}\\\\n              },\\\\n            true))\\\\n        }\\\\n      }};\\\\n  hir_id = (Some (\\\\\\\"174\\\\\\\", \\\\\\\"16\\\\\\\"));\\\\n  span =\\\\n  { Types.filename =\\\\n    (Types.Real\\\\n       (Types.LocalPath \\\\\\\"rust/implementation/openssl3_impl/support.rs\\\\\\\"));\\\\n    hi = { Types.col = \\\\\\\"54\\\\\\\"; line = \\\\\\\"110\\\\\\\" };\\\\n    lo = { Types.col = \\\\\\\"37\\\\\\\"; line = \\\\\\\"110\\\\\\\" } };\\\\n  ty =\\\\n  { Types.kind =\\\\n    (Types.RawPtr\\\\n       ({ Types.kind =\\\\n          Types.Adt {\\\\n            def_id =\\\\n            { Types.index = (27, 23380); is_local = false;\\\\n              krate = \\\\\\\"openssl3\\\\\\\";\\\\n              path =\\\\n              [{ Types.data = (Types.TypeNs \\\\\\\"bio_method_st\\\\\\\");\\\\n                 disambiguator = 0 }\\\\n                ]\\\\n              };\\\\n            generic_args = []; trait_refs = []}\\\\n          },\\\\n        false))\\\\n    }\\\\n  }\\\",\\n        ),\\n    )\"),rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"(|bio| { { openssl3::foreign_mod_556::v_BIO_free_all(bio) } })\"))"

      <:
      Core.Option.t_Option (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_bio_st))
    (fun temp_0_ ->
        let _:Prims.unit = temp_0_ in
        Core.Convert.f_into #(Sandwich_proto.Errors.t_SystemError & string)
          #Sandwich.Error.t_Error
          #FStar.Tactics.Typeclasses.solve
          ((Sandwich_proto.Errors.SystemError_SYSTEMERROR_MEMORY
              <:
              Sandwich_proto.Errors.t_SystemError),
            "failed to create a new BIO object"
            <:
            (Sandwich_proto.Errors.t_SystemError & string))
        <:
        Sandwich.Error.t_Error)

let try_new (_: Prims.unit) =
  match
    Core.Option.impl__ok_or #(Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_ossl_lib_ctx_st)
      #(Sandwich_proto.Errors.t_SystemError & string)
      (Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
          "rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"sandwich::support::pimpl::impl_2__new\")::<lifetime!(something),openssl3::t_ossl_lib_ctx_st>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"openssl3::foreign_mod_491::v_OSSL_LIB_CTX_new(Tuple0)\"),rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"(|ptr| {\\n        {\\n            let _: tuple0 = { openssl3::foreign_mod_495::v_OSSL_LIB_CTX_free(ptr) };\\n            Tuple0\\n        }\\n    })\"))"

        <:
        Core.Option.t_Option (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_ossl_lib_ctx_st))
      ((Sandwich_proto.Errors.SystemError_SYSTEMERROR_MEMORY <: Sandwich_proto.Errors.t_SystemError),
        "failed to create an OSSL_LIB_CTX"
        <:
        (Sandwich_proto.Errors.t_SystemError & string))
  with
  | Core.Result.Result_Ok libctx ->
    (match
        build (lib_ctx (name (v_new () <: t_ProviderBuilder) v_DEFAULT_PROVIDER_NAME
                <:
                t_ProviderBuilder)
              (Sandwich.Support.Pimpl.impl_2__as_nonnull #Openssl3.t_ossl_lib_ctx_st libctx
                <:
                Core.Ptr.Non_null.t_NonNull Openssl3.t_ossl_lib_ctx_st)
            <:
            t_ProviderBuilder)
      with
      | Core.Result.Result_Ok default_provider ->
        let _:Prims.unit = Std.Env.set_var #string #string "OQSPROV" "1" in
        let _:Prims.unit = () in
        if
          (Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
              "rust_primitives::hax::failure(\n        \"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\n        \"openssl3::foreign_mod_699::v_OSSL_PROVIDER_add_builtin\",\n    )(\n        rust_primitives::hax::failure(\n            \"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\n            \"core::ptr::non_null::impl_3__as_ptr::<\\n        openssl3::t_ossl_lib_ctx_st,\\n    >(\\n        sandwich::support::pimpl::impl_2__as_nonnull::<\\n            lifetime!(something),\\n            openssl3::t_ossl_lib_ctx_st,\\n        >(&(libctx)),\\n    )\",\n        ),\n        rust_primitives::hax::failure(\n            \"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\n            \"core::ffi::c_str::impl__CStr__as_ptr(\\n        &(deref(sandwich::implementation::openssl3_impl::v_OQS_PROVIDER_NAME)),\\n    )\",\n        ),\n        rust_primitives::hax::failure(\n            \"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\n            \"core::option::Option_Some(openssl3::foreign_mod_4000::oqs_provider_init)\",\n        ),\n    )"

            <:
            i32) <>.
          1l
        then
          let res:Alloc.String.t_String =
            Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
                  (sz 1)
                  (let list = ["failed to add the oqsprovider: "] in
                    FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                    Rust_primitives.Hax.array_of_list 1 list)
                  (let list =
                      [
                        Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                          (errstr () <: Alloc.String.t_String)
                        <:
                        Core.Fmt.Rt.t_Argument
                      ]
                    in
                    FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                    Rust_primitives.Hax.array_of_list 1 list)
                <:
                Core.Fmt.t_Arguments)
          in
          Core.Result.Result_Err
          (Core.Convert.f_into #(Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String)
              #Sandwich.Error.t_Error
              #FStar.Tactics.Typeclasses.solve
              ((Sandwich_proto.Errors.SystemError_SYSTEMERROR_MEMORY
                  <:
                  Sandwich_proto.Errors.t_SystemError),
                (Core.Hint.must_use #Alloc.String.t_String res <: Alloc.String.t_String)
                <:
                (Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String)))
          <:
          Core.Result.t_Result t_LibCtx Sandwich.Error.t_Error
        else
          (match
              build (lib_ctx (name (v_new () <: t_ProviderBuilder) v_OQS_PROVIDER_NAME
                      <:
                      t_ProviderBuilder)
                    (Sandwich.Support.Pimpl.impl_2__as_nonnull #Openssl3.t_ossl_lib_ctx_st libctx
                      <:
                      Core.Ptr.Non_null.t_NonNull Openssl3.t_ossl_lib_ctx_st)
                  <:
                  t_ProviderBuilder)
            with
            | Core.Result.Result_Ok oqs_provider ->
              let _:Prims.unit =
                Rust_primitives.Hax.failure "(reject_RawOrMutPointer) ExplicitRejection { reason: \"a node of kind [Raw_pointer] have been found in the AST\" }"
                  "{\n        let name: raw_pointer!() = {\n            unsafe {\n                openssl3::foreign_mod_700::v_OSSL_PROVIDER_get0_name(\n                    rust_primitives::hax::failure(\n                        \"(AST import) Fatal error: something we considered as impossible occurred! \\027[1mPlease report this by submitting an issue on GitHub!\\027[0m\\nDetails: Pointer, with [cast] being Types.MutToConstPointer\",\n                        \"{ Types.attributes = [];\\n  contents =\\n  Types.PointerCoercion {cast = Types.MutToConstPointer;\\n    source =\\n    { Types.attributes = [];\\n      contents =\\n      Types.Call {\\n        args =\\n        [{ Types.attributes = [];\\n           contents =\\n           Types.Call {\\n             args =\\n             [{ Types.attributes = [];\\n                contents =\\n                Types.Borrow {\\n                  arg =\\n                  { Types.attributes = [];\\n                    contents =\\n                    Types.Field {\\n                      field =\\n                      { Types.index = (0, 517); is_local = true;\\n                        krate = \\\"sandwich\\\";\\n                        path =\\n                        [{ Types.data = (Types.TypeNs \\\"implementation\\\");\\n                           disambiguator = 0 };\\n                          { Types.data = (Types.TypeNs \\\"openssl3_impl\\\");\\n                            disambiguator = 0 };\\n                          { Types.data = (Types.TypeNs \\\"Provider\\\");\\n                            disambiguator = 0 };\\n                          { Types.data = (Types.ValueNs \\\"0\\\");\\n                            disambiguator = 0 }\\n                          ]\\n                        };\\n                      lhs =\\n                      { Types.attributes = [];\\n                        contents =\\n                        Types.VarRef {\\n                          id =\\n                          { Types.id =\\n                            { Types.local_id = \\\"219\\\";\\n                              owner =\\n                              { Types.index = (0, 540); is_local = true;\\n                                krate = \\\"sandwich\\\";\\n                                path =\\n                                [{ Types.data =\\n                                   (Types.TypeNs \\\"implementation\\\");\\n                                   disambiguator = 0 };\\n                                  { Types.data =\\n                                    (Types.TypeNs \\\"openssl3_impl\\\");\\n                                    disambiguator = 0 };\\n                                  { Types.data = Types.Impl;\\n                                    disambiguator = 3 };\\n                                  { Types.data = (Types.ValueNs \\\"try_new\\\");\\n                                    disambiguator = 0 }\\n                                  ]\\n                                }\\n                              };\\n                            name = \\\"oqs_provider\\\" }};\\n                        hir_id = (Some (\\\"540\\\", \\\"232\\\"));\\n                        span =\\n                        { Types.filename =\\n                          (Types.Real\\n                             (Types.LocalPath\\n                                \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n                          hi = { Types.col = \\\"71\\\"; line = \\\"169\\\" };\\n                          lo = { Types.col = \\\"59\\\"; line = \\\"169\\\" } };\\n                        ty =\\n                        { Types.kind =\\n                          Types.Adt {\\n                            def_id =\\n                            { Types.index = (0, 514); is_local = true;\\n                              krate = \\\"sandwich\\\";\\n                              path =\\n                              [{ Types.data = (Types.TypeNs \\\"implementation\\\");\\n                                 disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"openssl3_impl\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"Provider\\\");\\n                                  disambiguator = 0 }\\n                                ]\\n                              };\\n                            generic_args =\\n                            [(Types.Lifetime { Types.kind = Types.ReErased })\\n                              ];\\n                            trait_refs = []}\\n                          }\\n                        }};\\n                    hir_id = None;\\n                    span =\\n                    { Types.filename =\\n                      (Types.Real\\n                         (Types.LocalPath\\n                            \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n                      hi = { Types.col = \\\"73\\\"; line = \\\"169\\\" };\\n                      lo = { Types.col = \\\"59\\\"; line = \\\"169\\\" } };\\n                    ty =\\n                    { Types.kind =\\n                      Types.Adt {\\n                        def_id =\\n                        { Types.index = (0, 625); is_local = true;\\n                          krate = \\\"sandwich\\\";\\n                          path =\\n                          [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                             disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                              disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"Pimpl\\\");\\n                              disambiguator = 0 }\\n                            ]\\n                          };\\n                        generic_args =\\n                        [(Types.Lifetime { Types.kind = Types.ReErased });\\n                          (Types.Type\\n                             { Types.kind =\\n                               Types.Adt {\\n                                 def_id =\\n                                 { Types.index = (27, 20845);\\n                                   is_local = false; krate = \\\"openssl3\\\";\\n                                   path =\\n                                   [{ Types.data =\\n                                      (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                      disambiguator = 0 }\\n                                     ]\\n                                   };\\n                                 generic_args = []; trait_refs = []}\\n                               })\\n                          ];\\n                        trait_refs =\\n                        [{ Types.args = [];\\n                           impl =\\n                           Types.Builtin {\\n                             trait =\\n                             { Types.bound_vars = [];\\n                               value =\\n                               { Types.def_id =\\n                                 { Types.index = (2, 26764);\\n                                   is_local = false; krate = \\\"core\\\";\\n                                   path =\\n                                   [{ Types.data = (Types.TypeNs \\\"marker\\\");\\n                                      disambiguator = 0 };\\n                                     { Types.data = (Types.TypeNs \\\"Sized\\\");\\n                                       disambiguator = 0 }\\n                                     ]\\n                                   };\\n                                 generic_args =\\n                                 [(Types.Type\\n                                     { Types.kind =\\n                                       Types.Adt {\\n                                         def_id =\\n                                         { Types.index = (27, 20845);\\n                                           is_local = false;\\n                                           krate = \\\"openssl3\\\";\\n                                           path =\\n                                           [{ Types.data =\\n                                              (Types.TypeNs\\n                                                 \\\"ossl_provider_st\\\");\\n                                              disambiguator = 0 }\\n                                             ]\\n                                           };\\n                                         generic_args = []; trait_refs = []}\\n                                       })\\n                                   ]\\n                                 }\\n                               }};\\n                           trait =\\n                           { Types.bound_vars = [];\\n                             value =\\n                             { Types.def_id =\\n                               { Types.index = (2, 26764); is_local = false;\\n                                 krate = \\\"core\\\";\\n                                 path =\\n                                 [{ Types.data = (Types.TypeNs \\\"marker\\\");\\n                                    disambiguator = 0 };\\n                                   { Types.data = (Types.TypeNs \\\"Sized\\\");\\n                                     disambiguator = 0 }\\n                                   ]\\n                                 };\\n                               generic_args =\\n                               [(Types.Type\\n                                   { Types.kind =\\n                                     Types.Adt {\\n                                       def_id =\\n                                       { Types.index = (27, 20845);\\n                                         is_local = false;\\n                                         krate = \\\"openssl3\\\";\\n                                         path =\\n                                         [{ Types.data =\\n                                            (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                            disambiguator = 0 }\\n                                           ]\\n                                         };\\n                                       generic_args = []; trait_refs = []}\\n                                     })\\n                                 ]\\n                               }\\n                             }\\n                           }\\n                          ]}\\n                      }\\n                    };\\n                  borrow_kind = Types.Shared};\\n                hir_id = (Some (\\\"540\\\", \\\"231\\\"));\\n                span =\\n                { Types.filename =\\n                  (Types.Real\\n                     (Types.LocalPath\\n                        \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n                  hi = { Types.col = \\\"73\\\"; line = \\\"169\\\" };\\n                  lo = { Types.col = \\\"59\\\"; line = \\\"169\\\" } };\\n                ty =\\n                { Types.kind =\\n                  (Types.Ref\\n                     ({ Types.kind = Types.ReErased },\\n                      { Types.kind =\\n                        Types.Adt {\\n                          def_id =\\n                          { Types.index = (0, 625); is_local = true;\\n                            krate = \\\"sandwich\\\";\\n                            path =\\n                            [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                               disambiguator = 0 };\\n                              { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                                disambiguator = 0 };\\n                              { Types.data = (Types.TypeNs \\\"Pimpl\\\");\\n                                disambiguator = 0 }\\n                              ]\\n                            };\\n                          generic_args =\\n                          [(Types.Lifetime { Types.kind = Types.ReErased });\\n                            (Types.Type\\n                               { Types.kind =\\n                                 Types.Adt {\\n                                   def_id =\\n                                   { Types.index = (27, 20845);\\n                                     is_local = false; krate = \\\"openssl3\\\";\\n                                     path =\\n                                     [{ Types.data =\\n                                        (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                        disambiguator = 0 }\\n                                       ]\\n                                     };\\n                                   generic_args = []; trait_refs = []}\\n                                 })\\n                            ];\\n                          trait_refs =\\n                          [{ Types.args = [];\\n                             impl =\\n                             Types.Builtin {\\n                               trait =\\n                               { Types.bound_vars = [];\\n                                 value =\\n                                 { Types.def_id =\\n                                   { Types.index = (2, 26764);\\n                                     is_local = false; krate = \\\"core\\\";\\n                                     path =\\n                                     [{ Types.data = (Types.TypeNs \\\"marker\\\");\\n                                        disambiguator = 0 };\\n                                       { Types.data = (Types.TypeNs \\\"Sized\\\");\\n                                         disambiguator = 0 }\\n                                       ]\\n                                     };\\n                                   generic_args =\\n                                   [(Types.Type\\n                                       { Types.kind =\\n                                         Types.Adt {\\n                                           def_id =\\n                                           { Types.index = (27, 20845);\\n                                             is_local = false;\\n                                             krate = \\\"openssl3\\\";\\n                                             path =\\n                                             [{ Types.data =\\n                                                (Types.TypeNs\\n                                                   \\\"ossl_provider_st\\\");\\n                                                disambiguator = 0 }\\n                                               ]\\n                                             };\\n                                           generic_args = []; trait_refs = []}\\n                                         })\\n                                     ]\\n                                   }\\n                                 }};\\n                             trait =\\n                             { Types.bound_vars = [];\\n                               value =\\n                               { Types.def_id =\\n                                 { Types.index = (2, 26764);\\n                                   is_local = false; krate = \\\"core\\\";\\n                                   path =\\n                                   [{ Types.data = (Types.TypeNs \\\"marker\\\");\\n                                      disambiguator = 0 };\\n                                     { Types.data = (Types.TypeNs \\\"Sized\\\");\\n                                       disambiguator = 0 }\\n                                     ]\\n                                   };\\n                                 generic_args =\\n                                 [(Types.Type\\n                                     { Types.kind =\\n                                       Types.Adt {\\n                                         def_id =\\n                                         { Types.index = (27, 20845);\\n                                           is_local = false;\\n                                           krate = \\\"openssl3\\\";\\n                                           path =\\n                                           [{ Types.data =\\n                                              (Types.TypeNs\\n                                                 \\\"ossl_provider_st\\\");\\n                                              disambiguator = 0 }\\n                                             ]\\n                                           };\\n                                         generic_args = []; trait_refs = []}\\n                                       })\\n                                   ]\\n                                 }\\n                               }\\n                             }\\n                            ]}\\n                        },\\n                      false))\\n                  }\\n                }\\n               ];\\n             bounds_impls = [];\\n             fn_span =\\n             { Types.filename =\\n               (Types.Real\\n                  (Types.LocalPath \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n               hi = { Types.col = \\\"86\\\"; line = \\\"169\\\" };\\n               lo = { Types.col = \\\"74\\\"; line = \\\"169\\\" } };\\n             from_hir_call = true;\\n             fun' =\\n             { Types.attributes = [];\\n               contents =\\n               Types.GlobalName {\\n                 id =\\n                 { Types.index = (0, 641); is_local = true;\\n                   krate = \\\"sandwich\\\";\\n                   path =\\n                   [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                      disambiguator = 0 };\\n                     { Types.data = (Types.TypeNs \\\"pimpl\\\"); disambiguator = 0\\n                       };\\n                     { Types.data = Types.Impl; disambiguator = 2 };\\n                     { Types.data = (Types.ValueNs \\\"as_nonnull\\\");\\n                       disambiguator = 0 }\\n                     ]\\n                   }};\\n               hir_id = None;\\n               span =\\n               { Types.filename =\\n                 (Types.Real\\n                    (Types.LocalPath\\n                       \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n                 hi = { Types.col = \\\"84\\\"; line = \\\"169\\\" };\\n                 lo = { Types.col = \\\"74\\\"; line = \\\"169\\\" } };\\n               ty =\\n               { Types.kind =\\n                 (Types.Arrow\\n                    { Types.bound_vars =\\n                      [(Types.Region\\n                          (Types.BrNamed\\n                             ({ Types.index = (0, 1672); is_local = true;\\n                                krate = \\\"sandwich\\\";\\n                                path =\\n                                [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                                   disambiguator = 0 };\\n                                  { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                                    disambiguator = 0 };\\n                                  { Types.data = Types.Impl;\\n                                    disambiguator = 2 };\\n                                  { Types.data = (Types.ValueNs \\\"as_nonnull\\\");\\n                                    disambiguator = 0 };\\n                                  { Types.data = (Types.LifetimeNs \\\"'_\\\");\\n                                    disambiguator = 0 }\\n                                  ]\\n                                },\\n                              \\\"'_\\\")))\\n                        ];\\n                      value =\\n                      { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                        c_variadic = false;\\n                        inputs =\\n                        [{ Types.kind =\\n                           (Types.Ref\\n                              ({ Types.kind =\\n                                 (Types.ReBound\\n                                    (\\\"0\\\",\\n                                     { Types.kind =\\n                                       (Types.BrNamed\\n                                          ({ Types.index = (0, 1672);\\n                                             is_local = true;\\n                                             krate = \\\"sandwich\\\";\\n                                             path =\\n                                             [{ Types.data =\\n                                                (Types.TypeNs \\\"support\\\");\\n                                                disambiguator = 0 };\\n                                               { Types.data =\\n                                                 (Types.TypeNs \\\"pimpl\\\");\\n                                                 disambiguator = 0 };\\n                                               { Types.data = Types.Impl;\\n                                                 disambiguator = 2 };\\n                                               { Types.data =\\n                                                 (Types.ValueNs \\\"as_nonnull\\\");\\n                                                 disambiguator = 0 };\\n                                               { Types.data =\\n                                                 (Types.LifetimeNs \\\"'_\\\");\\n                                                 disambiguator = 0 }\\n                                               ]\\n                                             },\\n                                           \\\"'_\\\"));\\n                                       var = \\\"0\\\" }))\\n                                 },\\n                               { Types.kind =\\n                                 Types.Adt {\\n                                   def_id =\\n                                   { Types.index = (0, 625); is_local = true;\\n                                     krate = \\\"sandwich\\\";\\n                                     path =\\n                                     [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                                        disambiguator = 0 };\\n                                       { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                                         disambiguator = 0 };\\n                                       { Types.data = (Types.TypeNs \\\"Pimpl\\\");\\n                                         disambiguator = 0 }\\n                                       ]\\n                                     };\\n                                   generic_args =\\n                                   [(Types.Lifetime\\n                                       { Types.kind = Types.ReErased });\\n                                     (Types.Type\\n                                        { Types.kind =\\n                                          Types.Adt {\\n                                            def_id =\\n                                            { Types.index = (27, 20845);\\n                                              is_local = false;\\n                                              krate = \\\"openssl3\\\";\\n                                              path =\\n                                              [{ Types.data =\\n                                                 (Types.TypeNs\\n                                                    \\\"ossl_provider_st\\\");\\n                                                 disambiguator = 0 }\\n                                                ]\\n                                              };\\n                                            generic_args = [];\\n                                            trait_refs = []}\\n                                          })\\n                                     ];\\n                                   trait_refs =\\n                                   [{ Types.args = [];\\n                                      impl =\\n                                      Types.Builtin {\\n                                        trait =\\n                                        { Types.bound_vars = [];\\n                                          value =\\n                                          { Types.def_id =\\n                                            { Types.index = (2, 26764);\\n                                              is_local = false;\\n                                              krate = \\\"core\\\";\\n                                              path =\\n                                              [{ Types.data =\\n                                                 (Types.TypeNs \\\"marker\\\");\\n                                                 disambiguator = 0 };\\n                                                { Types.data =\\n                                                  (Types.TypeNs \\\"Sized\\\");\\n                                                  disambiguator = 0 }\\n                                                ]\\n                                              };\\n                                            generic_args =\\n                                            [(Types.Type\\n                                                { Types.kind =\\n                                                  Types.Adt {\\n                                                    def_id =\\n                                                    { Types.index =\\n                                                      (27, 20845);\\n                                                      is_local = false;\\n                                                      krate = \\\"openssl3\\\";\\n                                                      path =\\n                                                      [{ Types.data =\\n                                                         (Types.TypeNs\\n                                                            \\\"ossl_provider_st\\\");\\n                                                         disambiguator = 0 }\\n                                                        ]\\n                                                      };\\n                                                    generic_args = [];\\n                                                    trait_refs = []}\\n                                                  })\\n                                              ]\\n                                            }\\n                                          }};\\n                                      trait =\\n                                      { Types.bound_vars = [];\\n                                        value =\\n                                        { Types.def_id =\\n                                          { Types.index = (2, 26764);\\n                                            is_local = false; krate = \\\"core\\\";\\n                                            path =\\n                                            [{ Types.data =\\n                                               (Types.TypeNs \\\"marker\\\");\\n                                               disambiguator = 0 };\\n                                              { Types.data =\\n                                                (Types.TypeNs \\\"Sized\\\");\\n                                                disambiguator = 0 }\\n                                              ]\\n                                            };\\n                                          generic_args =\\n                                          [(Types.Type\\n                                              { Types.kind =\\n                                                Types.Adt {\\n                                                  def_id =\\n                                                  { Types.index = (27, 20845);\\n                                                    is_local = false;\\n                                                    krate = \\\"openssl3\\\";\\n                                                    path =\\n                                                    [{ Types.data =\\n                                                       (Types.TypeNs\\n                                                          \\\"ossl_provider_st\\\");\\n                                                       disambiguator = 0 }\\n                                                      ]\\n                                                    };\\n                                                  generic_args = [];\\n                                                  trait_refs = []}\\n                                                })\\n                                            ]\\n                                          }\\n                                        }\\n                                      }\\n                                     ]}\\n                                 },\\n                               false))\\n                           }\\n                          ];\\n                        output =\\n                        { Types.kind =\\n                          Types.Adt {\\n                            def_id =\\n                            { Types.index = (2, 2358); is_local = false;\\n                              krate = \\\"core\\\";\\n                              path =\\n                              [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                 disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                                  disambiguator = 0 }\\n                                ]\\n                              };\\n                            generic_args =\\n                            [(Types.Type\\n                                { Types.kind =\\n                                  Types.Adt {\\n                                    def_id =\\n                                    { Types.index = (27, 20845);\\n                                      is_local = false; krate = \\\"openssl3\\\";\\n                                      path =\\n                                      [{ Types.data =\\n                                         (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                         disambiguator = 0 }\\n                                        ]\\n                                      };\\n                                    generic_args = []; trait_refs = []}\\n                                  })\\n                              ];\\n                            trait_refs = []}\\n                          };\\n                        safety = Types.Safe }\\n                      })\\n                 }\\n               };\\n             generic_args =\\n             [(Types.Lifetime { Types.kind = Types.ReErased });\\n               (Types.Type\\n                  { Types.kind =\\n                    Types.Adt {\\n                      def_id =\\n                      { Types.index = (27, 20845); is_local = false;\\n                        krate = \\\"openssl3\\\";\\n                        path =\\n                        [{ Types.data = (Types.TypeNs \\\"ossl_provider_st\\\");\\n                           disambiguator = 0 }\\n                          ]\\n                        };\\n                      generic_args = []; trait_refs = []}\\n                    })\\n               ];\\n             trait = None;\\n             ty =\\n             { Types.kind =\\n               (Types.Arrow\\n                  { Types.bound_vars =\\n                    [(Types.Region\\n                        (Types.BrNamed\\n                           ({ Types.index = (0, 1672); is_local = true;\\n                              krate = \\\"sandwich\\\";\\n                              path =\\n                              [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                                 disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = Types.Impl; disambiguator = 2\\n                                  };\\n                                { Types.data = (Types.ValueNs \\\"as_nonnull\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = (Types.LifetimeNs \\\"'_\\\");\\n                                  disambiguator = 0 }\\n                                ]\\n                              },\\n                            \\\"'_\\\")))\\n                      ];\\n                    value =\\n                    { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                      c_variadic = false;\\n                      inputs =\\n                      [{ Types.kind =\\n                         (Types.Ref\\n                            ({ Types.kind =\\n                               (Types.ReBound\\n                                  (\\\"0\\\",\\n                                   { Types.kind =\\n                                     (Types.BrNamed\\n                                        ({ Types.index = (0, 1672);\\n                                           is_local = true;\\n                                           krate = \\\"sandwich\\\";\\n                                           path =\\n                                           [{ Types.data =\\n                                              (Types.TypeNs \\\"support\\\");\\n                                              disambiguator = 0 };\\n                                             { Types.data =\\n                                               (Types.TypeNs \\\"pimpl\\\");\\n                                               disambiguator = 0 };\\n                                             { Types.data = Types.Impl;\\n                                               disambiguator = 2 };\\n                                             { Types.data =\\n                                               (Types.ValueNs \\\"as_nonnull\\\");\\n                                               disambiguator = 0 };\\n                                             { Types.data =\\n                                               (Types.LifetimeNs \\\"'_\\\");\\n                                               disambiguator = 0 }\\n                                             ]\\n                                           },\\n                                         \\\"'_\\\"));\\n                                     var = \\\"0\\\" }))\\n                               },\\n                             { Types.kind =\\n                               Types.Adt {\\n                                 def_id =\\n                                 { Types.index = (0, 625); is_local = true;\\n                                   krate = \\\"sandwich\\\";\\n                                   path =\\n                                   [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                                      disambiguator = 0 };\\n                                     { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                                       disambiguator = 0 };\\n                                     { Types.data = (Types.TypeNs \\\"Pimpl\\\");\\n                                       disambiguator = 0 }\\n                                     ]\\n                                   };\\n                                 generic_args =\\n                                 [(Types.Lifetime\\n                                     { Types.kind = Types.ReErased });\\n                                   (Types.Type\\n                                      { Types.kind =\\n                                        Types.Adt {\\n                                          def_id =\\n                                          { Types.index = (27, 20845);\\n                                            is_local = false;\\n                                            krate = \\\"openssl3\\\";\\n                                            path =\\n                                            [{ Types.data =\\n                                               (Types.TypeNs\\n                                                  \\\"ossl_provider_st\\\");\\n                                               disambiguator = 0 }\\n                                              ]\\n                                            };\\n                                          generic_args = []; trait_refs = []}\\n                                        })\\n                                   ];\\n                                 trait_refs =\\n                                 [{ Types.args = [];\\n                                    impl =\\n                                    Types.Builtin {\\n                                      trait =\\n                                      { Types.bound_vars = [];\\n                                        value =\\n                                        { Types.def_id =\\n                                          { Types.index = (2, 26764);\\n                                            is_local = false; krate = \\\"core\\\";\\n                                            path =\\n                                            [{ Types.data =\\n                                               (Types.TypeNs \\\"marker\\\");\\n                                               disambiguator = 0 };\\n                                              { Types.data =\\n                                                (Types.TypeNs \\\"Sized\\\");\\n                                                disambiguator = 0 }\\n                                              ]\\n                                            };\\n                                          generic_args =\\n                                          [(Types.Type\\n                                              { Types.kind =\\n                                                Types.Adt {\\n                                                  def_id =\\n                                                  { Types.index = (27, 20845);\\n                                                    is_local = false;\\n                                                    krate = \\\"openssl3\\\";\\n                                                    path =\\n                                                    [{ Types.data =\\n                                                       (Types.TypeNs\\n                                                          \\\"ossl_provider_st\\\");\\n                                                       disambiguator = 0 }\\n                                                      ]\\n                                                    };\\n                                                  generic_args = [];\\n                                                  trait_refs = []}\\n                                                })\\n                                            ]\\n                                          }\\n                                        }};\\n                                    trait =\\n                                    { Types.bound_vars = [];\\n                                      value =\\n                                      { Types.def_id =\\n                                        { Types.index = (2, 26764);\\n                                          is_local = false; krate = \\\"core\\\";\\n                                          path =\\n                                          [{ Types.data =\\n                                             (Types.TypeNs \\\"marker\\\");\\n                                             disambiguator = 0 };\\n                                            { Types.data =\\n                                              (Types.TypeNs \\\"Sized\\\");\\n                                              disambiguator = 0 }\\n                                            ]\\n                                          };\\n                                        generic_args =\\n                                        [(Types.Type\\n                                            { Types.kind =\\n                                              Types.Adt {\\n                                                def_id =\\n                                                { Types.index = (27, 20845);\\n                                                  is_local = false;\\n                                                  krate = \\\"openssl3\\\";\\n                                                  path =\\n                                                  [{ Types.data =\\n                                                     (Types.TypeNs\\n                                                        \\\"ossl_provider_st\\\");\\n                                                     disambiguator = 0 }\\n                                                    ]\\n                                                  };\\n                                                generic_args = [];\\n                                                trait_refs = []}\\n                                              })\\n                                          ]\\n                                        }\\n                                      }\\n                                    }\\n                                   ]}\\n                               },\\n                             false))\\n                         }\\n                        ];\\n                      output =\\n                      { Types.kind =\\n                        Types.Adt {\\n                          def_id =\\n                          { Types.index = (2, 2358); is_local = false;\\n                            krate = \\\"core\\\";\\n                            path =\\n                            [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                               disambiguator = 0 };\\n                              { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                                disambiguator = 0 };\\n                              { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                                disambiguator = 0 }\\n                              ]\\n                            };\\n                          generic_args =\\n                          [(Types.Type\\n                              { Types.kind =\\n                                Types.Adt {\\n                                  def_id =\\n                                  { Types.index = (27, 20845);\\n                                    is_local = false; krate = \\\"openssl3\\\";\\n                                    path =\\n                                    [{ Types.data =\\n                                       (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                       disambiguator = 0 }\\n                                      ]\\n                                    };\\n                                  generic_args = []; trait_refs = []}\\n                                })\\n                            ];\\n                          trait_refs = []}\\n                        };\\n                      safety = Types.Safe }\\n                    })\\n               }};\\n           hir_id = (Some (\\\"540\\\", \\\"229\\\"));\\n           span =\\n           { Types.filename =\\n             (Types.Real\\n                (Types.LocalPath \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n             hi = { Types.col = \\\"86\\\"; line = \\\"169\\\" };\\n             lo = { Types.col = \\\"59\\\"; line = \\\"169\\\" } };\\n           ty =\\n           { Types.kind =\\n             Types.Adt {\\n               def_id =\\n               { Types.index = (2, 2358); is_local = false; krate = \\\"core\\\";\\n                 path =\\n                 [{ Types.data = (Types.TypeNs \\\"ptr\\\"); disambiguator = 0 };\\n                   { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                     disambiguator = 0 };\\n                   { Types.data = (Types.TypeNs \\\"NonNull\\\"); disambiguator = 0\\n                     }\\n                   ]\\n                 };\\n               generic_args =\\n               [(Types.Type\\n                   { Types.kind =\\n                     Types.Adt {\\n                       def_id =\\n                       { Types.index = (27, 20845); is_local = false;\\n                         krate = \\\"openssl3\\\";\\n                         path =\\n                         [{ Types.data = (Types.TypeNs \\\"ossl_provider_st\\\");\\n                            disambiguator = 0 }\\n                           ]\\n                         };\\n                       generic_args = []; trait_refs = []}\\n                     })\\n                 ];\\n               trait_refs = []}\\n             }\\n           }\\n          ];\\n        bounds_impls = [];\\n        fn_span =\\n        { Types.filename =\\n          (Types.Real\\n             (Types.LocalPath \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n          hi = { Types.col = \\\"95\\\"; line = \\\"169\\\" };\\n          lo = { Types.col = \\\"87\\\"; line = \\\"169\\\" } };\\n        from_hir_call = true;\\n        fun' =\\n        { Types.attributes = [];\\n          contents =\\n          Types.GlobalName {\\n            id =\\n            { Types.index = (2, 2381); is_local = false; krate = \\\"core\\\";\\n              path =\\n              [{ Types.data = (Types.TypeNs \\\"ptr\\\"); disambiguator = 0 };\\n                { Types.data = (Types.TypeNs \\\"non_null\\\"); disambiguator = 0 };\\n                { Types.data = Types.Impl; disambiguator = 3 };\\n                { Types.data = (Types.ValueNs \\\"as_ptr\\\"); disambiguator = 0 }]\\n              }};\\n          hir_id = None;\\n          span =\\n          { Types.filename =\\n            (Types.Real\\n               (Types.LocalPath \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n            hi = { Types.col = \\\"93\\\"; line = \\\"169\\\" };\\n            lo = { Types.col = \\\"87\\\"; line = \\\"169\\\" } };\\n          ty =\\n          { Types.kind =\\n            (Types.Arrow\\n               { Types.bound_vars = [];\\n                 value =\\n                 { Types.abi = Types.Abi {todo = \\\"Rust\\\"}; c_variadic = false;\\n                   inputs =\\n                   [{ Types.kind =\\n                      Types.Adt {\\n                        def_id =\\n                        { Types.index = (2, 2358); is_local = false;\\n                          krate = \\\"core\\\";\\n                          path =\\n                          [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                             disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                              disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                              disambiguator = 0 }\\n                            ]\\n                          };\\n                        generic_args =\\n                        [(Types.Type\\n                            { Types.kind =\\n                              Types.Adt {\\n                                def_id =\\n                                { Types.index = (27, 20845);\\n                                  is_local = false; krate = \\\"openssl3\\\";\\n                                  path =\\n                                  [{ Types.data =\\n                                     (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                     disambiguator = 0 }\\n                                    ]\\n                                  };\\n                                generic_args = []; trait_refs = []}\\n                              })\\n                          ];\\n                        trait_refs = []}\\n                      }\\n                     ];\\n                   output =\\n                   { Types.kind =\\n                     (Types.RawPtr\\n                        ({ Types.kind =\\n                           Types.Adt {\\n                             def_id =\\n                             { Types.index = (27, 20845); is_local = false;\\n                               krate = \\\"openssl3\\\";\\n                               path =\\n                               [{ Types.data =\\n                                  (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                  disambiguator = 0 }\\n                                 ]\\n                               };\\n                             generic_args = []; trait_refs = []}\\n                           },\\n                         true))\\n                     };\\n                   safety = Types.Safe }\\n                 })\\n            }\\n          };\\n        generic_args =\\n        [(Types.Type\\n            { Types.kind =\\n              Types.Adt {\\n                def_id =\\n                { Types.index = (27, 20845); is_local = false;\\n                  krate = \\\"openssl3\\\";\\n                  path =\\n                  [{ Types.data = (Types.TypeNs \\\"ossl_provider_st\\\");\\n                     disambiguator = 0 }\\n                    ]\\n                  };\\n                generic_args = []; trait_refs = []}\\n              })\\n          ];\\n        trait = None;\\n        ty =\\n        { Types.kind =\\n          (Types.Arrow\\n             { Types.bound_vars = [];\\n               value =\\n               { Types.abi = Types.Abi {todo = \\\"Rust\\\"}; c_variadic = false;\\n                 inputs =\\n                 [{ Types.kind =\\n                    Types.Adt {\\n                      def_id =\\n                      { Types.index = (2, 2358); is_local = false;\\n                        krate = \\\"core\\\";\\n                        path =\\n                        [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                           disambiguator = 0 };\\n                          { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                            disambiguator = 0 };\\n                          { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                            disambiguator = 0 }\\n                          ]\\n                        };\\n                      generic_args =\\n                      [(Types.Type\\n                          { Types.kind =\\n                            Types.Adt {\\n                              def_id =\\n                              { Types.index = (27, 20845); is_local = false;\\n                                krate = \\\"openssl3\\\";\\n                                path =\\n                                [{ Types.data =\\n                                   (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                   disambiguator = 0 }\\n                                  ]\\n                                };\\n                              generic_args = []; trait_refs = []}\\n                            })\\n                        ];\\n                      trait_refs = []}\\n                    }\\n                   ];\\n                 output =\\n                 { Types.kind =\\n                   (Types.RawPtr\\n                      ({ Types.kind =\\n                         Types.Adt {\\n                           def_id =\\n                           { Types.index = (27, 20845); is_local = false;\\n                             krate = \\\"openssl3\\\";\\n                             path =\\n                             [{ Types.data =\\n                                (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                disambiguator = 0 }\\n                               ]\\n                             };\\n                           generic_args = []; trait_refs = []}\\n                         },\\n                       true))\\n                   };\\n                 safety = Types.Safe }\\n               })\\n          }};\\n      hir_id = None;\\n      span =\\n      { Types.filename =\\n        (Types.Real\\n           (Types.LocalPath \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n        hi = { Types.col = \\\"95\\\"; line = \\\"169\\\" };\\n        lo = { Types.col = \\\"59\\\"; line = \\\"169\\\" } };\\n      ty =\\n      { Types.kind =\\n        (Types.RawPtr\\n           ({ Types.kind =\\n              Types.Adt {\\n                def_id =\\n                { Types.index = (27, 20845); is_local = false;\\n                  krate = \\\"openssl3\\\";\\n                  path =\\n                  [{ Types.data = (Types.TypeNs \\\"ossl_provider_st\\\");\\n                     disambiguator = 0 }\\n                    ]\\n                  };\\n                generic_args = []; trait_refs = []}\\n              },\\n            true))\\n        }\\n      }};\\n  hir_id = (Some (\\\"540\\\", \\\"227\\\"));\\n  span =\\n  { Types.filename =\\n    (Types.Real (Types.LocalPath \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n    hi = { Types.col = \\\"95\\\"; line = \\\"169\\\" };\\n    lo = { Types.col = \\\"59\\\"; line = \\\"169\\\" } };\\n  ty =\\n  { Types.kind =\\n    (Types.RawPtr\\n       ({ Types.kind =\\n          Types.Adt {\\n            def_id =\\n            { Types.index = (27, 20845); is_local = false;\\n              krate = \\\"openssl3\\\";\\n              path =\\n              [{ Types.data = (Types.TypeNs \\\"ossl_provider_st\\\");\\n                 disambiguator = 0 }\\n                ]\\n              };\\n            generic_args = []; trait_refs = []}\\n          },\\n        false))\\n    }\\n  }\",\n                    ),\n                )\n            }\n        };\n        {\n            let _: tuple0 = {\n                (if core::ptr::const_ptr::impl__is_null::<int>(name) {\n                    rust_primitives::hax::never_to_any({\n                        (return core::result::Result_Err(\n                            core::convert::f_into(\n                                Tuple2(\n                                    sandwich_proto::errors::SystemError_SYSTEMERROR_MEMORY(),\n                                    \"provider's name is null\",\n                                ),\n                            ),\n                        ))\n                    })\n                })\n            };\n            {\n                let name: &core::ffi::c_str::t_CStr = {\n                    unsafe {\n                        core::ffi::c_str::impl__CStr__from_ptr::<\n                            lifetime!(something),\n                        >(name)\n                    }\n                };\n                {\n                    let _: tuple0 = {\n                        (if core::cmp::f_ne(\n                            &(name),\n                            &(sandwich::implementation::openssl3_impl::v_OQS_PROVIDER_NAME),\n                        ) {\n                            rust_primitives::hax::never_to_any({\n                                (return core::result::Result_Err(\n                                    core::convert::f_into(\n                                        Tuple2(\n                                            sandwich_proto::errors::SystemError_SYSTEMERROR_MEMORY(),\n                                            core::hint::must_use::<\n                                                alloc::string::t_String,\n                                            >({\n                                                let res: alloc::string::t_String = {\n                                                    alloc::fmt::format(\n                                                        core::fmt::impl_2__new_v1::<\n                                                            lifetime!(something),\n                                                            generic_value!(todo),\n                                                            generic_value!(todo),\n                                                        >(\n                                                            &(deref(\n                                                                &([\"provider's name does not match 'oqsprovider': got \"]),\n                                                            )),\n                                                            &(deref(\n                                                                &([\n                                                                    core::fmt::rt::impl_1__new_debug::<\n                                                                        lifetime!(something),\n                                                                        &core::ffi::c_str::t_CStr,\n                                                                    >(&(deref(&(name)))),\n                                                                ]),\n                                                            )),\n                                                        ),\n                                                    )\n                                                };\n                                                { res }\n                                            }),\n                                        ),\n                                    ),\n                                ))\n                            })\n                        })\n                    };\n                    {\n                        (if core::cmp::PartialEq::ne(\n                            unsafe {\n                                openssl3::foreign_mod_693::v_OSSL_PROVIDER_self_test(\n                                    rust_primitives::hax::failure(\n                                        \"(AST import) Fatal error: something we considered as impossible occurred! \\027[1mPlease report this by submitting an issue on GitHub!\\027[0m\\nDetails: Pointer, with [cast] being Types.MutToConstPointer\",\n                                        \"{ Types.attributes = [];\\n  contents =\\n  Types.PointerCoercion {cast = Types.MutToConstPointer;\\n    source =\\n    { Types.attributes = [];\\n      contents =\\n      Types.Call {\\n        args =\\n        [{ Types.attributes = [];\\n           contents =\\n           Types.Call {\\n             args =\\n             [{ Types.attributes = [];\\n                contents =\\n                Types.Borrow {\\n                  arg =\\n                  { Types.attributes = [];\\n                    contents =\\n                    Types.Field {\\n                      field =\\n                      { Types.index = (0, 517); is_local = true;\\n                        krate = \\\"sandwich\\\";\\n                        path =\\n                        [{ Types.data = (Types.TypeNs \\\"implementation\\\");\\n                           disambiguator = 0 };\\n                          { Types.data = (Types.TypeNs \\\"openssl3_impl\\\");\\n                            disambiguator = 0 };\\n                          { Types.data = (Types.TypeNs \\\"Provider\\\");\\n                            disambiguator = 0 };\\n                          { Types.data = (Types.ValueNs \\\"0\\\");\\n                            disambiguator = 0 }\\n                          ]\\n                        };\\n                      lhs =\\n                      { Types.attributes = [];\\n                        contents =\\n                        Types.VarRef {\\n                          id =\\n                          { Types.id =\\n                            { Types.local_id = \\\"219\\\";\\n                              owner =\\n                              { Types.index = (0, 540); is_local = true;\\n                                krate = \\\"sandwich\\\";\\n                                path =\\n                                [{ Types.data =\\n                                   (Types.TypeNs \\\"implementation\\\");\\n                                   disambiguator = 0 };\\n                                  { Types.data =\\n                                    (Types.TypeNs \\\"openssl3_impl\\\");\\n                                    disambiguator = 0 };\\n                                  { Types.data = Types.Impl;\\n                                    disambiguator = 3 };\\n                                  { Types.data = (Types.ValueNs \\\"try_new\\\");\\n                                    disambiguator = 0 }\\n                                  ]\\n                                }\\n                              };\\n                            name = \\\"oqs_provider\\\" }};\\n                        hir_id = (Some (\\\"540\\\", \\\"342\\\"));\\n                        span =\\n                        { Types.filename =\\n                          (Types.Real\\n                             (Types.LocalPath\\n                                \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n                          hi = { Types.col = \\\"70\\\"; line = \\\"185\\\" };\\n                          lo = { Types.col = \\\"58\\\"; line = \\\"185\\\" } };\\n                        ty =\\n                        { Types.kind =\\n                          Types.Adt {\\n                            def_id =\\n                            { Types.index = (0, 514); is_local = true;\\n                              krate = \\\"sandwich\\\";\\n                              path =\\n                              [{ Types.data = (Types.TypeNs \\\"implementation\\\");\\n                                 disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"openssl3_impl\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"Provider\\\");\\n                                  disambiguator = 0 }\\n                                ]\\n                              };\\n                            generic_args =\\n                            [(Types.Lifetime { Types.kind = Types.ReErased })\\n                              ];\\n                            trait_refs = []}\\n                          }\\n                        }};\\n                    hir_id = None;\\n                    span =\\n                    { Types.filename =\\n                      (Types.Real\\n                         (Types.LocalPath\\n                            \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n                      hi = { Types.col = \\\"72\\\"; line = \\\"185\\\" };\\n                      lo = { Types.col = \\\"58\\\"; line = \\\"185\\\" } };\\n                    ty =\\n                    { Types.kind =\\n                      Types.Adt {\\n                        def_id =\\n                        { Types.index = (0, 625); is_local = true;\\n                          krate = \\\"sandwich\\\";\\n                          path =\\n                          [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                             disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                              disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"Pimpl\\\");\\n                              disambiguator = 0 }\\n                            ]\\n                          };\\n                        generic_args =\\n                        [(Types.Lifetime { Types.kind = Types.ReErased });\\n                          (Types.Type\\n                             { Types.kind =\\n                               Types.Adt {\\n                                 def_id =\\n                                 { Types.index = (27, 20845);\\n                                   is_local = false; krate = \\\"openssl3\\\";\\n                                   path =\\n                                   [{ Types.data =\\n                                      (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                      disambiguator = 0 }\\n                                     ]\\n                                   };\\n                                 generic_args = []; trait_refs = []}\\n                               })\\n                          ];\\n                        trait_refs =\\n                        [{ Types.args = [];\\n                           impl =\\n                           Types.Builtin {\\n                             trait =\\n                             { Types.bound_vars = [];\\n                               value =\\n                               { Types.def_id =\\n                                 { Types.index = (2, 26764);\\n                                   is_local = false; krate = \\\"core\\\";\\n                                   path =\\n                                   [{ Types.data = (Types.TypeNs \\\"marker\\\");\\n                                      disambiguator = 0 };\\n                                     { Types.data = (Types.TypeNs \\\"Sized\\\");\\n                                       disambiguator = 0 }\\n                                     ]\\n                                   };\\n                                 generic_args =\\n                                 [(Types.Type\\n                                     { Types.kind =\\n                                       Types.Adt {\\n                                         def_id =\\n                                         { Types.index = (27, 20845);\\n                                           is_local = false;\\n                                           krate = \\\"openssl3\\\";\\n                                           path =\\n                                           [{ Types.data =\\n                                              (Types.TypeNs\\n                                                 \\\"ossl_provider_st\\\");\\n                                              disambiguator = 0 }\\n                                             ]\\n                                           };\\n                                         generic_args = []; trait_refs = []}\\n                                       })\\n                                   ]\\n                                 }\\n                               }};\\n                           trait =\\n                           { Types.bound_vars = [];\\n                             value =\\n                             { Types.def_id =\\n                               { Types.index = (2, 26764); is_local = false;\\n                                 krate = \\\"core\\\";\\n                                 path =\\n                                 [{ Types.data = (Types.TypeNs \\\"marker\\\");\\n                                    disambiguator = 0 };\\n                                   { Types.data = (Types.TypeNs \\\"Sized\\\");\\n                                     disambiguator = 0 }\\n                                   ]\\n                                 };\\n                               generic_args =\\n                               [(Types.Type\\n                                   { Types.kind =\\n                                     Types.Adt {\\n                                       def_id =\\n                                       { Types.index = (27, 20845);\\n                                         is_local = false;\\n                                         krate = \\\"openssl3\\\";\\n                                         path =\\n                                         [{ Types.data =\\n                                            (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                            disambiguator = 0 }\\n                                           ]\\n                                         };\\n                                       generic_args = []; trait_refs = []}\\n                                     })\\n                                 ]\\n                               }\\n                             }\\n                           }\\n                          ]}\\n                      }\\n                    };\\n                  borrow_kind = Types.Shared};\\n                hir_id = (Some (\\\"540\\\", \\\"341\\\"));\\n                span =\\n                { Types.filename =\\n                  (Types.Real\\n                     (Types.LocalPath\\n                        \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n                  hi = { Types.col = \\\"72\\\"; line = \\\"185\\\" };\\n                  lo = { Types.col = \\\"58\\\"; line = \\\"185\\\" } };\\n                ty =\\n                { Types.kind =\\n                  (Types.Ref\\n                     ({ Types.kind = Types.ReErased },\\n                      { Types.kind =\\n                        Types.Adt {\\n                          def_id =\\n                          { Types.index = (0, 625); is_local = true;\\n                            krate = \\\"sandwich\\\";\\n                            path =\\n                            [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                               disambiguator = 0 };\\n                              { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                                disambiguator = 0 };\\n                              { Types.data = (Types.TypeNs \\\"Pimpl\\\");\\n                                disambiguator = 0 }\\n                              ]\\n                            };\\n                          generic_args =\\n                          [(Types.Lifetime { Types.kind = Types.ReErased });\\n                            (Types.Type\\n                               { Types.kind =\\n                                 Types.Adt {\\n                                   def_id =\\n                                   { Types.index = (27, 20845);\\n                                     is_local = false; krate = \\\"openssl3\\\";\\n                                     path =\\n                                     [{ Types.data =\\n                                        (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                        disambiguator = 0 }\\n                                       ]\\n                                     };\\n                                   generic_args = []; trait_refs = []}\\n                                 })\\n                            ];\\n                          trait_refs =\\n                          [{ Types.args = [];\\n                             impl =\\n                             Types.Builtin {\\n                               trait =\\n                               { Types.bound_vars = [];\\n                                 value =\\n                                 { Types.def_id =\\n                                   { Types.index = (2, 26764);\\n                                     is_local = false; krate = \\\"core\\\";\\n                                     path =\\n                                     [{ Types.data = (Types.TypeNs \\\"marker\\\");\\n                                        disambiguator = 0 };\\n                                       { Types.data = (Types.TypeNs \\\"Sized\\\");\\n                                         disambiguator = 0 }\\n                                       ]\\n                                     };\\n                                   generic_args =\\n                                   [(Types.Type\\n                                       { Types.kind =\\n                                         Types.Adt {\\n                                           def_id =\\n                                           { Types.index = (27, 20845);\\n                                             is_local = false;\\n                                             krate = \\\"openssl3\\\";\\n                                             path =\\n                                             [{ Types.data =\\n                                                (Types.TypeNs\\n                                                   \\\"ossl_provider_st\\\");\\n                                                disambiguator = 0 }\\n                                               ]\\n                                             };\\n                                           generic_args = []; trait_refs = []}\\n                                         })\\n                                     ]\\n                                   }\\n                                 }};\\n                             trait =\\n                             { Types.bound_vars = [];\\n                               value =\\n                               { Types.def_id =\\n                                 { Types.index = (2, 26764);\\n                                   is_local = false; krate = \\\"core\\\";\\n                                   path =\\n                                   [{ Types.data = (Types.TypeNs \\\"marker\\\");\\n                                      disambiguator = 0 };\\n                                     { Types.data = (Types.TypeNs \\\"Sized\\\");\\n                                       disambiguator = 0 }\\n                                     ]\\n                                   };\\n                                 generic_args =\\n                                 [(Types.Type\\n                                     { Types.kind =\\n                                       Types.Adt {\\n                                         def_id =\\n                                         { Types.index = (27, 20845);\\n                                           is_local = false;\\n                                           krate = \\\"openssl3\\\";\\n                                           path =\\n                                           [{ Types.data =\\n                                              (Types.TypeNs\\n                                                 \\\"ossl_provider_st\\\");\\n                                              disambiguator = 0 }\\n                                             ]\\n                                           };\\n                                         generic_args = []; trait_refs = []}\\n                                       })\\n                                   ]\\n                                 }\\n                               }\\n                             }\\n                            ]}\\n                        },\\n                      false))\\n                  }\\n                }\\n               ];\\n             bounds_impls = [];\\n             fn_span =\\n             { Types.filename =\\n               (Types.Real\\n                  (Types.LocalPath \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n               hi = { Types.col = \\\"85\\\"; line = \\\"185\\\" };\\n               lo = { Types.col = \\\"73\\\"; line = \\\"185\\\" } };\\n             from_hir_call = true;\\n             fun' =\\n             { Types.attributes = [];\\n               contents =\\n               Types.GlobalName {\\n                 id =\\n                 { Types.index = (0, 641); is_local = true;\\n                   krate = \\\"sandwich\\\";\\n                   path =\\n                   [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                      disambiguator = 0 };\\n                     { Types.data = (Types.TypeNs \\\"pimpl\\\"); disambiguator = 0\\n                       };\\n                     { Types.data = Types.Impl; disambiguator = 2 };\\n                     { Types.data = (Types.ValueNs \\\"as_nonnull\\\");\\n                       disambiguator = 0 }\\n                     ]\\n                   }};\\n               hir_id = None;\\n               span =\\n               { Types.filename =\\n                 (Types.Real\\n                    (Types.LocalPath\\n                       \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n                 hi = { Types.col = \\\"83\\\"; line = \\\"185\\\" };\\n                 lo = { Types.col = \\\"73\\\"; line = \\\"185\\\" } };\\n               ty =\\n               { Types.kind =\\n                 (Types.Arrow\\n                    { Types.bound_vars =\\n                      [(Types.Region\\n                          (Types.BrNamed\\n                             ({ Types.index = (0, 1672); is_local = true;\\n                                krate = \\\"sandwich\\\";\\n                                path =\\n                                [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                                   disambiguator = 0 };\\n                                  { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                                    disambiguator = 0 };\\n                                  { Types.data = Types.Impl;\\n                                    disambiguator = 2 };\\n                                  { Types.data = (Types.ValueNs \\\"as_nonnull\\\");\\n                                    disambiguator = 0 };\\n                                  { Types.data = (Types.LifetimeNs \\\"'_\\\");\\n                                    disambiguator = 0 }\\n                                  ]\\n                                },\\n                              \\\"'_\\\")))\\n                        ];\\n                      value =\\n                      { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                        c_variadic = false;\\n                        inputs =\\n                        [{ Types.kind =\\n                           (Types.Ref\\n                              ({ Types.kind =\\n                                 (Types.ReBound\\n                                    (\\\"0\\\",\\n                                     { Types.kind =\\n                                       (Types.BrNamed\\n                                          ({ Types.index = (0, 1672);\\n                                             is_local = true;\\n                                             krate = \\\"sandwich\\\";\\n                                             path =\\n                                             [{ Types.data =\\n                                                (Types.TypeNs \\\"support\\\");\\n                                                disambiguator = 0 };\\n                                               { Types.data =\\n                                                 (Types.TypeNs \\\"pimpl\\\");\\n                                                 disambiguator = 0 };\\n                                               { Types.data = Types.Impl;\\n                                                 disambiguator = 2 };\\n                                               { Types.data =\\n                                                 (Types.ValueNs \\\"as_nonnull\\\");\\n                                                 disambiguator = 0 };\\n                                               { Types.data =\\n                                                 (Types.LifetimeNs \\\"'_\\\");\\n                                                 disambiguator = 0 }\\n                                               ]\\n                                             },\\n                                           \\\"'_\\\"));\\n                                       var = \\\"0\\\" }))\\n                                 },\\n                               { Types.kind =\\n                                 Types.Adt {\\n                                   def_id =\\n                                   { Types.index = (0, 625); is_local = true;\\n                                     krate = \\\"sandwich\\\";\\n                                     path =\\n                                     [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                                        disambiguator = 0 };\\n                                       { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                                         disambiguator = 0 };\\n                                       { Types.data = (Types.TypeNs \\\"Pimpl\\\");\\n                                         disambiguator = 0 }\\n                                       ]\\n                                     };\\n                                   generic_args =\\n                                   [(Types.Lifetime\\n                                       { Types.kind = Types.ReErased });\\n                                     (Types.Type\\n                                        { Types.kind =\\n                                          Types.Adt {\\n                                            def_id =\\n                                            { Types.index = (27, 20845);\\n                                              is_local = false;\\n                                              krate = \\\"openssl3\\\";\\n                                              path =\\n                                              [{ Types.data =\\n                                                 (Types.TypeNs\\n                                                    \\\"ossl_provider_st\\\");\\n                                                 disambiguator = 0 }\\n                                                ]\\n                                              };\\n                                            generic_args = [];\\n                                            trait_refs = []}\\n                                          })\\n                                     ];\\n                                   trait_refs =\\n                                   [{ Types.args = [];\\n                                      impl =\\n                                      Types.Builtin {\\n                                        trait =\\n                                        { Types.bound_vars = [];\\n                                          value =\\n                                          { Types.def_id =\\n                                            { Types.index = (2, 26764);\\n                                              is_local = false;\\n                                              krate = \\\"core\\\";\\n                                              path =\\n                                              [{ Types.data =\\n                                                 (Types.TypeNs \\\"marker\\\");\\n                                                 disambiguator = 0 };\\n                                                { Types.data =\\n                                                  (Types.TypeNs \\\"Sized\\\");\\n                                                  disambiguator = 0 }\\n                                                ]\\n                                              };\\n                                            generic_args =\\n                                            [(Types.Type\\n                                                { Types.kind =\\n                                                  Types.Adt {\\n                                                    def_id =\\n                                                    { Types.index =\\n                                                      (27, 20845);\\n                                                      is_local = false;\\n                                                      krate = \\\"openssl3\\\";\\n                                                      path =\\n                                                      [{ Types.data =\\n                                                         (Types.TypeNs\\n                                                            \\\"ossl_provider_st\\\");\\n                                                         disambiguator = 0 }\\n                                                        ]\\n                                                      };\\n                                                    generic_args = [];\\n                                                    trait_refs = []}\\n                                                  })\\n                                              ]\\n                                            }\\n                                          }};\\n                                      trait =\\n                                      { Types.bound_vars = [];\\n                                        value =\\n                                        { Types.def_id =\\n                                          { Types.index = (2, 26764);\\n                                            is_local = false; krate = \\\"core\\\";\\n                                            path =\\n                                            [{ Types.data =\\n                                               (Types.TypeNs \\\"marker\\\");\\n                                               disambiguator = 0 };\\n                                              { Types.data =\\n                                                (Types.TypeNs \\\"Sized\\\");\\n                                                disambiguator = 0 }\\n                                              ]\\n                                            };\\n                                          generic_args =\\n                                          [(Types.Type\\n                                              { Types.kind =\\n                                                Types.Adt {\\n                                                  def_id =\\n                                                  { Types.index = (27, 20845);\\n                                                    is_local = false;\\n                                                    krate = \\\"openssl3\\\";\\n                                                    path =\\n                                                    [{ Types.data =\\n                                                       (Types.TypeNs\\n                                                          \\\"ossl_provider_st\\\");\\n                                                       disambiguator = 0 }\\n                                                      ]\\n                                                    };\\n                                                  generic_args = [];\\n                                                  trait_refs = []}\\n                                                })\\n                                            ]\\n                                          }\\n                                        }\\n                                      }\\n                                     ]}\\n                                 },\\n                               false))\\n                           }\\n                          ];\\n                        output =\\n                        { Types.kind =\\n                          Types.Adt {\\n                            def_id =\\n                            { Types.index = (2, 2358); is_local = false;\\n                              krate = \\\"core\\\";\\n                              path =\\n                              [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                 disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                                  disambiguator = 0 }\\n                                ]\\n                              };\\n                            generic_args =\\n                            [(Types.Type\\n                                { Types.kind =\\n                                  Types.Adt {\\n                                    def_id =\\n                                    { Types.index = (27, 20845);\\n                                      is_local = false; krate = \\\"openssl3\\\";\\n                                      path =\\n                                      [{ Types.data =\\n                                         (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                         disambiguator = 0 }\\n                                        ]\\n                                      };\\n                                    generic_args = []; trait_refs = []}\\n                                  })\\n                              ];\\n                            trait_refs = []}\\n                          };\\n                        safety = Types.Safe }\\n                      })\\n                 }\\n               };\\n             generic_args =\\n             [(Types.Lifetime { Types.kind = Types.ReErased });\\n               (Types.Type\\n                  { Types.kind =\\n                    Types.Adt {\\n                      def_id =\\n                      { Types.index = (27, 20845); is_local = false;\\n                        krate = \\\"openssl3\\\";\\n                        path =\\n                        [{ Types.data = (Types.TypeNs \\\"ossl_provider_st\\\");\\n                           disambiguator = 0 }\\n                          ]\\n                        };\\n                      generic_args = []; trait_refs = []}\\n                    })\\n               ];\\n             trait = None;\\n             ty =\\n             { Types.kind =\\n               (Types.Arrow\\n                  { Types.bound_vars =\\n                    [(Types.Region\\n                        (Types.BrNamed\\n                           ({ Types.index = (0, 1672); is_local = true;\\n                              krate = \\\"sandwich\\\";\\n                              path =\\n                              [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                                 disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = Types.Impl; disambiguator = 2\\n                                  };\\n                                { Types.data = (Types.ValueNs \\\"as_nonnull\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = (Types.LifetimeNs \\\"'_\\\");\\n                                  disambiguator = 0 }\\n                                ]\\n                              },\\n                            \\\"'_\\\")))\\n                      ];\\n                    value =\\n                    { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                      c_variadic = false;\\n                      inputs =\\n                      [{ Types.kind =\\n                         (Types.Ref\\n                            ({ Types.kind =\\n                               (Types.ReBound\\n                                  (\\\"0\\\",\\n                                   { Types.kind =\\n                                     (Types.BrNamed\\n                                        ({ Types.index = (0, 1672);\\n                                           is_local = true;\\n                                           krate = \\\"sandwich\\\";\\n                                           path =\\n                                           [{ Types.data =\\n                                              (Types.TypeNs \\\"support\\\");\\n                                              disambiguator = 0 };\\n                                             { Types.data =\\n                                               (Types.TypeNs \\\"pimpl\\\");\\n                                               disambiguator = 0 };\\n                                             { Types.data = Types.Impl;\\n                                               disambiguator = 2 };\\n                                             { Types.data =\\n                                               (Types.ValueNs \\\"as_nonnull\\\");\\n                                               disambiguator = 0 };\\n                                             { Types.data =\\n                                               (Types.LifetimeNs \\\"'_\\\");\\n                                               disambiguator = 0 }\\n                                             ]\\n                                           },\\n                                         \\\"'_\\\"));\\n                                     var = \\\"0\\\" }))\\n                               },\\n                             { Types.kind =\\n                               Types.Adt {\\n                                 def_id =\\n                                 { Types.index = (0, 625); is_local = true;\\n                                   krate = \\\"sandwich\\\";\\n                                   path =\\n                                   [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                                      disambiguator = 0 };\\n                                     { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                                       disambiguator = 0 };\\n                                     { Types.data = (Types.TypeNs \\\"Pimpl\\\");\\n                                       disambiguator = 0 }\\n                                     ]\\n                                   };\\n                                 generic_args =\\n                                 [(Types.Lifetime\\n                                     { Types.kind = Types.ReErased });\\n                                   (Types.Type\\n                                      { Types.kind =\\n                                        Types.Adt {\\n                                          def_id =\\n                                          { Types.index = (27, 20845);\\n                                            is_local = false;\\n                                            krate = \\\"openssl3\\\";\\n                                            path =\\n                                            [{ Types.data =\\n                                               (Types.TypeNs\\n                                                  \\\"ossl_provider_st\\\");\\n                                               disambiguator = 0 }\\n                                              ]\\n                                            };\\n                                          generic_args = []; trait_refs = []}\\n                                        })\\n                                   ];\\n                                 trait_refs =\\n                                 [{ Types.args = [];\\n                                    impl =\\n                                    Types.Builtin {\\n                                      trait =\\n                                      { Types.bound_vars = [];\\n                                        value =\\n                                        { Types.def_id =\\n                                          { Types.index = (2, 26764);\\n                                            is_local = false; krate = \\\"core\\\";\\n                                            path =\\n                                            [{ Types.data =\\n                                               (Types.TypeNs \\\"marker\\\");\\n                                               disambiguator = 0 };\\n                                              { Types.data =\\n                                                (Types.TypeNs \\\"Sized\\\");\\n                                                disambiguator = 0 }\\n                                              ]\\n                                            };\\n                                          generic_args =\\n                                          [(Types.Type\\n                                              { Types.kind =\\n                                                Types.Adt {\\n                                                  def_id =\\n                                                  { Types.index = (27, 20845);\\n                                                    is_local = false;\\n                                                    krate = \\\"openssl3\\\";\\n                                                    path =\\n                                                    [{ Types.data =\\n                                                       (Types.TypeNs\\n                                                          \\\"ossl_provider_st\\\");\\n                                                       disambiguator = 0 }\\n                                                      ]\\n                                                    };\\n                                                  generic_args = [];\\n                                                  trait_refs = []}\\n                                                })\\n                                            ]\\n                                          }\\n                                        }};\\n                                    trait =\\n                                    { Types.bound_vars = [];\\n                                      value =\\n                                      { Types.def_id =\\n                                        { Types.index = (2, 26764);\\n                                          is_local = false; krate = \\\"core\\\";\\n                                          path =\\n                                          [{ Types.data =\\n                                             (Types.TypeNs \\\"marker\\\");\\n                                             disambiguator = 0 };\\n                                            { Types.data =\\n                                              (Types.TypeNs \\\"Sized\\\");\\n                                              disambiguator = 0 }\\n                                            ]\\n                                          };\\n                                        generic_args =\\n                                        [(Types.Type\\n                                            { Types.kind =\\n                                              Types.Adt {\\n                                                def_id =\\n                                                { Types.index = (27, 20845);\\n                                                  is_local = false;\\n                                                  krate = \\\"openssl3\\\";\\n                                                  path =\\n                                                  [{ Types.data =\\n                                                     (Types.TypeNs\\n                                                        \\\"ossl_provider_st\\\");\\n                                                     disambiguator = 0 }\\n                                                    ]\\n                                                  };\\n                                                generic_args = [];\\n                                                trait_refs = []}\\n                                              })\\n                                          ]\\n                                        }\\n                                      }\\n                                    }\\n                                   ]}\\n                               },\\n                             false))\\n                         }\\n                        ];\\n                      output =\\n                      { Types.kind =\\n                        Types.Adt {\\n                          def_id =\\n                          { Types.index = (2, 2358); is_local = false;\\n                            krate = \\\"core\\\";\\n                            path =\\n                            [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                               disambiguator = 0 };\\n                              { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                                disambiguator = 0 };\\n                              { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                                disambiguator = 0 }\\n                              ]\\n                            };\\n                          generic_args =\\n                          [(Types.Type\\n                              { Types.kind =\\n                                Types.Adt {\\n                                  def_id =\\n                                  { Types.index = (27, 20845);\\n                                    is_local = false; krate = \\\"openssl3\\\";\\n                                    path =\\n                                    [{ Types.data =\\n                                       (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                       disambiguator = 0 }\\n                                      ]\\n                                    };\\n                                  generic_args = []; trait_refs = []}\\n                                })\\n                            ];\\n                          trait_refs = []}\\n                        };\\n                      safety = Types.Safe }\\n                    })\\n               }};\\n           hir_id = (Some (\\\"540\\\", \\\"339\\\"));\\n           span =\\n           { Types.filename =\\n             (Types.Real\\n                (Types.LocalPath \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n             hi = { Types.col = \\\"85\\\"; line = \\\"185\\\" };\\n             lo = { Types.col = \\\"58\\\"; line = \\\"185\\\" } };\\n           ty =\\n           { Types.kind =\\n             Types.Adt {\\n               def_id =\\n               { Types.index = (2, 2358); is_local = false; krate = \\\"core\\\";\\n                 path =\\n                 [{ Types.data = (Types.TypeNs \\\"ptr\\\"); disambiguator = 0 };\\n                   { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                     disambiguator = 0 };\\n                   { Types.data = (Types.TypeNs \\\"NonNull\\\"); disambiguator = 0\\n                     }\\n                   ]\\n                 };\\n               generic_args =\\n               [(Types.Type\\n                   { Types.kind =\\n                     Types.Adt {\\n                       def_id =\\n                       { Types.index = (27, 20845); is_local = false;\\n                         krate = \\\"openssl3\\\";\\n                         path =\\n                         [{ Types.data = (Types.TypeNs \\\"ossl_provider_st\\\");\\n                            disambiguator = 0 }\\n                           ]\\n                         };\\n                       generic_args = []; trait_refs = []}\\n                     })\\n                 ];\\n               trait_refs = []}\\n             }\\n           }\\n          ];\\n        bounds_impls = [];\\n        fn_span =\\n        { Types.filename =\\n          (Types.Real\\n             (Types.LocalPath \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n          hi = { Types.col = \\\"94\\\"; line = \\\"185\\\" };\\n          lo = { Types.col = \\\"86\\\"; line = \\\"185\\\" } };\\n        from_hir_call = true;\\n        fun' =\\n        { Types.attributes = [];\\n          contents =\\n          Types.GlobalName {\\n            id =\\n            { Types.index = (2, 2381); is_local = false; krate = \\\"core\\\";\\n              path =\\n              [{ Types.data = (Types.TypeNs \\\"ptr\\\"); disambiguator = 0 };\\n                { Types.data = (Types.TypeNs \\\"non_null\\\"); disambiguator = 0 };\\n                { Types.data = Types.Impl; disambiguator = 3 };\\n                { Types.data = (Types.ValueNs \\\"as_ptr\\\"); disambiguator = 0 }]\\n              }};\\n          hir_id = None;\\n          span =\\n          { Types.filename =\\n            (Types.Real\\n               (Types.LocalPath \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n            hi = { Types.col = \\\"92\\\"; line = \\\"185\\\" };\\n            lo = { Types.col = \\\"86\\\"; line = \\\"185\\\" } };\\n          ty =\\n          { Types.kind =\\n            (Types.Arrow\\n               { Types.bound_vars = [];\\n                 value =\\n                 { Types.abi = Types.Abi {todo = \\\"Rust\\\"}; c_variadic = false;\\n                   inputs =\\n                   [{ Types.kind =\\n                      Types.Adt {\\n                        def_id =\\n                        { Types.index = (2, 2358); is_local = false;\\n                          krate = \\\"core\\\";\\n                          path =\\n                          [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                             disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                              disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                              disambiguator = 0 }\\n                            ]\\n                          };\\n                        generic_args =\\n                        [(Types.Type\\n                            { Types.kind =\\n                              Types.Adt {\\n                                def_id =\\n                                { Types.index = (27, 20845);\\n                                  is_local = false; krate = \\\"openssl3\\\";\\n                                  path =\\n                                  [{ Types.data =\\n                                     (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                     disambiguator = 0 }\\n                                    ]\\n                                  };\\n                                generic_args = []; trait_refs = []}\\n                              })\\n                          ];\\n                        trait_refs = []}\\n                      }\\n                     ];\\n                   output =\\n                   { Types.kind =\\n                     (Types.RawPtr\\n                        ({ Types.kind =\\n                           Types.Adt {\\n                             def_id =\\n                             { Types.index = (27, 20845); is_local = false;\\n                               krate = \\\"openssl3\\\";\\n                               path =\\n                               [{ Types.data =\\n                                  (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                  disambiguator = 0 }\\n                                 ]\\n                               };\\n                             generic_args = []; trait_refs = []}\\n                           },\\n                         true))\\n                     };\\n                   safety = Types.Safe }\\n                 })\\n            }\\n          };\\n        generic_args =\\n        [(Types.Type\\n            { Types.kind =\\n              Types.Adt {\\n                def_id =\\n                { Types.index = (27, 20845); is_local = false;\\n                  krate = \\\"openssl3\\\";\\n                  path =\\n                  [{ Types.data = (Types.TypeNs \\\"ossl_provider_st\\\");\\n                     disambiguator = 0 }\\n                    ]\\n                  };\\n                generic_args = []; trait_refs = []}\\n              })\\n          ];\\n        trait = None;\\n        ty =\\n        { Types.kind =\\n          (Types.Arrow\\n             { Types.bound_vars = [];\\n               value =\\n               { Types.abi = Types.Abi {todo = \\\"Rust\\\"}; c_variadic = false;\\n                 inputs =\\n                 [{ Types.kind =\\n                    Types.Adt {\\n                      def_id =\\n                      { Types.index = (2, 2358); is_local = false;\\n                        krate = \\\"core\\\";\\n                        path =\\n                        [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                           disambiguator = 0 };\\n                          { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                            disambiguator = 0 };\\n                          { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                            disambiguator = 0 }\\n                          ]\\n                        };\\n                      generic_args =\\n                      [(Types.Type\\n                          { Types.kind =\\n                            Types.Adt {\\n                              def_id =\\n                              { Types.index = (27, 20845); is_local = false;\\n                                krate = \\\"openssl3\\\";\\n                                path =\\n                                [{ Types.data =\\n                                   (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                   disambiguator = 0 }\\n                                  ]\\n                                };\\n                              generic_args = []; trait_refs = []}\\n                            })\\n                        ];\\n                      trait_refs = []}\\n                    }\\n                   ];\\n                 output =\\n                 { Types.kind =\\n                   (Types.RawPtr\\n                      ({ Types.kind =\\n                         Types.Adt {\\n                           def_id =\\n                           { Types.index = (27, 20845); is_local = false;\\n                             krate = \\\"openssl3\\\";\\n                             path =\\n                             [{ Types.data =\\n                                (Types.TypeNs \\\"ossl_provider_st\\\");\\n                                disambiguator = 0 }\\n                               ]\\n                             };\\n                           generic_args = []; trait_refs = []}\\n                         },\\n                       true))\\n                   };\\n                 safety = Types.Safe }\\n               })\\n          }};\\n      hir_id = None;\\n      span =\\n      { Types.filename =\\n        (Types.Real\\n           (Types.LocalPath \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n        hi = { Types.col = \\\"94\\\"; line = \\\"185\\\" };\\n        lo = { Types.col = \\\"58\\\"; line = \\\"185\\\" } };\\n      ty =\\n      { Types.kind =\\n        (Types.RawPtr\\n           ({ Types.kind =\\n              Types.Adt {\\n                def_id =\\n                { Types.index = (27, 20845); is_local = false;\\n                  krate = \\\"openssl3\\\";\\n                  path =\\n                  [{ Types.data = (Types.TypeNs \\\"ossl_provider_st\\\");\\n                     disambiguator = 0 }\\n                    ]\\n                  };\\n                generic_args = []; trait_refs = []}\\n              },\\n            true))\\n        }\\n      }};\\n  hir_id = (Some (\\\"540\\\", \\\"337\\\"));\\n  span =\\n  { Types.filename =\\n    (Types.Real (Types.LocalPath \\\"rust/implementation/openssl3_impl/mod.rs\\\"));\\n    hi = { Types.col = \\\"94\\\"; line = \\\"185\\\" };\\n    lo = { Types.col = \\\"58\\\"; line = \\\"185\\\" } };\\n  ty =\\n  { Types.kind =\\n    (Types.RawPtr\\n       ({ Types.kind =\\n          Types.Adt {\\n            def_id =\\n            { Types.index = (27, 20845); is_local = false;\\n              krate = \\\"openssl3\\\";\\n              path =\\n              [{ Types.data = (Types.TypeNs \\\"ossl_provider_st\\\");\\n                 disambiguator = 0 }\\n                ]\\n              };\\n            generic_args = []; trait_refs = []}\\n          },\\n        false))\\n    }\\n  }\",\n                                    ),\n                                )\n                            },\n                            1,\n                        ) {\n                            rust_primitives::hax::never_to_any({\n                                (return core::result::Result_Err(\n                                    core::convert::f_into(\n                                        Tuple2(\n                                            sandwich_proto::errors::SystemError_SYSTEMERROR_MEMORY(),\n                                            \"provider's self-test failed\",\n                                        ),\n                                    ),\n                                ))\n                            })\n                        })\n                    }\n                }\n            }\n        }\n    }"

              in
              Core.Result.Result_Ok
              ({
                  f_lib_ctx = libctx;
                  f__default_provider = default_provider;
                  f__oqs_provider = oqs_provider
                }
                <:
                t_LibCtx)
              <:
              Core.Result.t_Result t_LibCtx Sandwich.Error.t_Error
            | Core.Result.Result_Err err ->
              Core.Result.Result_Err err <: Core.Result.t_Result t_LibCtx Sandwich.Error.t_Error)
      | Core.Result.Result_Err err ->
        Core.Result.Result_Err err <: Core.Result.t_Result t_LibCtx Sandwich.Error.t_Error)
  | Core.Result.Result_Err err ->
    Core.Result.Result_Err (Core.Convert.f_from #FStar.Tactics.Typeclasses.solve err)
    <:
    Core.Result.t_Result t_LibCtx Sandwich.Error.t_Error
