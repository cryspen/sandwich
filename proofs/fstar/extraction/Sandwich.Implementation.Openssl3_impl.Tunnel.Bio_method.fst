module Sandwich.Implementation.Openssl3_impl.Tunnel.Bio_method
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let _ =
  (* This module has implicit dependencies, here we make them explicit. *)
  (* The implicit dependencies arise from typeclasses instances. *)
  let open Sandwich_proto.Tunnel in
  ()

(* item error backend: (reject_RawOrMutPointer) ExplicitRejection { reason: "a node of kind [Raw_pointer] have been found in the AST" }
Last available AST for this item:

/// BIO create callback (never used).
#[cfg(feature = "tunnel")]
#[cfg(feature = "openssl3")]
#[deny(bare_trait_objects)]
#[feature(register_tool)]
#[register_tool(_hax)]
fn bio_create(_bio: raw_pointer!()) -> int {
    { 1 }
}


Last AST:
/** print_rust: pitem: not implemented  (item: { Concrete_ident.T.def_id =
  { Concrete_ident.Imported.krate = "sandwich";
    path =
    [{ Concrete_ident.Imported.data =
       (Concrete_ident.Imported.TypeNs "implementation"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "openssl3_impl"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "tunnel"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "bio_method"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.ValueNs "bio_create"); disambiguator = 0 }
      ]
    };
  kind = Concrete_ident.Kind.Value }) */
const _: () = ();
 *)

(* item error backend: (reject_RawOrMutPointer) ExplicitRejection { reason: "a node of kind [Raw_pointer] have been found in the AST" }
Last available AST for this item:

/// BIO destroy callback (never used).
#[cfg(feature = "tunnel")]
#[cfg(feature = "openssl3")]
#[deny(bare_trait_objects)]
#[feature(register_tool)]
#[register_tool(_hax)]
fn bio_destroy(_bio: raw_pointer!()) -> int {
    { 1 }
}


Last AST:
/** print_rust: pitem: not implemented  (item: { Concrete_ident.T.def_id =
  { Concrete_ident.Imported.krate = "sandwich";
    path =
    [{ Concrete_ident.Imported.data =
       (Concrete_ident.Imported.TypeNs "implementation"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "openssl3_impl"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "tunnel"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "bio_method"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.ValueNs "bio_destroy"); disambiguator = 0 }
      ]
    };
  kind = Concrete_ident.Kind.Value }) */
const _: () = ();
 *)

let bio_reflect_io_error
      (#impl_1033358885_ #impl_1033358885_ #impl_765196419_: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()]
          i3:
          Core.Ops.Function.t_FnOnce impl_1033358885_ Prims.unit)
      (#[FStar.Tactics.Typeclasses.tcresolve ()]
          i4:
          Core.Ops.Function.t_FnOnce impl_720525265_ Prims.unit)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i5: Core.Convert.t_Into impl_765196419_ i32)
      (error: Sandwich_proto.Io.t_IOError)
      (on_retry: impl_1033358885_)
      (on_close: impl_720525265_)
      (default_return_value: impl_765196419_)
     =
  match error with
  | Sandwich_proto.Io.IOError_IOERROR_IN_PROGRESS
  | Sandwich_proto.Io.IOError_IOERROR_WOULD_BLOCK  ->
    Core.Ops.Function.f_call_once #impl_1033358885_
      #Prims.unit
      #FStar.Tactics.Typeclasses.solve
      on_retry
      (() <: Prims.unit)
  | Sandwich_proto.Io.IOError_IOERROR_CLOSED
  | Sandwich_proto.Io.IOError_IOERROR_REFUSED  ->
    Core.Ops.Function.f_call_once #impl_720525265_
      #Prims.unit
      #FStar.Tactics.Typeclasses.solve
      on_close
      (() <: Prims.unit)
  | _ ->
    Core.Convert.f_into #impl_765196419_ #i32 #FStar.Tactics.Typeclasses.solve default_return_value

let impl__Bio__clear_flags
      (#impl_765196419_: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i1: Core.Convert.t_Into impl_765196419_ i32)
      (self: t_Bio)
      (flags: impl_765196419_)
     =
  let _:Prims.unit =
    Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
      "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 223); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3_impl\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"bio_method\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Bio\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 231);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3_impl\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"bio_method\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 1 };\n                                        { Types.data =\n                                          (Types.ValueNs \"clear_flags\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                                hi = { Types.col = \"47\"; line = \"62\" };\n                                lo = { Types.col = \"43\"; line = \"62\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 221);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3_impl\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"bio_method\");\n                                          disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Bio\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"231\", \"13\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                            hi = { Types.col = \"47\"; line = \"62\" };\n                            lo = { Types.col = \"43\"; line = \"62\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 221); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3_impl\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"bio_method\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"Bio\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"231\", \"12\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                        hi = { Types.col = \"49\"; line = \"62\" };\n                        lo = { Types.col = \"43\"; line = \"62\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 20890);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"bio_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                     hi = { Types.col = \"58\"; line = \"62\" };\n                     lo = { Types.col = \"50\"; line = \"62\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                       hi = { Types.col = \"56\"; line = \"62\" };\n                       lo = { Types.col = \"50\"; line = \"62\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 20890);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"bio_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 20890);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"bio_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 20890); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"bio_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 20890);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"bio_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 20890);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"bio_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"231\", \"10\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                   hi = { Types.col = \"58\"; line = \"62\" };\n                   lo = { Types.col = \"43\"; line = \"62\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 20890); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"bio_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {\n                    args =\n                    [{ Types.attributes = [];\n                       contents =\n                       Types.VarRef {\n                         id =\n                         { Types.id =\n                           { Types.local_id = \"4\";\n                             owner =\n                             { Types.index = (0, 231); krate = \"sandwich\";\n                               path =\n                               [{ Types.data =\n                                  (Types.TypeNs \"implementation\");\n                                  disambiguator = 0 };\n                                 { Types.data =\n                                   (Types.TypeNs \"openssl3_impl\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"tunnel\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"bio_method\");\n                                   disambiguator = 0 };\n                                 { Types.data = Types.Impl; disambiguator = 1\n                                   };\n                                 { Types.data = (Types.ValueNs \"clear_flags\");\n                                   disambiguator = 0 }\n                                 ]\n                               }\n                             };\n                           name = \"flags\" }};\n                       hir_id = (Some (\"231\", \"17\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                         hi = { Types.col = \"65\"; line = \"62\" };\n                         lo = { Types.col = \"60\"; line = \"62\" } };\n                       ty =\n                       (Types.Param\n                          { Types.index = 0; name = \"impl Into<c_int>\" })\n                       }\n                      ];\n                    bounds_impls = [];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                      hi = { Types.col = \"72\"; line = \"62\" };\n                      lo = { Types.col = \"66\"; line = \"62\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2997); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"convert\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Into\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"into\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                        hi = { Types.col = \"70\"; line = \"62\" };\n                        lo = { Types.col = \"66\"; line = \"62\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [(Types.Param\n                                 { Types.index = 0; name = \"impl Into<c_int>\"\n                                   })\n                               ];\n                             output = (Types.Int Types.I32);\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args = [];\n                    trait =\n                    (Some ({ Types.args = [];\n                             impl =\n                             Types.LocalBound {path = [];\n                               predicate_id = \"4044967801813580675\";\n                               trait =\n                               { Types.bound_vars = [];\n                                 value =\n                                 { Types.def_id =\n                                   { Types.index = (2, 2995); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"convert\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"Into\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type\n                                       (Types.Param\n                                          { Types.index = 0;\n                                            name = \"impl Into<c_int>\" }));\n                                     (Types.Type (Types.Int Types.I32))]\n                                   }\n                                 }};\n                             trait =\n                             { Types.def_id =\n                               { Types.index = (2, 2995); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"convert\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"Into\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   (Types.Param\n                                      { Types.index = 0;\n                                        name = \"impl Into<c_int>\" }));\n                                 (Types.Type (Types.Int Types.I32))]\n                               }\n                             },\n                           [(Types.Type\n                               (Types.Param\n                                  { Types.index = 0;\n                                    name = \"impl Into<c_int>\" }));\n                             (Types.Type (Types.Int Types.I32))]));\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [(Types.Param\n                               { Types.index = 0; name = \"impl Into<c_int>\" })\n                             ];\n                           output = (Types.Int Types.I32);\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"231\", \"15\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                    hi = { Types.col = \"72\"; line = \"62\" };\n                    lo = { Types.col = \"60\"; line = \"62\" } };\n                  ty = (Types.Int Types.I32) }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                hi = { Types.col = \"73\"; line = \"62\" };\n                lo = { Types.col = \"17\"; line = \"62\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 12264); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 502 };\n                      { Types.data = (Types.ValueNs \"BIO_clear_flags\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                  hi = { Types.col = \"42\"; line = \"62\" };\n                  lo = { Types.col = \"17\"; line = \"62\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 20890);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"bio_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.Int Types.I32)];\n                       output = (Types.Tuple []); safety = Types.Unsafe }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 20890); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"bio_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.Int Types.I32)];\n                     output = (Types.Tuple []); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"231\", \"6\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n              hi = { Types.col = \"73\"; line = \"62\" };\n              lo = { Types.col = \"17\"; line = \"62\" } };\n            ty = (Types.Tuple []) });\n    region_scope = { Types.data = Types.Node; id = \"19\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath\n            \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n      hi = { Types.col = \"75\"; line = \"62\" };\n      lo = { Types.col = \"8\"; line = \"62\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"231\", \"5\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath\n          \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n    hi = { Types.col = \"75\"; line = \"62\" };\n    lo = { Types.col = \"8\"; line = \"62\" } };\n  ty = (Types.Tuple []) }"

  in
  ()

let impl__Bio__clear_retry_flag (self: t_Bio) =
  let _:Prims.unit =
    impl__Bio__clear_flags #i32
      self
      (cast (Openssl3.v_BIO_FLAGS_RWS |. Openssl3.v_BIO_FLAGS_SHOULD_RETRY <: u32) <: i32)
  in
  ()

let impl__Bio__declare_closed (self: t_Bio) =
  let _:i64 =
    Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
      "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 223); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3_impl\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"bio_method\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Bio\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 230);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3_impl\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"bio_method\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 1 };\n                                        { Types.data =\n                                          (Types.ValueNs \"declare_closed\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                                hi = { Types.col = \"20\"; line = \"52\" };\n                                lo = { Types.col = \"16\"; line = \"52\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 221);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3_impl\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"bio_method\");\n                                          disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Bio\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"230\", \"11\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                            hi = { Types.col = \"20\"; line = \"52\" };\n                            lo = { Types.col = \"16\"; line = \"52\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 221); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3_impl\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"bio_method\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"Bio\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"230\", \"10\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                        hi = { Types.col = \"22\"; line = \"52\" };\n                        lo = { Types.col = \"16\"; line = \"52\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 20890);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"bio_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                     hi = { Types.col = \"31\"; line = \"52\" };\n                     lo = { Types.col = \"23\"; line = \"52\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                       hi = { Types.col = \"29\"; line = \"52\" };\n                       lo = { Types.col = \"23\"; line = \"52\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 20890);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"bio_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 20890);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"bio_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 20890); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"bio_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 20890);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"bio_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 20890);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"bio_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"230\", \"8\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                   hi = { Types.col = \"31\"; line = \"52\" };\n                   lo = { Types.col = \"16\"; line = \"52\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 20890); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"bio_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Cast {\n                    source =\n                    { Types.attributes = [];\n                      contents =\n                      Types.NamedConst {args = [];\n                        def_id =\n                        { Types.index = (27, 1353); krate = \"openssl3\";\n                          path =\n                          [{ Types.data =\n                             (Types.ValueNs \"BIO_CTRL_SET_CLOSE\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        impl = None; user_ty = None};\n                      hir_id = (Some (\"230\", \"14\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                        hi = { Types.col = \"44\"; line = \"53\" };\n                        lo = { Types.col = \"16\"; line = \"53\" } };\n                      ty = (Types.Uint Types.U32) }};\n                  hir_id = (Some (\"230\", \"13\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                    hi = { Types.col = \"53\"; line = \"53\" };\n                    lo = { Types.col = \"16\"; line = \"53\" } };\n                  ty = (Types.Int Types.I32) };\n                { Types.attributes = [];\n                  contents =\n                  Types.Literal {\n                    lit =\n                    { Types.node = (Types.Int (\"1\", Types.Unsuffixed));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                        hi = { Types.col = \"17\"; line = \"54\" };\n                        lo = { Types.col = \"16\"; line = \"54\" } }\n                      };\n                    neg = false};\n                  hir_id = (Some (\"230\", \"19\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                    hi = { Types.col = \"17\"; line = \"54\" };\n                    lo = { Types.col = \"16\"; line = \"54\" } };\n                  ty = (Types.Int Types.I64) };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {args = [];\n                    bounds_impls =\n                    [{ Types.args = [];\n                       impl =\n                       Types.Builtin {\n                         trait =\n                         { Types.def_id =\n                           { Types.index = (2, 2148); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ptr\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"metadata\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"Thin\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args =\n                           [(Types.Type\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 5307); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_void\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []})\n                             ]\n                           }};\n                       trait =\n                       { Types.def_id =\n                         { Types.index = (2, 2148); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ptr\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"metadata\");\n                               disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Thin\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (2, 5307); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ffi\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"c_void\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []})\n                           ]\n                         }\n                       }\n                      ];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                      hi = { Types.col = \"31\"; line = \"55\" };\n                      lo = { Types.col = \"16\"; line = \"55\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2600); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"null_mut\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                        hi = { Types.col = \"29\"; line = \"55\" };\n                        lo = { Types.col = \"16\"; line = \"55\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false; inputs = [];\n                             output =\n                             (Types.RawPtr\n                                (Types.Adt {\n                                   def_id =\n                                   { Types.index = (2, 5307); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ffi\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"c_void\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []},\n                                 true));\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args =\n                    [(Types.Type\n                        Types.Adt {\n                          def_id =\n                          { Types.index = (2, 5307); krate = \"core\";\n                            path =\n                            [{ Types.data = (Types.TypeNs \"ffi\");\n                               disambiguator = 0 };\n                              { Types.data = (Types.TypeNs \"c_void\");\n                                disambiguator = 0 }\n                              ]\n                            };\n                          generic_args = []; trait_refs = []})\n                      ];\n                    trait = None;\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false; inputs = [];\n                           output =\n                           (Types.RawPtr\n                              (Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 5307); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_void\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []},\n                               true));\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"230\", \"20\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                    hi = { Types.col = \"31\"; line = \"55\" };\n                    lo = { Types.col = \"16\"; line = \"55\" } };\n                  ty =\n                  (Types.RawPtr\n                     (Types.Adt {\n                        def_id =\n                        { Types.index = (2, 5307); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ffi\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"c_void\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args = []; trait_refs = []},\n                      true))\n                  }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                hi = { Types.col = \"13\"; line = \"56\" };\n                lo = { Types.col = \"12\"; line = \"51\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 12372); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 550 };\n                      { Types.data = (Types.ValueNs \"BIO_ctrl\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                  hi = { Types.col = \"30\"; line = \"51\" };\n                  lo = { Types.col = \"12\"; line = \"51\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 20890);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"bio_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.Int Types.I32); (Types.Int Types.I64);\n                         (Types.RawPtr\n                            (Types.Adt {\n                               def_id =\n                               { Types.index = (2, 5307); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ffi\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"c_void\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []},\n                             true))\n                         ];\n                       output = (Types.Int Types.I64); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 20890); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"bio_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.Int Types.I32); (Types.Int Types.I64);\n                       (Types.RawPtr\n                          (Types.Adt {\n                             def_id =\n                             { Types.index = (2, 5307); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ffi\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"c_void\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           true))\n                       ];\n                     output = (Types.Int Types.I64); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"230\", \"4\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n              hi = { Types.col = \"13\"; line = \"56\" };\n              lo = { Types.col = \"12\"; line = \"51\" } };\n            ty = (Types.Int Types.I64) });\n    region_scope = { Types.data = Types.Node; id = \"24\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath\n            \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n      hi = { Types.col = \"9\"; line = \"57\" };\n      lo = { Types.col = \"8\"; line = \"50\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"230\", \"3\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath\n          \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n    hi = { Types.col = \"9\"; line = \"57\" };\n    lo = { Types.col = \"8\"; line = \"50\" } };\n  ty = (Types.Int Types.I64) }"

  in
  ()

let impl__Bio__get_ssl (self: t_Bio) =
  Rust_primitives.Hax.failure "(reject_RawOrMutPointer) ExplicitRejection { reason: \"a node of kind [Raw_pointer] have been found in the AST\" }"
    "{\n        let mut ssl: raw_pointer!() = {\n            core::ptr::null_mut::<openssl3::t_ssl_st>(Tuple0)\n        };\n        {\n            (if core::cmp::PartialEq::eq(\n                rust_primitives::hax::failure(\n                    \"(AST import) Unsafe blocks are not allowed.\",\n                    \"{ Types.attributes = [];\\n  contents =\\n  Types.Block {\\n    expr =\\n    (Some { Types.attributes = [];\\n            contents =\\n            Types.Call {\\n              args =\\n              [{ Types.attributes = [];\\n                 contents =\\n                 Types.Call {\\n                   args =\\n                   [{ Types.attributes = [];\\n                      contents =\\n                      Types.Field {\\n                        field =\\n                        { Types.index = (0, 223); krate = \\\"sandwich\\\";\\n                          path =\\n                          [{ Types.data = (Types.TypeNs \\\"implementation\\\");\\n                             disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"openssl3_impl\\\");\\n                              disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"tunnel\\\");\\n                              disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"bio_method\\\");\\n                              disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"Bio\\\");\\n                              disambiguator = 0 };\\n                            { Types.data = (Types.ValueNs \\\"0\\\");\\n                              disambiguator = 0 }\\n                            ]\\n                          };\\n                        lhs =\\n                        { Types.attributes = [];\\n                          contents =\\n                          Types.Deref {\\n                            arg =\\n                            { Types.attributes = [];\\n                              contents =\\n                              Types.VarRef {\\n                                id =\\n                                { Types.id =\\n                                  { Types.local_id = \\\"2\\\";\\n                                    owner =\\n                                    { Types.index = (0, 236);\\n                                      krate = \\\"sandwich\\\";\\n                                      path =\\n                                      [{ Types.data =\\n                                         (Types.TypeNs \\\"implementation\\\");\\n                                         disambiguator = 0 };\\n                                        { Types.data =\\n                                          (Types.TypeNs \\\"openssl3_impl\\\");\\n                                          disambiguator = 0 };\\n                                        { Types.data =\\n                                          (Types.TypeNs \\\"tunnel\\\");\\n                                          disambiguator = 0 };\\n                                        { Types.data =\\n                                          (Types.TypeNs \\\"bio_method\\\");\\n                                          disambiguator = 0 };\\n                                        { Types.data = Types.Impl;\\n                                          disambiguator = 1 };\\n                                        { Types.data =\\n                                          (Types.ValueNs \\\"get_ssl\\\");\\n                                          disambiguator = 0 }\\n                                        ]\\n                                      }\\n                                    };\\n                                  name = \\\"self\\\" }};\\n                              hir_id = None;\\n                              span =\\n                              { Types.filename =\\n                                (Types.Real\\n                                   (Types.LocalPath\\n                                      \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                                hi = { Types.col = \\\"20\\\"; line = \\\"82\\\" };\\n                                lo = { Types.col = \\\"16\\\"; line = \\\"82\\\" } };\\n                              ty =\\n                              (Types.Ref\\n                                 ({ Types.kind = Types.ReErased },\\n                                  Types.Adt {\\n                                    def_id =\\n                                    { Types.index = (0, 221);\\n                                      krate = \\\"sandwich\\\";\\n                                      path =\\n                                      [{ Types.data =\\n                                         (Types.TypeNs \\\"implementation\\\");\\n                                         disambiguator = 0 };\\n                                        { Types.data =\\n                                          (Types.TypeNs \\\"openssl3_impl\\\");\\n                                          disambiguator = 0 };\\n                                        { Types.data =\\n                                          (Types.TypeNs \\\"tunnel\\\");\\n                                          disambiguator = 0 };\\n                                        { Types.data =\\n                                          (Types.TypeNs \\\"bio_method\\\");\\n                                          disambiguator = 0 };\\n                                        { Types.data = (Types.TypeNs \\\"Bio\\\");\\n                                          disambiguator = 0 }\\n                                        ]\\n                                      };\\n                                    generic_args = []; trait_refs = []},\\n                                  false))\\n                              }};\\n                          hir_id = (Some (\\\"236\\\", \\\"22\\\"));\\n                          span =\\n                          { Types.filename =\\n                            (Types.Real\\n                               (Types.LocalPath\\n                                  \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                            hi = { Types.col = \\\"20\\\"; line = \\\"82\\\" };\\n                            lo = { Types.col = \\\"16\\\"; line = \\\"82\\\" } };\\n                          ty =\\n                          Types.Adt {\\n                            def_id =\\n                            { Types.index = (0, 221); krate = \\\"sandwich\\\";\\n                              path =\\n                              [{ Types.data = (Types.TypeNs \\\"implementation\\\");\\n                                 disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"openssl3_impl\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"tunnel\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"bio_method\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"Bio\\\");\\n                                  disambiguator = 0 }\\n                                ]\\n                              };\\n                            generic_args = []; trait_refs = []}\\n                          }};\\n                      hir_id = (Some (\\\"236\\\", \\\"21\\\"));\\n                      span =\\n                      { Types.filename =\\n                        (Types.Real\\n                           (Types.LocalPath\\n                              \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                        hi = { Types.col = \\\"22\\\"; line = \\\"82\\\" };\\n                        lo = { Types.col = \\\"16\\\"; line = \\\"82\\\" } };\\n                      ty =\\n                      Types.Adt {\\n                        def_id =\\n                        { Types.index = (2, 2222); krate = \\\"core\\\";\\n                          path =\\n                          [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                             disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                              disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                              disambiguator = 0 }\\n                            ]\\n                          };\\n                        generic_args =\\n                        [(Types.Type\\n                            Types.Adt {\\n                              def_id =\\n                              { Types.index = (27, 20890);\\n                                krate = \\\"openssl3\\\";\\n                                path =\\n                                [{ Types.data = (Types.TypeNs \\\"bio_st\\\");\\n                                   disambiguator = 0 }\\n                                  ]\\n                                };\\n                              generic_args = []; trait_refs = []})\\n                          ];\\n                        trait_refs = []}\\n                      }\\n                     ];\\n                   bounds_impls = [];\\n                   fn_span =\\n                   { Types.filename =\\n                     (Types.Real\\n                        (Types.LocalPath\\n                           \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                     hi = { Types.col = \\\"31\\\"; line = \\\"82\\\" };\\n                     lo = { Types.col = \\\"23\\\"; line = \\\"82\\\" } };\\n                   from_hir_call = true;\\n                   fun' =\\n                   { Types.attributes = [];\\n                     contents =\\n                     Types.GlobalName {\\n                       id =\\n                       { Types.index = (2, 2245); krate = \\\"core\\\";\\n                         path =\\n                         [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                            disambiguator = 0 };\\n                           { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                             disambiguator = 0 };\\n                           { Types.data = Types.Impl; disambiguator = 3 };\\n                           { Types.data = (Types.ValueNs \\\"as_ptr\\\");\\n                             disambiguator = 0 }\\n                           ]\\n                         }};\\n                     hir_id = None;\\n                     span =\\n                     { Types.filename =\\n                       (Types.Real\\n                          (Types.LocalPath\\n                             \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                       hi = { Types.col = \\\"29\\\"; line = \\\"82\\\" };\\n                       lo = { Types.col = \\\"23\\\"; line = \\\"82\\\" } };\\n                     ty =\\n                     (Types.Arrow\\n                        { Types.bound_vars = [];\\n                          value =\\n                          { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                            c_variadic = false;\\n                            inputs =\\n                            [Types.Adt {\\n                               def_id =\\n                               { Types.index = (2, 2222); krate = \\\"core\\\";\\n                                 path =\\n                                 [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                    disambiguator = 0 };\\n                                   { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                                     disambiguator = 0 };\\n                                   { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                                     disambiguator = 0 }\\n                                   ]\\n                                 };\\n                               generic_args =\\n                               [(Types.Type\\n                                   Types.Adt {\\n                                     def_id =\\n                                     { Types.index = (27, 20890);\\n                                       krate = \\\"openssl3\\\";\\n                                       path =\\n                                       [{ Types.data =\\n                                          (Types.TypeNs \\\"bio_st\\\");\\n                                          disambiguator = 0 }\\n                                         ]\\n                                       };\\n                                     generic_args = []; trait_refs = []})\\n                                 ];\\n                               trait_refs = []}\\n                              ];\\n                            output =\\n                            (Types.RawPtr\\n                               (Types.Adt {\\n                                  def_id =\\n                                  { Types.index = (27, 20890);\\n                                    krate = \\\"openssl3\\\";\\n                                    path =\\n                                    [{ Types.data = (Types.TypeNs \\\"bio_st\\\");\\n                                       disambiguator = 0 }\\n                                      ]\\n                                    };\\n                                  generic_args = []; trait_refs = []},\\n                                true));\\n                            safety = Types.Safe }\\n                          })\\n                     };\\n                   generic_args =\\n                   [(Types.Type\\n                       Types.Adt {\\n                         def_id =\\n                         { Types.index = (27, 20890); krate = \\\"openssl3\\\";\\n                           path =\\n                           [{ Types.data = (Types.TypeNs \\\"bio_st\\\");\\n                              disambiguator = 0 }\\n                             ]\\n                           };\\n                         generic_args = []; trait_refs = []})\\n                     ];\\n                   trait = None;\\n                   ty =\\n                   (Types.Arrow\\n                      { Types.bound_vars = [];\\n                        value =\\n                        { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                          c_variadic = false;\\n                          inputs =\\n                          [Types.Adt {\\n                             def_id =\\n                             { Types.index = (2, 2222); krate = \\\"core\\\";\\n                               path =\\n                               [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                  disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                                   disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                                   disambiguator = 0 }\\n                                 ]\\n                               };\\n                             generic_args =\\n                             [(Types.Type\\n                                 Types.Adt {\\n                                   def_id =\\n                                   { Types.index = (27, 20890);\\n                                     krate = \\\"openssl3\\\";\\n                                     path =\\n                                     [{ Types.data = (Types.TypeNs \\\"bio_st\\\");\\n                                        disambiguator = 0 }\\n                                       ]\\n                                     };\\n                                   generic_args = []; trait_refs = []})\\n                               ];\\n                             trait_refs = []}\\n                            ];\\n                          output =\\n                          (Types.RawPtr\\n                             (Types.Adt {\\n                                def_id =\\n                                { Types.index = (27, 20890);\\n                                  krate = \\\"openssl3\\\";\\n                                  path =\\n                                  [{ Types.data = (Types.TypeNs \\\"bio_st\\\");\\n                                     disambiguator = 0 }\\n                                    ]\\n                                  };\\n                                generic_args = []; trait_refs = []},\\n                              true));\\n                          safety = Types.Safe }\\n                        })};\\n                 hir_id = (Some (\\\"236\\\", \\\"19\\\"));\\n                 span =\\n                 { Types.filename =\\n                   (Types.Real\\n                      (Types.LocalPath\\n                         \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                   hi = { Types.col = \\\"31\\\"; line = \\\"82\\\" };\\n                   lo = { Types.col = \\\"16\\\"; line = \\\"82\\\" } };\\n                 ty =\\n                 (Types.RawPtr\\n                    (Types.Adt {\\n                       def_id =\\n                       { Types.index = (27, 20890); krate = \\\"openssl3\\\";\\n                         path =\\n                         [{ Types.data = (Types.TypeNs \\\"bio_st\\\");\\n                            disambiguator = 0 }\\n                           ]\\n                         };\\n                       generic_args = []; trait_refs = []},\\n                     true))\\n                 };\\n                { Types.attributes = [];\\n                  contents =\\n                  Types.Cast {\\n                    source =\\n                    { Types.attributes = [];\\n                      contents =\\n                      Types.NamedConst {args = [];\\n                        def_id =\\n                        { Types.index = (27, 1443); krate = \\\"openssl3\\\";\\n                          path =\\n                          [{ Types.data = (Types.ValueNs \\\"BIO_C_GET_SSL\\\");\\n                             disambiguator = 0 }\\n                            ]\\n                          };\\n                        impl = None; user_ty = None};\\n                      hir_id = (Some (\\\"236\\\", \\\"25\\\"));\\n                      span =\\n                      { Types.filename =\\n                        (Types.Real\\n                           (Types.LocalPath\\n                              \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                        hi = { Types.col = \\\"39\\\"; line = \\\"83\\\" };\\n                        lo = { Types.col = \\\"16\\\"; line = \\\"83\\\" } };\\n                      ty = (Types.Uint Types.U32) }};\\n                  hir_id = (Some (\\\"236\\\", \\\"24\\\"));\\n                  span =\\n                  { Types.filename =\\n                    (Types.Real\\n                       (Types.LocalPath\\n                          \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                    hi = { Types.col = \\\"48\\\"; line = \\\"83\\\" };\\n                    lo = { Types.col = \\\"16\\\"; line = \\\"83\\\" } };\\n                  ty = (Types.Int Types.I32) };\\n                { Types.attributes = [];\\n                  contents =\\n                  Types.Literal {\\n                    lit =\\n                    { Types.node = (Types.Int (\\\"0\\\", Types.Unsuffixed));\\n                      span =\\n                      { Types.filename =\\n                        (Types.Real\\n                           (Types.LocalPath\\n                              \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                        hi = { Types.col = \\\"17\\\"; line = \\\"84\\\" };\\n                        lo = { Types.col = \\\"16\\\"; line = \\\"84\\\" } }\\n                      };\\n                    neg = false};\\n                  hir_id = (Some (\\\"236\\\", \\\"30\\\"));\\n                  span =\\n                  { Types.filename =\\n                    (Types.Real\\n                       (Types.LocalPath\\n                          \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                    hi = { Types.col = \\\"17\\\"; line = \\\"84\\\" };\\n                    lo = { Types.col = \\\"16\\\"; line = \\\"84\\\" } };\\n                  ty = (Types.Int Types.I64) };\\n                { Types.attributes = [];\\n                  contents =\\n                  Types.Call {\\n                    args =\\n                    [{ Types.attributes = [];\\n                       contents =\\n                       Types.Use {\\n                         source =\\n                         { Types.attributes = [];\\n                           contents =\\n                           Types.AddressOf {\\n                             arg =\\n                             { Types.attributes = [];\\n                               contents =\\n                               Types.Deref {\\n                                 arg =\\n                                 { Types.attributes = [];\\n                                   contents =\\n                                   Types.Borrow {\\n                                     arg =\\n                                     { Types.attributes = [];\\n                                       contents =\\n                                       Types.VarRef {\\n                                         id =\\n                                         { Types.id =\\n                                           { Types.local_id = \\\"11\\\";\\n                                             owner =\\n                                             { Types.index = (0, 236);\\n                                               krate = \\\"sandwich\\\";\\n                                               path =\\n                                               [{ Types.data =\\n                                                  (Types.TypeNs\\n                                                     \\\"implementation\\\");\\n                                                  disambiguator = 0 };\\n                                                 { Types.data =\\n                                                   (Types.TypeNs\\n                                                      \\\"openssl3_impl\\\");\\n                                                   disambiguator = 0 };\\n                                                 { Types.data =\\n                                                   (Types.TypeNs \\\"tunnel\\\");\\n                                                   disambiguator = 0 };\\n                                                 { Types.data =\\n                                                   (Types.TypeNs \\\"bio_method\\\");\\n                                                   disambiguator = 0 };\\n                                                 { Types.data = Types.Impl;\\n                                                   disambiguator = 1 };\\n                                                 { Types.data =\\n                                                   (Types.ValueNs \\\"get_ssl\\\");\\n                                                   disambiguator = 0 }\\n                                                 ]\\n                                               }\\n                                             };\\n                                           name = \\\"ssl\\\" }};\\n                                       hir_id = (Some (\\\"236\\\", \\\"35\\\"));\\n                                       span =\\n                                       { Types.filename =\\n                                         (Types.Real\\n                                            (Types.LocalPath\\n                                               \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                                         hi =\\n                                         { Types.col = \\\"25\\\"; line = \\\"85\\\" };\\n                                         lo =\\n                                         { Types.col = \\\"22\\\"; line = \\\"85\\\" } };\\n                                       ty =\\n                                       (Types.RawPtr\\n                                          (Types.Adt {\\n                                             def_id =\\n                                             { Types.index = (27, 21394);\\n                                               krate = \\\"openssl3\\\";\\n                                               path =\\n                                               [{ Types.data =\\n                                                  (Types.TypeNs \\\"ssl_st\\\");\\n                                                  disambiguator = 0 }\\n                                                 ]\\n                                               };\\n                                             generic_args = [];\\n                                             trait_refs = []},\\n                                           true))\\n                                       };\\n                                     borrow_kind =\\n                                     Types.Mut {kind = Types.Default}};\\n                                   hir_id = None;\\n                                   span =\\n                                   { Types.filename =\\n                                     (Types.Real\\n                                        (Types.LocalPath\\n                                           \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                                     hi = { Types.col = \\\"25\\\"; line = \\\"85\\\" };\\n                                     lo = { Types.col = \\\"17\\\"; line = \\\"85\\\" } };\\n                                   ty =\\n                                   (Types.Ref\\n                                      ({ Types.kind = Types.ReErased },\\n                                       (Types.RawPtr\\n                                          (Types.Adt {\\n                                             def_id =\\n                                             { Types.index = (27, 21394);\\n                                               krate = \\\"openssl3\\\";\\n                                               path =\\n                                               [{ Types.data =\\n                                                  (Types.TypeNs \\\"ssl_st\\\");\\n                                                  disambiguator = 0 }\\n                                                 ]\\n                                               };\\n                                             generic_args = [];\\n                                             trait_refs = []},\\n                                           true)),\\n                                       true))\\n                                   }};\\n                               hir_id = None;\\n                               span =\\n                               { Types.filename =\\n                                 (Types.Real\\n                                    (Types.LocalPath\\n                                       \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                                 hi = { Types.col = \\\"25\\\"; line = \\\"85\\\" };\\n                                 lo = { Types.col = \\\"17\\\"; line = \\\"85\\\" } };\\n                               ty =\\n                               (Types.RawPtr\\n                                  (Types.Adt {\\n                                     def_id =\\n                                     { Types.index = (27, 21394);\\n                                       krate = \\\"openssl3\\\";\\n                                       path =\\n                                       [{ Types.data =\\n                                          (Types.TypeNs \\\"ssl_st\\\");\\n                                          disambiguator = 0 }\\n                                         ]\\n                                       };\\n                                     generic_args = []; trait_refs = []},\\n                                   true))\\n                               };\\n                             mutability = true};\\n                           hir_id = (Some (\\\"236\\\", \\\"34\\\"));\\n                           span =\\n                           { Types.filename =\\n                             (Types.Real\\n                                (Types.LocalPath\\n                                   \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                             hi = { Types.col = \\\"25\\\"; line = \\\"85\\\" };\\n                             lo = { Types.col = \\\"17\\\"; line = \\\"85\\\" } };\\n                           ty =\\n                           (Types.RawPtr\\n                              ((Types.RawPtr\\n                                  (Types.Adt {\\n                                     def_id =\\n                                     { Types.index = (27, 21394);\\n                                       krate = \\\"openssl3\\\";\\n                                       path =\\n                                       [{ Types.data =\\n                                          (Types.TypeNs \\\"ssl_st\\\");\\n                                          disambiguator = 0 }\\n                                         ]\\n                                       };\\n                                     generic_args = []; trait_refs = []},\\n                                   true)),\\n                               true))\\n                           }};\\n                       hir_id = (Some (\\\"236\\\", \\\"33\\\"));\\n                       span =\\n                       { Types.filename =\\n                         (Types.Real\\n                            (Types.LocalPath\\n                               \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                         hi = { Types.col = \\\"49\\\"; line = \\\"85\\\" };\\n                         lo = { Types.col = \\\"16\\\"; line = \\\"85\\\" } };\\n                       ty =\\n                       (Types.RawPtr\\n                          ((Types.RawPtr\\n                              (Types.Adt {\\n                                 def_id =\\n                                 { Types.index = (27, 21394);\\n                                   krate = \\\"openssl3\\\";\\n                                   path =\\n                                   [{ Types.data = (Types.TypeNs \\\"ssl_st\\\");\\n                                      disambiguator = 0 }\\n                                     ]\\n                                   };\\n                                 generic_args = []; trait_refs = []},\\n                               true)),\\n                           true))\\n                       }\\n                      ];\\n                    bounds_impls =\\n                    [{ Types.args = [];\\n                       impl =\\n                       Types.Builtin {\\n                         trait =\\n                         { Types.def_id =\\n                           { Types.index = (2, 26413); krate = \\\"core\\\";\\n                             path =\\n                             [{ Types.data = (Types.TypeNs \\\"marker\\\");\\n                                disambiguator = 0 };\\n                               { Types.data = (Types.TypeNs \\\"Sized\\\");\\n                                 disambiguator = 0 }\\n                               ]\\n                             };\\n                           generic_args =\\n                           [(Types.Type\\n                               Types.Adt {\\n                                 def_id =\\n                                 { Types.index = (2, 5307); krate = \\\"core\\\";\\n                                   path =\\n                                   [{ Types.data = (Types.TypeNs \\\"ffi\\\");\\n                                      disambiguator = 0 };\\n                                     { Types.data = (Types.TypeNs \\\"c_void\\\");\\n                                       disambiguator = 0 }\\n                                     ]\\n                                   };\\n                                 generic_args = []; trait_refs = []})\\n                             ]\\n                           }};\\n                       trait =\\n                       { Types.def_id =\\n                         { Types.index = (2, 26413); krate = \\\"core\\\";\\n                           path =\\n                           [{ Types.data = (Types.TypeNs \\\"marker\\\");\\n                              disambiguator = 0 };\\n                             { Types.data = (Types.TypeNs \\\"Sized\\\");\\n                               disambiguator = 0 }\\n                             ]\\n                           };\\n                         generic_args =\\n                         [(Types.Type\\n                             Types.Adt {\\n                               def_id =\\n                               { Types.index = (2, 5307); krate = \\\"core\\\";\\n                                 path =\\n                                 [{ Types.data = (Types.TypeNs \\\"ffi\\\");\\n                                    disambiguator = 0 };\\n                                   { Types.data = (Types.TypeNs \\\"c_void\\\");\\n                                     disambiguator = 0 }\\n                                   ]\\n                                 };\\n                               generic_args = []; trait_refs = []})\\n                           ]\\n                         }\\n                       }\\n                      ];\\n                    fn_span =\\n                    { Types.filename =\\n                      (Types.Real\\n                         (Types.LocalPath\\n                            \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                      hi = { Types.col = \\\"56\\\"; line = \\\"85\\\" };\\n                      lo = { Types.col = \\\"50\\\"; line = \\\"85\\\" } };\\n                    from_hir_call = true;\\n                    fun' =\\n                    { Types.attributes = [];\\n                      contents =\\n                      Types.GlobalName {\\n                        id =\\n                        { Types.index = (2, 2500); krate = \\\"core\\\";\\n                          path =\\n                          [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                             disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"mut_ptr\\\");\\n                              disambiguator = 0 };\\n                            { Types.data = Types.Impl; disambiguator = 0 };\\n                            { Types.data = (Types.ValueNs \\\"cast\\\");\\n                              disambiguator = 0 }\\n                            ]\\n                          }};\\n                      hir_id = None;\\n                      span =\\n                      { Types.filename =\\n                        (Types.Real\\n                           (Types.LocalPath\\n                              \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                        hi = { Types.col = \\\"54\\\"; line = \\\"85\\\" };\\n                        lo = { Types.col = \\\"50\\\"; line = \\\"85\\\" } };\\n                      ty =\\n                      (Types.Arrow\\n                         { Types.bound_vars = [];\\n                           value =\\n                           { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                             c_variadic = false;\\n                             inputs =\\n                             [(Types.RawPtr\\n                                 ((Types.RawPtr\\n                                     (Types.Adt {\\n                                        def_id =\\n                                        { Types.index = (27, 21394);\\n                                          krate = \\\"openssl3\\\";\\n                                          path =\\n                                          [{ Types.data =\\n                                             (Types.TypeNs \\\"ssl_st\\\");\\n                                             disambiguator = 0 }\\n                                            ]\\n                                          };\\n                                        generic_args = []; trait_refs = []},\\n                                      true)),\\n                                  true))\\n                               ];\\n                             output =\\n                             (Types.RawPtr\\n                                (Types.Adt {\\n                                   def_id =\\n                                   { Types.index = (2, 5307); krate = \\\"core\\\";\\n                                     path =\\n                                     [{ Types.data = (Types.TypeNs \\\"ffi\\\");\\n                                        disambiguator = 0 };\\n                                       { Types.data = (Types.TypeNs \\\"c_void\\\");\\n                                         disambiguator = 0 }\\n                                       ]\\n                                     };\\n                                   generic_args = []; trait_refs = []},\\n                                 true));\\n                             safety = Types.Safe }\\n                           })\\n                      };\\n                    generic_args =\\n                    [(Types.Type\\n                        (Types.RawPtr\\n                           (Types.Adt {\\n                              def_id =\\n                              { Types.index = (27, 21394);\\n                                krate = \\\"openssl3\\\";\\n                                path =\\n                                [{ Types.data = (Types.TypeNs \\\"ssl_st\\\");\\n                                   disambiguator = 0 }\\n                                  ]\\n                                };\\n                              generic_args = []; trait_refs = []},\\n                            true)));\\n                      (Types.Type\\n                         Types.Adt {\\n                           def_id =\\n                           { Types.index = (2, 5307); krate = \\\"core\\\";\\n                             path =\\n                             [{ Types.data = (Types.TypeNs \\\"ffi\\\");\\n                                disambiguator = 0 };\\n                               { Types.data = (Types.TypeNs \\\"c_void\\\");\\n                                 disambiguator = 0 }\\n                               ]\\n                             };\\n                           generic_args = []; trait_refs = []})\\n                      ];\\n                    trait = None;\\n                    ty =\\n                    (Types.Arrow\\n                       { Types.bound_vars = [];\\n                         value =\\n                         { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                           c_variadic = false;\\n                           inputs =\\n                           [(Types.RawPtr\\n                               ((Types.RawPtr\\n                                   (Types.Adt {\\n                                      def_id =\\n                                      { Types.index = (27, 21394);\\n                                        krate = \\\"openssl3\\\";\\n                                        path =\\n                                        [{ Types.data =\\n                                           (Types.TypeNs \\\"ssl_st\\\");\\n                                           disambiguator = 0 }\\n                                          ]\\n                                        };\\n                                      generic_args = []; trait_refs = []},\\n                                    true)),\\n                                true))\\n                             ];\\n                           output =\\n                           (Types.RawPtr\\n                              (Types.Adt {\\n                                 def_id =\\n                                 { Types.index = (2, 5307); krate = \\\"core\\\";\\n                                   path =\\n                                   [{ Types.data = (Types.TypeNs \\\"ffi\\\");\\n                                      disambiguator = 0 };\\n                                     { Types.data = (Types.TypeNs \\\"c_void\\\");\\n                                       disambiguator = 0 }\\n                                     ]\\n                                   };\\n                                 generic_args = []; trait_refs = []},\\n                               true));\\n                           safety = Types.Safe }\\n                         })};\\n                  hir_id = (Some (\\\"236\\\", \\\"31\\\"));\\n                  span =\\n                  { Types.filename =\\n                    (Types.Real\\n                       (Types.LocalPath\\n                          \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                    hi = { Types.col = \\\"56\\\"; line = \\\"85\\\" };\\n                    lo = { Types.col = \\\"16\\\"; line = \\\"85\\\" } };\\n                  ty =\\n                  (Types.RawPtr\\n                     (Types.Adt {\\n                        def_id =\\n                        { Types.index = (2, 5307); krate = \\\"core\\\";\\n                          path =\\n                          [{ Types.data = (Types.TypeNs \\\"ffi\\\");\\n                             disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"c_void\\\");\\n                              disambiguator = 0 }\\n                            ]\\n                          };\\n                        generic_args = []; trait_refs = []},\\n                      true))\\n                  }\\n                ];\\n              bounds_impls = [];\\n              fn_span =\\n              { Types.filename =\\n                (Types.Real\\n                   (Types.LocalPath\\n                      \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                hi = { Types.col = \\\"13\\\"; line = \\\"86\\\" };\\n                lo = { Types.col = \\\"12\\\"; line = \\\"81\\\" } };\\n              from_hir_call = true;\\n              fun' =\\n              { Types.attributes = [];\\n                contents =\\n                Types.GlobalName {\\n                  id =\\n                  { Types.index = (27, 12372); krate = \\\"openssl3\\\";\\n                    path =\\n                    [{ Types.data = Types.ForeignMod; disambiguator = 550 };\\n                      { Types.data = (Types.ValueNs \\\"BIO_ctrl\\\");\\n                        disambiguator = 0 }\\n                      ]\\n                    }};\\n                hir_id = None;\\n                span =\\n                { Types.filename =\\n                  (Types.Real\\n                     (Types.LocalPath\\n                        \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                  hi = { Types.col = \\\"30\\\"; line = \\\"81\\\" };\\n                  lo = { Types.col = \\\"12\\\"; line = \\\"81\\\" } };\\n                ty =\\n                (Types.Arrow\\n                   { Types.bound_vars = [];\\n                     value =\\n                     { Types.abi = Types.Abi {todo = \\\"C { unwind: false }\\\"};\\n                       c_variadic = false;\\n                       inputs =\\n                       [(Types.RawPtr\\n                           (Types.Adt {\\n                              def_id =\\n                              { Types.index = (27, 20890);\\n                                krate = \\\"openssl3\\\";\\n                                path =\\n                                [{ Types.data = (Types.TypeNs \\\"bio_st\\\");\\n                                   disambiguator = 0 }\\n                                  ]\\n                                };\\n                              generic_args = []; trait_refs = []},\\n                            true));\\n                         (Types.Int Types.I32); (Types.Int Types.I64);\\n                         (Types.RawPtr\\n                            (Types.Adt {\\n                               def_id =\\n                               { Types.index = (2, 5307); krate = \\\"core\\\";\\n                                 path =\\n                                 [{ Types.data = (Types.TypeNs \\\"ffi\\\");\\n                                    disambiguator = 0 };\\n                                   { Types.data = (Types.TypeNs \\\"c_void\\\");\\n                                     disambiguator = 0 }\\n                                   ]\\n                                 };\\n                               generic_args = []; trait_refs = []},\\n                             true))\\n                         ];\\n                       output = (Types.Int Types.I64); safety = Types.Unsafe\\n                       }\\n                     })\\n                };\\n              generic_args = []; trait = None;\\n              ty =\\n              (Types.Arrow\\n                 { Types.bound_vars = [];\\n                   value =\\n                   { Types.abi = Types.Abi {todo = \\\"C { unwind: false }\\\"};\\n                     c_variadic = false;\\n                     inputs =\\n                     [(Types.RawPtr\\n                         (Types.Adt {\\n                            def_id =\\n                            { Types.index = (27, 20890); krate = \\\"openssl3\\\";\\n                              path =\\n                              [{ Types.data = (Types.TypeNs \\\"bio_st\\\");\\n                                 disambiguator = 0 }\\n                                ]\\n                              };\\n                            generic_args = []; trait_refs = []},\\n                          true));\\n                       (Types.Int Types.I32); (Types.Int Types.I64);\\n                       (Types.RawPtr\\n                          (Types.Adt {\\n                             def_id =\\n                             { Types.index = (2, 5307); krate = \\\"core\\\";\\n                               path =\\n                               [{ Types.data = (Types.TypeNs \\\"ffi\\\");\\n                                  disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"c_void\\\");\\n                                   disambiguator = 0 }\\n                                 ]\\n                               };\\n                             generic_args = []; trait_refs = []},\\n                           true))\\n                       ];\\n                     output = (Types.Int Types.I64); safety = Types.Unsafe }\\n                   })};\\n            hir_id = (Some (\\\"236\\\", \\\"15\\\"));\\n            span =\\n            { Types.filename =\\n              (Types.Real\\n                 (Types.LocalPath\\n                    \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n              hi = { Types.col = \\\"13\\\"; line = \\\"86\\\" };\\n              lo = { Types.col = \\\"12\\\"; line = \\\"81\\\" } };\\n            ty = (Types.Int Types.I64) });\\n    region_scope = { Types.data = Types.Node; id = \\\"41\\\" };\\n    safety_mode = Types.ExplicitUnsafe;\\n    span =\\n    { Types.filename =\\n      (Types.Real\\n         (Types.LocalPath\\n            \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n      hi = { Types.col = \\\"9\\\"; line = \\\"87\\\" };\\n      lo = { Types.col = \\\"11\\\"; line = \\\"79\\\" } };\\n    stmts = []; targeted_by_break = false};\\n  hir_id = (Some (\\\"236\\\", \\\"14\\\"));\\n  span =\\n  { Types.filename =\\n    (Types.Real\\n       (Types.LocalPath\\n          \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n    hi = { Types.col = \\\"9\\\"; line = \\\"87\\\" };\\n    lo = { Types.col = \\\"11\\\"; line = \\\"79\\\" } };\\n  ty = (Types.Int Types.I64) }\",\n                ),\n                1,\n            ) {\n                {\n                    core::result::Result_Ok(\n                        rust_primitives::hax::failure(\n                            \"(AST import) Unsafe blocks are not allowed.\",\n                            \"{ Types.attributes = [];\\n  contents =\\n  Types.Block {\\n    expr =\\n    (Some { Types.attributes = [];\\n            contents =\\n            Types.Call {\\n              args =\\n              [{ Types.attributes = [];\\n                 contents =\\n                 Types.VarRef {\\n                   id =\\n                   { Types.id =\\n                     { Types.local_id = \\\"11\\\";\\n                       owner =\\n                       { Types.index = (0, 236); krate = \\\"sandwich\\\";\\n                         path =\\n                         [{ Types.data = (Types.TypeNs \\\"implementation\\\");\\n                            disambiguator = 0 };\\n                           { Types.data = (Types.TypeNs \\\"openssl3_impl\\\");\\n                             disambiguator = 0 };\\n                           { Types.data = (Types.TypeNs \\\"tunnel\\\");\\n                             disambiguator = 0 };\\n                           { Types.data = (Types.TypeNs \\\"bio_method\\\");\\n                             disambiguator = 0 };\\n                           { Types.data = Types.Impl; disambiguator = 1 };\\n                           { Types.data = (Types.ValueNs \\\"get_ssl\\\");\\n                             disambiguator = 0 }\\n                           ]\\n                         }\\n                       };\\n                     name = \\\"ssl\\\" }};\\n                 hir_id = (Some (\\\"236\\\", \\\"53\\\"));\\n                 span =\\n                 { Types.filename =\\n                   (Types.Real\\n                      (Types.LocalPath\\n                         \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                   hi = { Types.col = \\\"50\\\"; line = \\\"89\\\" };\\n                   lo = { Types.col = \\\"47\\\"; line = \\\"89\\\" } };\\n                 ty =\\n                 (Types.RawPtr\\n                    (Types.Adt {\\n                       def_id =\\n                       { Types.index = (27, 21394); krate = \\\"openssl3\\\";\\n                         path =\\n                         [{ Types.data = (Types.TypeNs \\\"ssl_st\\\");\\n                            disambiguator = 0 }\\n                           ]\\n                         };\\n                       generic_args = []; trait_refs = []},\\n                     true))\\n                 }\\n                ];\\n              bounds_impls = [];\\n              fn_span =\\n              { Types.filename =\\n                (Types.Real\\n                   (Types.LocalPath\\n                      \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                hi = { Types.col = \\\"51\\\"; line = \\\"89\\\" };\\n                lo = { Types.col = \\\"24\\\"; line = \\\"89\\\" } };\\n              from_hir_call = true;\\n              fun' =\\n              { Types.attributes = [];\\n                contents =\\n                Types.GlobalName {\\n                  id =\\n                  { Types.index = (2, 2238); krate = \\\"core\\\";\\n                    path =\\n                    [{ Types.data = (Types.TypeNs \\\"ptr\\\"); disambiguator = 0 };\\n                      { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                        disambiguator = 0 };\\n                      { Types.data = Types.Impl; disambiguator = 3 };\\n                      { Types.data = (Types.ValueNs \\\"new_unchecked\\\");\\n                        disambiguator = 0 }\\n                      ]\\n                    }};\\n                hir_id = None;\\n                span =\\n                { Types.filename =\\n                  (Types.Real\\n                     (Types.LocalPath\\n                        \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                  hi = { Types.col = \\\"46\\\"; line = \\\"89\\\" };\\n                  lo = { Types.col = \\\"24\\\"; line = \\\"89\\\" } };\\n                ty =\\n                (Types.Arrow\\n                   { Types.bound_vars = [];\\n                     value =\\n                     { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                       c_variadic = false;\\n                       inputs =\\n                       [(Types.RawPtr\\n                           (Types.Adt {\\n                              def_id =\\n                              { Types.index = (27, 21394);\\n                                krate = \\\"openssl3\\\";\\n                                path =\\n                                [{ Types.data = (Types.TypeNs \\\"ssl_st\\\");\\n                                   disambiguator = 0 }\\n                                  ]\\n                                };\\n                              generic_args = []; trait_refs = []},\\n                            true))\\n                         ];\\n                       output =\\n                       Types.Adt {\\n                         def_id =\\n                         { Types.index = (2, 2222); krate = \\\"core\\\";\\n                           path =\\n                           [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                              disambiguator = 0 };\\n                             { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                               disambiguator = 0 };\\n                             { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                               disambiguator = 0 }\\n                             ]\\n                           };\\n                         generic_args =\\n                         [(Types.Type\\n                             Types.Adt {\\n                               def_id =\\n                               { Types.index = (27, 21394);\\n                                 krate = \\\"openssl3\\\";\\n                                 path =\\n                                 [{ Types.data = (Types.TypeNs \\\"ssl_st\\\");\\n                                    disambiguator = 0 }\\n                                   ]\\n                                 };\\n                               generic_args = []; trait_refs = []})\\n                           ];\\n                         trait_refs = []};\\n                       safety = Types.Unsafe }\\n                     })\\n                };\\n              generic_args =\\n              [(Types.Type\\n                  Types.Adt {\\n                    def_id =\\n                    { Types.index = (27, 21394); krate = \\\"openssl3\\\";\\n                      path =\\n                      [{ Types.data = (Types.TypeNs \\\"ssl_st\\\");\\n                         disambiguator = 0 }\\n                        ]\\n                      };\\n                    generic_args = []; trait_refs = []})\\n                ];\\n              trait = None;\\n              ty =\\n              (Types.Arrow\\n                 { Types.bound_vars = [];\\n                   value =\\n                   { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                     c_variadic = false;\\n                     inputs =\\n                     [(Types.RawPtr\\n                         (Types.Adt {\\n                            def_id =\\n                            { Types.index = (27, 21394); krate = \\\"openssl3\\\";\\n                              path =\\n                              [{ Types.data = (Types.TypeNs \\\"ssl_st\\\");\\n                                 disambiguator = 0 }\\n                                ]\\n                              };\\n                            generic_args = []; trait_refs = []},\\n                          true))\\n                       ];\\n                     output =\\n                     Types.Adt {\\n                       def_id =\\n                       { Types.index = (2, 2222); krate = \\\"core\\\";\\n                         path =\\n                         [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                            disambiguator = 0 };\\n                           { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                             disambiguator = 0 };\\n                           { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                             disambiguator = 0 }\\n                           ]\\n                         };\\n                       generic_args =\\n                       [(Types.Type\\n                           Types.Adt {\\n                             def_id =\\n                             { Types.index = (27, 21394); krate = \\\"openssl3\\\";\\n                               path =\\n                               [{ Types.data = (Types.TypeNs \\\"ssl_st\\\");\\n                                  disambiguator = 0 }\\n                                 ]\\n                               };\\n                             generic_args = []; trait_refs = []})\\n                         ];\\n                       trait_refs = []};\\n                     safety = Types.Unsafe }\\n                   })};\\n            hir_id = (Some (\\\"236\\\", \\\"48\\\"));\\n            span =\\n            { Types.filename =\\n              (Types.Real\\n                 (Types.LocalPath\\n                    \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n              hi = { Types.col = \\\"51\\\"; line = \\\"89\\\" };\\n              lo = { Types.col = \\\"24\\\"; line = \\\"89\\\" } };\\n            ty =\\n            Types.Adt {\\n              def_id =\\n              { Types.index = (2, 2222); krate = \\\"core\\\";\\n                path =\\n                [{ Types.data = (Types.TypeNs \\\"ptr\\\"); disambiguator = 0 };\\n                  { Types.data = (Types.TypeNs \\\"non_null\\\"); disambiguator = 0\\n                    };\\n                  { Types.data = (Types.TypeNs \\\"NonNull\\\"); disambiguator = 0\\n                    }\\n                  ]\\n                };\\n              generic_args =\\n              [(Types.Type\\n                  Types.Adt {\\n                    def_id =\\n                    { Types.index = (27, 21394); krate = \\\"openssl3\\\";\\n                      path =\\n                      [{ Types.data = (Types.TypeNs \\\"ssl_st\\\");\\n                         disambiguator = 0 }\\n                        ]\\n                      };\\n                    generic_args = []; trait_refs = []})\\n                ];\\n              trait_refs = []}\\n            });\\n    region_scope = { Types.data = Types.Node; id = \\\"55\\\" };\\n    safety_mode = Types.ExplicitUnsafe;\\n    span =\\n    { Types.filename =\\n      (Types.Real\\n         (Types.LocalPath\\n            \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n      hi = { Types.col = \\\"53\\\"; line = \\\"89\\\" };\\n      lo = { Types.col = \\\"15\\\"; line = \\\"89\\\" } };\\n    stmts = []; targeted_by_break = false};\\n  hir_id = (Some (\\\"236\\\", \\\"47\\\"));\\n  span =\\n  { Types.filename =\\n    (Types.Real\\n       (Types.LocalPath\\n          \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n    hi = { Types.col = \\\"53\\\"; line = \\\"89\\\" };\\n    lo = { Types.col = \\\"15\\\"; line = \\\"89\\\" } };\\n  ty =\\n  Types.Adt {\\n    def_id =\\n    { Types.index = (2, 2222); krate = \\\"core\\\";\\n      path =\\n      [{ Types.data = (Types.TypeNs \\\"ptr\\\"); disambiguator = 0 };\\n        { Types.data = (Types.TypeNs \\\"non_null\\\"); disambiguator = 0 };\\n        { Types.data = (Types.TypeNs \\\"NonNull\\\"); disambiguator = 0 }]\\n      };\\n    generic_args =\\n    [(Types.Type\\n        Types.Adt {\\n          def_id =\\n          { Types.index = (27, 21394); krate = \\\"openssl3\\\";\\n            path =\\n            [{ Types.data = (Types.TypeNs \\\"ssl_st\\\"); disambiguator = 0 }] };\\n          generic_args = []; trait_refs = []})\\n      ];\\n    trait_refs = []}\\n  }\",\n                        ),\n                    )\n                }\n            } else {\n                {\n                    core::result::Result_Err(\n                        sandwich_proto::io::IOError_IOERROR_SYSTEM_ERROR(),\n                    )\n                }\n            })\n        }\n    }"

let impl__Bio__set_flags
      (#impl_765196419_: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i2: Core.Convert.t_Into impl_765196419_ i32)
      (self: t_Bio)
      (flags: impl_765196419_)
     =
  let _:Prims.unit =
    Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
      "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 223); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3_impl\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"bio_method\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Bio\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 232);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3_impl\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"bio_method\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 1 };\n                                        { Types.data =\n                                          (Types.ValueNs \"set_flags\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                                hi = { Types.col = \"45\"; line = \"67\" };\n                                lo = { Types.col = \"41\"; line = \"67\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 221);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3_impl\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"bio_method\");\n                                          disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Bio\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"232\", \"13\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                            hi = { Types.col = \"45\"; line = \"67\" };\n                            lo = { Types.col = \"41\"; line = \"67\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 221); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3_impl\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"bio_method\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"Bio\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"232\", \"12\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                        hi = { Types.col = \"47\"; line = \"67\" };\n                        lo = { Types.col = \"41\"; line = \"67\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 20890);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"bio_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                     hi = { Types.col = \"56\"; line = \"67\" };\n                     lo = { Types.col = \"48\"; line = \"67\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                       hi = { Types.col = \"54\"; line = \"67\" };\n                       lo = { Types.col = \"48\"; line = \"67\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 20890);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"bio_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 20890);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"bio_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 20890); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"bio_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 20890);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"bio_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 20890);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"bio_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"232\", \"10\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                   hi = { Types.col = \"56\"; line = \"67\" };\n                   lo = { Types.col = \"41\"; line = \"67\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 20890); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"bio_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {\n                    args =\n                    [{ Types.attributes = [];\n                       contents =\n                       Types.VarRef {\n                         id =\n                         { Types.id =\n                           { Types.local_id = \"4\";\n                             owner =\n                             { Types.index = (0, 232); krate = \"sandwich\";\n                               path =\n                               [{ Types.data =\n                                  (Types.TypeNs \"implementation\");\n                                  disambiguator = 0 };\n                                 { Types.data =\n                                   (Types.TypeNs \"openssl3_impl\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"tunnel\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"bio_method\");\n                                   disambiguator = 0 };\n                                 { Types.data = Types.Impl; disambiguator = 1\n                                   };\n                                 { Types.data = (Types.ValueNs \"set_flags\");\n                                   disambiguator = 0 }\n                                 ]\n                               }\n                             };\n                           name = \"flags\" }};\n                       hir_id = (Some (\"232\", \"17\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                         hi = { Types.col = \"63\"; line = \"67\" };\n                         lo = { Types.col = \"58\"; line = \"67\" } };\n                       ty =\n                       (Types.Param\n                          { Types.index = 0; name = \"impl Into<c_int>\" })\n                       }\n                      ];\n                    bounds_impls = [];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                      hi = { Types.col = \"70\"; line = \"67\" };\n                      lo = { Types.col = \"64\"; line = \"67\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2997); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"convert\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Into\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"into\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                        hi = { Types.col = \"68\"; line = \"67\" };\n                        lo = { Types.col = \"64\"; line = \"67\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [(Types.Param\n                                 { Types.index = 0; name = \"impl Into<c_int>\"\n                                   })\n                               ];\n                             output = (Types.Int Types.I32);\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args = [];\n                    trait =\n                    (Some ({ Types.args = [];\n                             impl =\n                             Types.LocalBound {path = [];\n                               predicate_id = \"4044967801813580675\";\n                               trait =\n                               { Types.bound_vars = [];\n                                 value =\n                                 { Types.def_id =\n                                   { Types.index = (2, 2995); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"convert\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"Into\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type\n                                       (Types.Param\n                                          { Types.index = 0;\n                                            name = \"impl Into<c_int>\" }));\n                                     (Types.Type (Types.Int Types.I32))]\n                                   }\n                                 }};\n                             trait =\n                             { Types.def_id =\n                               { Types.index = (2, 2995); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"convert\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"Into\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   (Types.Param\n                                      { Types.index = 0;\n                                        name = \"impl Into<c_int>\" }));\n                                 (Types.Type (Types.Int Types.I32))]\n                               }\n                             },\n                           [(Types.Type\n                               (Types.Param\n                                  { Types.index = 0;\n                                    name = \"impl Into<c_int>\" }));\n                             (Types.Type (Types.Int Types.I32))]));\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [(Types.Param\n                               { Types.index = 0; name = \"impl Into<c_int>\" })\n                             ];\n                           output = (Types.Int Types.I32);\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"232\", \"15\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                    hi = { Types.col = \"70\"; line = \"67\" };\n                    lo = { Types.col = \"58\"; line = \"67\" } };\n                  ty = (Types.Int Types.I32) }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                hi = { Types.col = \"71\"; line = \"67\" };\n                lo = { Types.col = \"17\"; line = \"67\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 12260); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 500 };\n                      { Types.data = (Types.ValueNs \"BIO_set_flags\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                  hi = { Types.col = \"40\"; line = \"67\" };\n                  lo = { Types.col = \"17\"; line = \"67\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 20890);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"bio_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.Int Types.I32)];\n                       output = (Types.Tuple []); safety = Types.Unsafe }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 20890); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"bio_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.Int Types.I32)];\n                     output = (Types.Tuple []); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"232\", \"6\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n              hi = { Types.col = \"71\"; line = \"67\" };\n              lo = { Types.col = \"17\"; line = \"67\" } };\n            ty = (Types.Tuple []) });\n    region_scope = { Types.data = Types.Node; id = \"19\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath\n            \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n      hi = { Types.col = \"73\"; line = \"67\" };\n      lo = { Types.col = \"8\"; line = \"67\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"232\", \"5\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath\n          \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n    hi = { Types.col = \"73\"; line = \"67\" };\n    lo = { Types.col = \"8\"; line = \"67\" } };\n  ty = (Types.Tuple []) }"

  in
  ()

let impl__Bio__set_retry_read_flag (self: t_Bio) =
  let _:Prims.unit =
    impl__Bio__set_flags #i32
      self
      (cast (Openssl3.v_BIO_FLAGS_READ |. Openssl3.v_BIO_FLAGS_SHOULD_RETRY <: u32) <: i32)
  in
  ()

let impl__Bio__set_retry_write_flag (self: t_Bio) =
  let _:Prims.unit =
    impl__Bio__set_flags #i32
      self
      (cast (Openssl3.v_BIO_FLAGS_WRITE |. Openssl3.v_BIO_FLAGS_SHOULD_RETRY <: u32) <: i32)
  in
  ()

let impl__Bio__get_tunnel (self: t_Bio) =
  Rust_primitives.Hax.failure "(RefMut) The mutation of this \027[1m&mut\027[0m is not allowed here."
    "{core::option::impl__map::<core::ptr::non_null::t_NonNull<sandwich::implementation::openssl3_impl::tunnel::ssl::t_Tunnel<lifetime!(something)>>,&mut sandwich::implementation::openssl3_impl::tunnel::ssl::t_Tunnel<lifetime!(something)>,arrow!(core::ptr::non_null::t_NonNull<sandwich::implementation::openssl3_impl::tunnel::ssl::t_Tunnel<lifetime!(something)>> -> &mut sandwich::implementation::openssl3_impl::tunnel::ssl::t_Tunnel<lifetime!(something)>)>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"core::ptr::non_null::impl_3__new\")::<sandwich::implementation::openssl3_impl::tunnel::ssl::t_Tunnel<lifetime!(something)>>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"core::ptr::mut_ptr::impl__cast::<\\n        core::ffi::t_c_void,\\n        sandwich::implementation::openssl3_impl::tunnel::ssl::t_Tunnel<\\n            lifetime!(something),\\n        >,\\n    >(\\n        rust_primitives::hax::failure(\\n            \\\"(AST import) Unsafe blocks are not allowed.\\\",\\n            \\\"{ Types.attributes = [];\\\\n  contents =\\\\n  Types.Block {\\\\n    expr =\\\\n    (Some { Types.attributes = [];\\\\n            contents =\\\\n            Types.Call {\\\\n              args =\\\\n              [{ Types.attributes = [];\\\\n                 contents =\\\\n                 Types.Call {\\\\n                   args =\\\\n                   [{ Types.attributes = [];\\\\n                      contents =\\\\n                      Types.Field {\\\\n                        field =\\\\n                        { Types.index = (0, 223); krate = \\\\\\\"sandwich\\\\\\\";\\\\n                          path =\\\\n                          [{ Types.data = (Types.TypeNs \\\\\\\"implementation\\\\\\\");\\\\n                             disambiguator = 0 };\\\\n                            { Types.data = (Types.TypeNs \\\\\\\"openssl3_impl\\\\\\\");\\\\n                              disambiguator = 0 };\\\\n                            { Types.data = (Types.TypeNs \\\\\\\"tunnel\\\\\\\");\\\\n                              disambiguator = 0 };\\\\n                            { Types.data = (Types.TypeNs \\\\\\\"bio_method\\\\\\\");\\\\n                              disambiguator = 0 };\\\\n                            { Types.data = (Types.TypeNs \\\\\\\"Bio\\\\\\\");\\\\n                              disambiguator = 0 };\\\\n                            { Types.data = (Types.ValueNs \\\\\\\"0\\\\\\\");\\\\n                              disambiguator = 0 }\\\\n                            ]\\\\n                          };\\\\n                        lhs =\\\\n                        { Types.attributes = [];\\\\n                          contents =\\\\n                          Types.Deref {\\\\n                            arg =\\\\n                            { Types.attributes = [];\\\\n                              contents =\\\\n                              Types.VarRef {\\\\n                                id =\\\\n                                { Types.id =\\\\n                                  { Types.local_id = \\\\\\\"2\\\\\\\";\\\\n                                    owner =\\\\n                                    { Types.index = (0, 233);\\\\n                                      krate = \\\\\\\"sandwich\\\\\\\";\\\\n                                      path =\\\\n                                      [{ Types.data =\\\\n                                         (Types.TypeNs \\\\\\\"implementation\\\\\\\");\\\\n                                         disambiguator = 0 };\\\\n                                        { Types.data =\\\\n                                          (Types.TypeNs \\\\\\\"openssl3_impl\\\\\\\");\\\\n                                          disambiguator = 0 };\\\\n                                        { Types.data =\\\\n                                          (Types.TypeNs \\\\\\\"tunnel\\\\\\\");\\\\n                                          disambiguator = 0 };\\\\n                                        { Types.data =\\\\n                                          (Types.TypeNs \\\\\\\"bio_method\\\\\\\");\\\\n                                          disambiguator = 0 };\\\\n                                        { Types.data = Types.Impl;\\\\n                                          disambiguator = 1 };\\\\n                                        { Types.data =\\\\n                                          (Types.ValueNs \\\\\\\"get_tunnel\\\\\\\");\\\\n                                          disambiguator = 0 }\\\\n                                        ]\\\\n                                      }\\\\n                                    };\\\\n                                  name = \\\\\\\"self\\\\\\\" }};\\\\n                              hir_id = None;\\\\n                              span =\\\\n                              { Types.filename =\\\\n                                (Types.Real\\\\n                                   (Types.LocalPath\\\\n                                      \\\\\\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\\\\\"));\\\\n                                hi = { Types.col = \\\\\\\"57\\\\\\\"; line = \\\\\\\"72\\\\\\\" };\\\\n                                lo = { Types.col = \\\\\\\"53\\\\\\\"; line = \\\\\\\"72\\\\\\\" } };\\\\n                              ty =\\\\n                              (Types.Ref\\\\n                                 ({ Types.kind = Types.ReErased },\\\\n                                  Types.Adt {\\\\n                                    def_id =\\\\n                                    { Types.index = (0, 221);\\\\n                                      krate = \\\\\\\"sandwich\\\\\\\";\\\\n                                      path =\\\\n                                      [{ Types.data =\\\\n                                         (Types.TypeNs \\\\\\\"implementation\\\\\\\");\\\\n                                         disambiguator = 0 };\\\\n                                        { Types.data =\\\\n                                          (Types.TypeNs \\\\\\\"openssl3_impl\\\\\\\");\\\\n                                          disambiguator = 0 };\\\\n                                        { Types.data =\\\\n                                          (Types.TypeNs \\\\\\\"tunnel\\\\\\\");\\\\n                                          disambiguator = 0 };\\\\n                                        { Types.data =\\\\n                                          (Types.TypeNs \\\\\\\"bio_method\\\\\\\");\\\\n                                          disambiguator = 0 };\\\\n                                        { Types.data = (Types.TypeNs \\\\\\\"Bio\\\\\\\");\\\\n                                          disambiguator = 0 }\\\\n                                        ]\\\\n                                      };\\\\n                                    generic_args = []; trait_refs = []},\\\\n                                  false))\\\\n                              }};\\\\n                          hir_id = (Some (\\\\\\\"233\\\\\\\", \\\\\\\"23\\\\\\\"));\\\\n                          span =\\\\n                          { Types.filename =\\\\n                            (Types.Real\\\\n                               (Types.LocalPath\\\\n                                  \\\\\\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\\\\\"));\\\\n                            hi = { Types.col = \\\\\\\"57\\\\\\\"; line = \\\\\\\"72\\\\\\\" };\\\\n                            lo = { Types.col = \\\\\\\"53\\\\\\\"; line = \\\\\\\"72\\\\\\\" } };\\\\n                          ty =\\\\n                          Types.Adt {\\\\n                            def_id =\\\\n                            { Types.index = (0, 221); krate = \\\\\\\"sandwich\\\\\\\";\\\\n                              path =\\\\n                              [{ Types.data = (Types.TypeNs \\\\\\\"implementation\\\\\\\");\\\\n                                 disambiguator = 0 };\\\\n                                { Types.data = (Types.TypeNs \\\\\\\"openssl3_impl\\\\\\\");\\\\n                                  disambiguator = 0 };\\\\n                                { Types.data = (Types.TypeNs \\\\\\\"tunnel\\\\\\\");\\\\n                                  disambiguator = 0 };\\\\n                                { Types.data = (Types.TypeNs \\\\\\\"bio_method\\\\\\\");\\\\n                                  disambiguator = 0 };\\\\n                                { Types.data = (Types.TypeNs \\\\\\\"Bio\\\\\\\");\\\\n                                  disambiguator = 0 }\\\\n                                ]\\\\n                              };\\\\n                            generic_args = []; trait_refs = []}\\\\n                          }};\\\\n                      hir_id = (Some (\\\\\\\"233\\\\\\\", \\\\\\\"22\\\\\\\"));\\\\n                      span =\\\\n                      { Types.filename =\\\\n                        (Types.Real\\\\n                           (Types.LocalPath\\\\n                              \\\\\\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\\\\\"));\\\\n                        hi = { Types.col = \\\\\\\"59\\\\\\\"; line = \\\\\\\"72\\\\\\\" };\\\\n                        lo = { Types.col = \\\\\\\"53\\\\\\\"; line = \\\\\\\"72\\\\\\\" } };\\\\n                      ty =\\\\n                      Types.Adt {\\\\n                        def_id =\\\\n                        { Types.index = (2, 2222); krate = \\\\\\\"core\\\\\\\";\\\\n                          path =\\\\n                          [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\");\\\\n                             disambiguator = 0 };\\\\n                            { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\");\\\\n                              disambiguator = 0 };\\\\n                            { Types.data = (Types.TypeNs \\\\\\\"NonNull\\\\\\\");\\\\n                              disambiguator = 0 }\\\\n                            ]\\\\n                          };\\\\n                        generic_args =\\\\n                        [(Types.Type\\\\n                            Types.Adt {\\\\n                              def_id =\\\\n                              { Types.index = (27, 20890);\\\\n                                krate = \\\\\\\"openssl3\\\\\\\";\\\\n                                path =\\\\n                                [{ Types.data = (Types.TypeNs \\\\\\\"bio_st\\\\\\\");\\\\n                                   disambiguator = 0 }\\\\n                                  ]\\\\n                                };\\\\n                              generic_args = []; trait_refs = []})\\\\n                          ];\\\\n                        trait_refs = []}\\\\n                      }\\\\n                     ];\\\\n                   bounds_impls = [];\\\\n                   fn_span =\\\\n                   { Types.filename =\\\\n                     (Types.Real\\\\n                        (Types.LocalPath\\\\n                           \\\\\\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\\\\\"));\\\\n                     hi = { Types.col = \\\\\\\"68\\\\\\\"; line = \\\\\\\"72\\\\\\\" };\\\\n                     lo = { Types.col = \\\\\\\"60\\\\\\\"; line = \\\\\\\"72\\\\\\\" } };\\\\n                   from_hir_call = true;\\\\n                   fun' =\\\\n                   { Types.attributes = [];\\\\n                     contents =\\\\n                     Types.GlobalName {\\\\n                       id =\\\\n                       { Types.index = (2, 2245); krate = \\\\\\\"core\\\\\\\";\\\\n                         path =\\\\n                         [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\");\\\\n                            disambiguator = 0 };\\\\n                           { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\");\\\\n                             disambiguator = 0 };\\\\n                           { Types.data = Types.Impl; disambiguator = 3 };\\\\n                           { Types.data = (Types.ValueNs \\\\\\\"as_ptr\\\\\\\");\\\\n                             disambiguator = 0 }\\\\n                           ]\\\\n                         }};\\\\n                     hir_id = None;\\\\n                     span =\\\\n                     { Types.filename =\\\\n                       (Types.Real\\\\n                          (Types.LocalPath\\\\n                             \\\\\\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\\\\\"));\\\\n                       hi = { Types.col = \\\\\\\"66\\\\\\\"; line = \\\\\\\"72\\\\\\\" };\\\\n                       lo = { Types.col = \\\\\\\"60\\\\\\\"; line = \\\\\\\"72\\\\\\\" } };\\\\n                     ty =\\\\n                     (Types.Arrow\\\\n                        { Types.bound_vars = [];\\\\n                          value =\\\\n                          { Types.abi = Types.Abi {todo = \\\\\\\"Rust\\\\\\\"};\\\\n                            c_variadic = false;\\\\n                            inputs =\\\\n                            [Types.Adt {\\\\n                               def_id =\\\\n                               { Types.index = (2, 2222); krate = \\\\\\\"core\\\\\\\";\\\\n                                 path =\\\\n                                 [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\");\\\\n                                    disambiguator = 0 };\\\\n                                   { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\");\\\\n                                     disambiguator = 0 };\\\\n                                   { Types.data = (Types.TypeNs \\\\\\\"NonNull\\\\\\\");\\\\n                                     disambiguator = 0 }\\\\n                                   ]\\\\n                                 };\\\\n                               generic_args =\\\\n                               [(Types.Type\\\\n                                   Types.Adt {\\\\n                                     def_id =\\\\n                                     { Types.index = (27, 20890);\\\\n                                       krate = \\\\\\\"openssl3\\\\\\\";\\\\n                                       path =\\\\n                                       [{ Types.data =\\\\n                                          (Types.TypeNs \\\\\\\"bio_st\\\\\\\");\\\\n                                          disambiguator = 0 }\\\\n                                         ]\\\\n                                       };\\\\n                                     generic_args = []; trait_refs = []})\\\\n                                 ];\\\\n                               trait_refs = []}\\\\n                              ];\\\\n                            output =\\\\n                            (Types.RawPtr\\\\n                               (Types.Adt {\\\\n                                  def_id =\\\\n                                  { Types.index = (27, 20890);\\\\n                                    krate = \\\\\\\"openssl3\\\\\\\";\\\\n                                    path =\\\\n                                    [{ Types.data = (Types.TypeNs \\\\\\\"bio_st\\\\\\\");\\\\n                                       disambiguator = 0 }\\\\n                                      ]\\\\n                                    };\\\\n                                  generic_args = []; trait_refs = []},\\\\n                                true));\\\\n                            safety = Types.Safe }\\\\n                          })\\\\n                     };\\\\n                   generic_args =\\\\n                   [(Types.Type\\\\n                       Types.Adt {\\\\n                         def_id =\\\\n                         { Types.index = (27, 20890); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                           path =\\\\n                           [{ Types.data = (Types.TypeNs \\\\\\\"bio_st\\\\\\\");\\\\n                              disambiguator = 0 }\\\\n                             ]\\\\n                           };\\\\n                         generic_args = []; trait_refs = []})\\\\n                     ];\\\\n                   trait = None;\\\\n                   ty =\\\\n                   (Types.Arrow\\\\n                      { Types.bound_vars = [];\\\\n                        value =\\\\n                        { Types.abi = Types.Abi {todo = \\\\\\\"Rust\\\\\\\"};\\\\n                          c_variadic = false;\\\\n                          inputs =\\\\n                          [Types.Adt {\\\\n                             def_id =\\\\n                             { Types.index = (2, 2222); krate = \\\\\\\"core\\\\\\\";\\\\n                               path =\\\\n                               [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\");\\\\n                                  disambiguator = 0 };\\\\n                                 { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\");\\\\n                                   disambiguator = 0 };\\\\n                                 { Types.data = (Types.TypeNs \\\\\\\"NonNull\\\\\\\");\\\\n                                   disambiguator = 0 }\\\\n                                 ]\\\\n                               };\\\\n                             generic_args =\\\\n                             [(Types.Type\\\\n                                 Types.Adt {\\\\n                                   def_id =\\\\n                                   { Types.index = (27, 20890);\\\\n                                     krate = \\\\\\\"openssl3\\\\\\\";\\\\n                                     path =\\\\n                                     [{ Types.data = (Types.TypeNs \\\\\\\"bio_st\\\\\\\");\\\\n                                        disambiguator = 0 }\\\\n                                       ]\\\\n                                     };\\\\n                                   generic_args = []; trait_refs = []})\\\\n                               ];\\\\n                             trait_refs = []}\\\\n                            ];\\\\n                          output =\\\\n                          (Types.RawPtr\\\\n                             (Types.Adt {\\\\n                                def_id =\\\\n                                { Types.index = (27, 20890);\\\\n                                  krate = \\\\\\\"openssl3\\\\\\\";\\\\n                                  path =\\\\n                                  [{ Types.data = (Types.TypeNs \\\\\\\"bio_st\\\\\\\");\\\\n                                     disambiguator = 0 }\\\\n                                    ]\\\\n                                  };\\\\n                                generic_args = []; trait_refs = []},\\\\n                              true));\\\\n                          safety = Types.Safe }\\\\n                        })};\\\\n                 hir_id = (Some (\\\\\\\"233\\\\\\\", \\\\\\\"20\\\\\\\"));\\\\n                 span =\\\\n                 { Types.filename =\\\\n                   (Types.Real\\\\n                      (Types.LocalPath\\\\n                         \\\\\\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\\\\\"));\\\\n                   hi = { Types.col = \\\\\\\"68\\\\\\\"; line = \\\\\\\"72\\\\\\\" };\\\\n                   lo = { Types.col = \\\\\\\"53\\\\\\\"; line = \\\\\\\"72\\\\\\\" } };\\\\n                 ty =\\\\n                 (Types.RawPtr\\\\n                    (Types.Adt {\\\\n                       def_id =\\\\n                       { Types.index = (27, 20890); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                         path =\\\\n                         [{ Types.data = (Types.TypeNs \\\\\\\"bio_st\\\\\\\");\\\\n                            disambiguator = 0 }\\\\n                           ]\\\\n                         };\\\\n                       generic_args = []; trait_refs = []},\\\\n                     true))\\\\n                 }\\\\n                ];\\\\n              bounds_impls = [];\\\\n              fn_span =\\\\n              { Types.filename =\\\\n                (Types.Real\\\\n                   (Types.LocalPath\\\\n                      \\\\\\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\\\\\"));\\\\n                hi = { Types.col = \\\\\\\"69\\\\\\\"; line = \\\\\\\"72\\\\\\\" };\\\\n                lo = { Types.col = \\\\\\\"30\\\\\\\"; line = \\\\\\\"72\\\\\\\" } };\\\\n              from_hir_call = true;\\\\n              fun' =\\\\n              { Types.attributes = [];\\\\n                contents =\\\\n                Types.GlobalName {\\\\n                  id =\\\\n                  { Types.index = (27, 12334); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                    path =\\\\n                    [{ Types.data = Types.ForeignMod; disambiguator = 531 };\\\\n                      { Types.data = (Types.ValueNs \\\\\\\"BIO_get_data\\\\\\\");\\\\n                        disambiguator = 0 }\\\\n                      ]\\\\n                    }};\\\\n                hir_id = None;\\\\n                span =\\\\n                { Types.filename =\\\\n                  (Types.Real\\\\n                     (Types.LocalPath\\\\n                        \\\\\\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\\\\\"));\\\\n                  hi = { Types.col = \\\\\\\"52\\\\\\\"; line = \\\\\\\"72\\\\\\\" };\\\\n                  lo = { Types.col = \\\\\\\"30\\\\\\\"; line = \\\\\\\"72\\\\\\\" } };\\\\n                ty =\\\\n                (Types.Arrow\\\\n                   { Types.bound_vars = [];\\\\n                     value =\\\\n                     { Types.abi = Types.Abi {todo = \\\\\\\"C { unwind: false }\\\\\\\"};\\\\n                       c_variadic = false;\\\\n                       inputs =\\\\n                       [(Types.RawPtr\\\\n                           (Types.Adt {\\\\n                              def_id =\\\\n                              { Types.index = (27, 20890);\\\\n                                krate = \\\\\\\"openssl3\\\\\\\";\\\\n                                path =\\\\n                                [{ Types.data = (Types.TypeNs \\\\\\\"bio_st\\\\\\\");\\\\n                                   disambiguator = 0 }\\\\n                                  ]\\\\n                                };\\\\n                              generic_args = []; trait_refs = []},\\\\n                            true))\\\\n                         ];\\\\n                       output =\\\\n                       (Types.RawPtr\\\\n                          (Types.Adt {\\\\n                             def_id =\\\\n                             { Types.index = (2, 5307); krate = \\\\\\\"core\\\\\\\";\\\\n                               path =\\\\n                               [{ Types.data = (Types.TypeNs \\\\\\\"ffi\\\\\\\");\\\\n                                  disambiguator = 0 };\\\\n                                 { Types.data = (Types.TypeNs \\\\\\\"c_void\\\\\\\");\\\\n                                   disambiguator = 0 }\\\\n                                 ]\\\\n                               };\\\\n                             generic_args = []; trait_refs = []},\\\\n                           true));\\\\n                       safety = Types.Unsafe }\\\\n                     })\\\\n                };\\\\n              generic_args = []; trait = None;\\\\n              ty =\\\\n              (Types.Arrow\\\\n                 { Types.bound_vars = [];\\\\n                   value =\\\\n                   { Types.abi = Types.Abi {todo = \\\\\\\"C { unwind: false }\\\\\\\"};\\\\n                     c_variadic = false;\\\\n                     inputs =\\\\n                     [(Types.RawPtr\\\\n                         (Types.Adt {\\\\n                            def_id =\\\\n                            { Types.index = (27, 20890); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                              path =\\\\n                              [{ Types.data = (Types.TypeNs \\\\\\\"bio_st\\\\\\\");\\\\n                                 disambiguator = 0 }\\\\n                                ]\\\\n                              };\\\\n                            generic_args = []; trait_refs = []},\\\\n                          true))\\\\n                       ];\\\\n                     output =\\\\n                     (Types.RawPtr\\\\n                        (Types.Adt {\\\\n                           def_id =\\\\n                           { Types.index = (2, 5307); krate = \\\\\\\"core\\\\\\\";\\\\n                             path =\\\\n                             [{ Types.data = (Types.TypeNs \\\\\\\"ffi\\\\\\\");\\\\n                                disambiguator = 0 };\\\\n                               { Types.data = (Types.TypeNs \\\\\\\"c_void\\\\\\\");\\\\n                                 disambiguator = 0 }\\\\n                               ]\\\\n                             };\\\\n                           generic_args = []; trait_refs = []},\\\\n                         true));\\\\n                     safety = Types.Unsafe }\\\\n                   })};\\\\n            hir_id = (Some (\\\\\\\"233\\\\\\\", \\\\\\\"16\\\\\\\"));\\\\n            span =\\\\n            { Types.filename =\\\\n              (Types.Real\\\\n                 (Types.LocalPath\\\\n                    \\\\\\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\\\\\"));\\\\n              hi = { Types.col = \\\\\\\"69\\\\\\\"; line = \\\\\\\"72\\\\\\\" };\\\\n              lo = { Types.col = \\\\\\\"30\\\\\\\"; line = \\\\\\\"72\\\\\\\" } };\\\\n            ty =\\\\n            (Types.RawPtr\\\\n               (Types.Adt {\\\\n                  def_id =\\\\n                  { Types.index = (2, 5307); krate = \\\\\\\"core\\\\\\\";\\\\n                    path =\\\\n                    [{ Types.data = (Types.TypeNs \\\\\\\"ffi\\\\\\\"); disambiguator = 0 };\\\\n                      { Types.data = (Types.TypeNs \\\\\\\"c_void\\\\\\\");\\\\n                        disambiguator = 0 }\\\\n                      ]\\\\n                    };\\\\n                  generic_args = []; trait_refs = []},\\\\n                true))\\\\n            });\\\\n    region_scope = { Types.data = Types.Node; id = \\\\\\\"25\\\\\\\" };\\\\n    safety_mode = Types.ExplicitUnsafe;\\\\n    span =\\\\n    { Types.filename =\\\\n      (Types.Real\\\\n         (Types.LocalPath\\\\n            \\\\\\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\\\\\"));\\\\n      hi = { Types.col = \\\\\\\"71\\\\\\\"; line = \\\\\\\"72\\\\\\\" };\\\\n      lo = { Types.col = \\\\\\\"21\\\\\\\"; line = \\\\\\\"72\\\\\\\" } };\\\\n    stmts = []; targeted_by_break = false};\\\\n  hir_id = (Some (\\\\\\\"233\\\\\\\", \\\\\\\"15\\\\\\\"));\\\\n  span =\\\\n  { Types.filename =\\\\n    (Types.Real\\\\n       (Types.LocalPath\\\\n          \\\\\\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\\\\\"));\\\\n    hi = { Types.col = \\\\\\\"71\\\\\\\"; line = \\\\\\\"72\\\\\\\" };\\\\n    lo = { Types.col = \\\\\\\"21\\\\\\\"; line = \\\\\\\"72\\\\\\\" } };\\\\n  ty =\\\\n  (Types.RawPtr\\\\n     (Types.Adt {\\\\n        def_id =\\\\n        { Types.index = (2, 5307); krate = \\\\\\\"core\\\\\\\";\\\\n          path =\\\\n          [{ Types.data = (Types.TypeNs \\\\\\\"ffi\\\\\\\"); disambiguator = 0 };\\\\n            { Types.data = (Types.TypeNs \\\\\\\"c_void\\\\\\\"); disambiguator = 0 }]\\\\n          };\\\\n        generic_args = []; trait_refs = []},\\\\n      true))\\\\n  }\\\",\\n        ),\\n    )\")),(|mut p| {&mut (deref(rust_primitives::hax::failure(\"(AST import) Unsafe blocks are not allowed.\",\"{ Types.attributes = [];\\n  contents =\\n  Types.Block {\\n    expr =\\n    (Some { Types.attributes = [];\\n            contents =\\n            Types.Call {\\n              args =\\n              [{ Types.attributes = [];\\n                 contents =\\n                 Types.Borrow {\\n                   arg =\\n                   { Types.attributes = [];\\n                     contents =\\n                     Types.VarRef {\\n                       id =\\n                       { Types.id =\\n                         { Types.local_id = \\\"28\\\";\\n                           owner =\\n                           { Types.index = (0, 233); krate = \\\"sandwich\\\";\\n                             path =\\n                             [{ Types.data = (Types.TypeNs \\\"implementation\\\");\\n                                disambiguator = 0 };\\n                               { Types.data = (Types.TypeNs \\\"openssl3_impl\\\");\\n                                 disambiguator = 0 };\\n                               { Types.data = (Types.TypeNs \\\"tunnel\\\");\\n                                 disambiguator = 0 };\\n                               { Types.data = (Types.TypeNs \\\"bio_method\\\");\\n                                 disambiguator = 0 };\\n                               { Types.data = Types.Impl; disambiguator = 1 };\\n                               { Types.data = (Types.ValueNs \\\"get_tunnel\\\");\\n                                 disambiguator = 0 }\\n                               ]\\n                             }\\n                           };\\n                         name = \\\"p\\\" }};\\n                     hir_id = None;\\n                     span =\\n                     { Types.filename =\\n                       (Types.Real\\n                          (Types.LocalPath\\n                             \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                       hi = { Types.col = \\\"35\\\"; line = \\\"73\\\" };\\n                       lo = { Types.col = \\\"34\\\"; line = \\\"73\\\" } };\\n                     ty =\\n                     Types.Adt {\\n                       def_id =\\n                       { Types.index = (2, 2222); krate = \\\"core\\\";\\n                         path =\\n                         [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                            disambiguator = 0 };\\n                           { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                             disambiguator = 0 };\\n                           { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                             disambiguator = 0 }\\n                           ]\\n                         };\\n                       generic_args =\\n                       [(Types.Type\\n                           Types.Adt {\\n                             def_id =\\n                             { Types.index = (0, 425); krate = \\\"sandwich\\\";\\n                               path =\\n                               [{ Types.data =\\n                                  (Types.TypeNs \\\"implementation\\\");\\n                                  disambiguator = 0 };\\n                                 { Types.data =\\n                                   (Types.TypeNs \\\"openssl3_impl\\\");\\n                                   disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"tunnel\\\");\\n                                   disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"ssl\\\");\\n                                   disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"Tunnel\\\");\\n                                   disambiguator = 0 }\\n                                 ]\\n                               };\\n                             generic_args =\\n                             [(Types.Lifetime { Types.kind = Types.ReErased })\\n                               ];\\n                             trait_refs = []})\\n                         ];\\n                       trait_refs = []}\\n                     };\\n                   borrow_kind = Types.Mut {kind = Types.TwoPhaseBorrow}};\\n                 hir_id = (Some (\\\"233\\\", \\\"32\\\"));\\n                 span =\\n                 { Types.filename =\\n                   (Types.Real\\n                      (Types.LocalPath\\n                         \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                   hi = { Types.col = \\\"35\\\"; line = \\\"73\\\" };\\n                   lo = { Types.col = \\\"34\\\"; line = \\\"73\\\" } };\\n                 ty =\\n                 (Types.Ref\\n                    ({ Types.kind = Types.ReErased },\\n                     Types.Adt {\\n                       def_id =\\n                       { Types.index = (2, 2222); krate = \\\"core\\\";\\n                         path =\\n                         [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                            disambiguator = 0 };\\n                           { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                             disambiguator = 0 };\\n                           { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                             disambiguator = 0 }\\n                           ]\\n                         };\\n                       generic_args =\\n                       [(Types.Type\\n                           Types.Adt {\\n                             def_id =\\n                             { Types.index = (0, 425); krate = \\\"sandwich\\\";\\n                               path =\\n                               [{ Types.data =\\n                                  (Types.TypeNs \\\"implementation\\\");\\n                                  disambiguator = 0 };\\n                                 { Types.data =\\n                                   (Types.TypeNs \\\"openssl3_impl\\\");\\n                                   disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"tunnel\\\");\\n                                   disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"ssl\\\");\\n                                   disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"Tunnel\\\");\\n                                   disambiguator = 0 }\\n                                 ]\\n                               };\\n                             generic_args =\\n                             [(Types.Lifetime { Types.kind = Types.ReErased })\\n                               ];\\n                             trait_refs = []})\\n                         ];\\n                       trait_refs = []},\\n                     true))\\n                 }\\n                ];\\n              bounds_impls = [];\\n              fn_span =\\n              { Types.filename =\\n                (Types.Real\\n                   (Types.LocalPath\\n                      \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                hi = { Types.col = \\\"44\\\"; line = \\\"73\\\" };\\n                lo = { Types.col = \\\"36\\\"; line = \\\"73\\\" } };\\n              from_hir_call = true;\\n              fun' =\\n              { Types.attributes = [];\\n                contents =\\n                Types.GlobalName {\\n                  id =\\n                  { Types.index = (2, 2248); krate = \\\"core\\\";\\n                    path =\\n                    [{ Types.data = (Types.TypeNs \\\"ptr\\\"); disambiguator = 0 };\\n                      { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                        disambiguator = 0 };\\n                      { Types.data = Types.Impl; disambiguator = 3 };\\n                      { Types.data = (Types.ValueNs \\\"as_mut\\\");\\n                        disambiguator = 0 }\\n                      ]\\n                    }};\\n                hir_id = None;\\n                span =\\n                { Types.filename =\\n                  (Types.Real\\n                     (Types.LocalPath\\n                        \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n                  hi = { Types.col = \\\"42\\\"; line = \\\"73\\\" };\\n                  lo = { Types.col = \\\"36\\\"; line = \\\"73\\\" } };\\n                ty =\\n                (Types.Arrow\\n                   { Types.bound_vars =\\n                     [(Types.Region\\n                         (Types.BrNamed\\n                            ({ Types.index = (2, 55182); krate = \\\"core\\\";\\n                               path =\\n                               [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                  disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                                   disambiguator = 0 };\\n                                 { Types.data = Types.Impl; disambiguator = 3\\n                                   };\\n                                 { Types.data = (Types.ValueNs \\\"as_mut\\\");\\n                                   disambiguator = 0 };\\n                                 { Types.data = (Types.LifetimeNs \\\"'_\\\");\\n                                   disambiguator = 0 }\\n                                 ]\\n                               },\\n                             \\\"'_\\\")))\\n                       ];\\n                     value =\\n                     { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                       c_variadic = false;\\n                       inputs =\\n                       [(Types.Ref\\n                           ({ Types.kind =\\n                              (Types.ReBound\\n                                 (\\\"0\\\",\\n                                  { Types.kind =\\n                                    (Types.BrNamed\\n                                       ({ Types.index = (2, 55182);\\n                                          krate = \\\"core\\\";\\n                                          path =\\n                                          [{ Types.data =\\n                                             (Types.TypeNs \\\"ptr\\\");\\n                                             disambiguator = 0 };\\n                                            { Types.data =\\n                                              (Types.TypeNs \\\"non_null\\\");\\n                                              disambiguator = 0 };\\n                                            { Types.data = Types.Impl;\\n                                              disambiguator = 3 };\\n                                            { Types.data =\\n                                              (Types.ValueNs \\\"as_mut\\\");\\n                                              disambiguator = 0 };\\n                                            { Types.data =\\n                                              (Types.LifetimeNs \\\"'_\\\");\\n                                              disambiguator = 0 }\\n                                            ]\\n                                          },\\n                                        \\\"'_\\\"));\\n                                    var = \\\"0\\\" }))\\n                              },\\n                            Types.Adt {\\n                              def_id =\\n                              { Types.index = (2, 2222); krate = \\\"core\\\";\\n                                path =\\n                                [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                   disambiguator = 0 };\\n                                  { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                                    disambiguator = 0 };\\n                                  { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                                    disambiguator = 0 }\\n                                  ]\\n                                };\\n                              generic_args =\\n                              [(Types.Type\\n                                  Types.Adt {\\n                                    def_id =\\n                                    { Types.index = (0, 425);\\n                                      krate = \\\"sandwich\\\";\\n                                      path =\\n                                      [{ Types.data =\\n                                         (Types.TypeNs \\\"implementation\\\");\\n                                         disambiguator = 0 };\\n                                        { Types.data =\\n                                          (Types.TypeNs \\\"openssl3_impl\\\");\\n                                          disambiguator = 0 };\\n                                        { Types.data =\\n                                          (Types.TypeNs \\\"tunnel\\\");\\n                                          disambiguator = 0 };\\n                                        { Types.data = (Types.TypeNs \\\"ssl\\\");\\n                                          disambiguator = 0 };\\n                                        { Types.data =\\n                                          (Types.TypeNs \\\"Tunnel\\\");\\n                                          disambiguator = 0 }\\n                                        ]\\n                                      };\\n                                    generic_args =\\n                                    [(Types.Lifetime\\n                                        { Types.kind = Types.ReErased })\\n                                      ];\\n                                    trait_refs = []})\\n                                ];\\n                              trait_refs = []},\\n                            true))\\n                         ];\\n                       output =\\n                       (Types.Ref\\n                          ({ Types.kind = Types.ReErased },\\n                           Types.Adt {\\n                             def_id =\\n                             { Types.index = (0, 425); krate = \\\"sandwich\\\";\\n                               path =\\n                               [{ Types.data =\\n                                  (Types.TypeNs \\\"implementation\\\");\\n                                  disambiguator = 0 };\\n                                 { Types.data =\\n                                   (Types.TypeNs \\\"openssl3_impl\\\");\\n                                   disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"tunnel\\\");\\n                                   disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"ssl\\\");\\n                                   disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"Tunnel\\\");\\n                                   disambiguator = 0 }\\n                                 ]\\n                               };\\n                             generic_args =\\n                             [(Types.Lifetime { Types.kind = Types.ReErased })\\n                               ];\\n                             trait_refs = []},\\n                           true));\\n                       safety = Types.Unsafe }\\n                     })\\n                };\\n              generic_args =\\n              [(Types.Type\\n                  Types.Adt {\\n                    def_id =\\n                    { Types.index = (0, 425); krate = \\\"sandwich\\\";\\n                      path =\\n                      [{ Types.data = (Types.TypeNs \\\"implementation\\\");\\n                         disambiguator = 0 };\\n                        { Types.data = (Types.TypeNs \\\"openssl3_impl\\\");\\n                          disambiguator = 0 };\\n                        { Types.data = (Types.TypeNs \\\"tunnel\\\");\\n                          disambiguator = 0 };\\n                        { Types.data = (Types.TypeNs \\\"ssl\\\");\\n                          disambiguator = 0 };\\n                        { Types.data = (Types.TypeNs \\\"Tunnel\\\");\\n                          disambiguator = 0 }\\n                        ]\\n                      };\\n                    generic_args =\\n                    [(Types.Lifetime { Types.kind = Types.ReErased })];\\n                    trait_refs = []});\\n                (Types.Lifetime { Types.kind = Types.ReErased })];\\n              trait = None;\\n              ty =\\n              (Types.Arrow\\n                 { Types.bound_vars =\\n                   [(Types.Region\\n                       (Types.BrNamed\\n                          ({ Types.index = (2, 55182); krate = \\\"core\\\";\\n                             path =\\n                             [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                disambiguator = 0 };\\n                               { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                                 disambiguator = 0 };\\n                               { Types.data = Types.Impl; disambiguator = 3 };\\n                               { Types.data = (Types.ValueNs \\\"as_mut\\\");\\n                                 disambiguator = 0 };\\n                               { Types.data = (Types.LifetimeNs \\\"'_\\\");\\n                                 disambiguator = 0 }\\n                               ]\\n                             },\\n                           \\\"'_\\\")))\\n                     ];\\n                   value =\\n                   { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                     c_variadic = false;\\n                     inputs =\\n                     [(Types.Ref\\n                         ({ Types.kind =\\n                            (Types.ReBound\\n                               (\\\"0\\\",\\n                                { Types.kind =\\n                                  (Types.BrNamed\\n                                     ({ Types.index = (2, 55182);\\n                                        krate = \\\"core\\\";\\n                                        path =\\n                                        [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                           disambiguator = 0 };\\n                                          { Types.data =\\n                                            (Types.TypeNs \\\"non_null\\\");\\n                                            disambiguator = 0 };\\n                                          { Types.data = Types.Impl;\\n                                            disambiguator = 3 };\\n                                          { Types.data =\\n                                            (Types.ValueNs \\\"as_mut\\\");\\n                                            disambiguator = 0 };\\n                                          { Types.data =\\n                                            (Types.LifetimeNs \\\"'_\\\");\\n                                            disambiguator = 0 }\\n                                          ]\\n                                        },\\n                                      \\\"'_\\\"));\\n                                  var = \\\"0\\\" }))\\n                            },\\n                          Types.Adt {\\n                            def_id =\\n                            { Types.index = (2, 2222); krate = \\\"core\\\";\\n                              path =\\n                              [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                 disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                                  disambiguator = 0 }\\n                                ]\\n                              };\\n                            generic_args =\\n                            [(Types.Type\\n                                Types.Adt {\\n                                  def_id =\\n                                  { Types.index = (0, 425);\\n                                    krate = \\\"sandwich\\\";\\n                                    path =\\n                                    [{ Types.data =\\n                                       (Types.TypeNs \\\"implementation\\\");\\n                                       disambiguator = 0 };\\n                                      { Types.data =\\n                                        (Types.TypeNs \\\"openssl3_impl\\\");\\n                                        disambiguator = 0 };\\n                                      { Types.data = (Types.TypeNs \\\"tunnel\\\");\\n                                        disambiguator = 0 };\\n                                      { Types.data = (Types.TypeNs \\\"ssl\\\");\\n                                        disambiguator = 0 };\\n                                      { Types.data = (Types.TypeNs \\\"Tunnel\\\");\\n                                        disambiguator = 0 }\\n                                      ]\\n                                    };\\n                                  generic_args =\\n                                  [(Types.Lifetime\\n                                      { Types.kind = Types.ReErased })\\n                                    ];\\n                                  trait_refs = []})\\n                              ];\\n                            trait_refs = []},\\n                          true))\\n                       ];\\n                     output =\\n                     (Types.Ref\\n                        ({ Types.kind = Types.ReErased },\\n                         Types.Adt {\\n                           def_id =\\n                           { Types.index = (0, 425); krate = \\\"sandwich\\\";\\n                             path =\\n                             [{ Types.data = (Types.TypeNs \\\"implementation\\\");\\n                                disambiguator = 0 };\\n                               { Types.data = (Types.TypeNs \\\"openssl3_impl\\\");\\n                                 disambiguator = 0 };\\n                               { Types.data = (Types.TypeNs \\\"tunnel\\\");\\n                                 disambiguator = 0 };\\n                               { Types.data = (Types.TypeNs \\\"ssl\\\");\\n                                 disambiguator = 0 };\\n                               { Types.data = (Types.TypeNs \\\"Tunnel\\\");\\n                                 disambiguator = 0 }\\n                               ]\\n                             };\\n                           generic_args =\\n                           [(Types.Lifetime { Types.kind = Types.ReErased })];\\n                           trait_refs = []},\\n                         true));\\n                     safety = Types.Unsafe }\\n                   })};\\n            hir_id = (Some (\\\"233\\\", \\\"30\\\"));\\n            span =\\n            { Types.filename =\\n              (Types.Real\\n                 (Types.LocalPath\\n                    \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n              hi = { Types.col = \\\"44\\\"; line = \\\"73\\\" };\\n              lo = { Types.col = \\\"34\\\"; line = \\\"73\\\" } };\\n            ty =\\n            (Types.Ref\\n               ({ Types.kind = Types.ReErased },\\n                Types.Adt {\\n                  def_id =\\n                  { Types.index = (0, 425); krate = \\\"sandwich\\\";\\n                    path =\\n                    [{ Types.data = (Types.TypeNs \\\"implementation\\\");\\n                       disambiguator = 0 };\\n                      { Types.data = (Types.TypeNs \\\"openssl3_impl\\\");\\n                        disambiguator = 0 };\\n                      { Types.data = (Types.TypeNs \\\"tunnel\\\");\\n                        disambiguator = 0 };\\n                      { Types.data = (Types.TypeNs \\\"ssl\\\"); disambiguator = 0\\n                        };\\n                      { Types.data = (Types.TypeNs \\\"Tunnel\\\");\\n                        disambiguator = 0 }\\n                      ]\\n                    };\\n                  generic_args =\\n                  [(Types.Lifetime { Types.kind = Types.ReErased })];\\n                  trait_refs = []},\\n                true))\\n            });\\n    region_scope = { Types.data = Types.Node; id = \\\"34\\\" };\\n    safety_mode = Types.ExplicitUnsafe;\\n    span =\\n    { Types.filename =\\n      (Types.Real\\n         (Types.LocalPath\\n            \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n      hi = { Types.col = \\\"46\\\"; line = \\\"73\\\" };\\n      lo = { Types.col = \\\"25\\\"; line = \\\"73\\\" } };\\n    stmts = []; targeted_by_break = false};\\n  hir_id = None;\\n  span =\\n  { Types.filename =\\n    (Types.Real\\n       (Types.LocalPath\\n          \\\"rust/implementation/openssl3_impl/tunnel/bio_method.rs\\\"));\\n    hi = { Types.col = \\\"44\\\"; line = \\\"73\\\" };\\n    lo = { Types.col = \\\"34\\\"; line = \\\"73\\\" } };\\n  ty =\\n  (Types.Ref\\n     ({ Types.kind = Types.ReErased },\\n      Types.Adt {\\n        def_id =\\n        { Types.index = (0, 425); krate = \\\"sandwich\\\";\\n          path =\\n          [{ Types.data = (Types.TypeNs \\\"implementation\\\"); disambiguator = 0\\n             };\\n            { Types.data = (Types.TypeNs \\\"openssl3_impl\\\"); disambiguator = 0\\n              };\\n            { Types.data = (Types.TypeNs \\\"tunnel\\\"); disambiguator = 0 };\\n            { Types.data = (Types.TypeNs \\\"ssl\\\"); disambiguator = 0 };\\n            { Types.data = (Types.TypeNs \\\"Tunnel\\\"); disambiguator = 0 }]\\n          };\\n        generic_args = [(Types.Lifetime { Types.kind = Types.ReErased })];\\n        trait_refs = []},\\n      true))\\n  }\")))}))}"

let impl__Bio__flush (self: t_Bio) =
  Rust_primitives.Hax.failure "(RefMut) The mutation of this \027[1m&mut\027[0m is not allowed here."
    "{\n        let tun: &mut sandwich::implementation::openssl3_impl::tunnel::ssl::t_Tunnel<\n            lifetime!(something),\n        > = {\n            (match (core::option::impl__ok_or::<\n                &mut sandwich::implementation::openssl3_impl::tunnel::ssl::t_Tunnel<\n                    lifetime!(something),\n                >,\n                sandwich_proto::io::t_IOError,\n            >(\n                sandwich::implementation::openssl3_impl::tunnel::bio_method::impl__Bio__get_tunnel::<\n                    lifetime!(something),\n                >(&(deref(self))),\n                sandwich_proto::io::IOError_IOERROR_SYSTEM_ERROR(),\n            )) {\n                core::result::Result_Ok(ok) => ok,\n                core::result::Result_Err(err) => (return core::result::Result_Err(err)),\n            })\n        };\n        {\n            core::result::impl__map_err::<\n                tuple0,\n                std::io::error::t_Error,\n                sandwich_proto::io::t_IOError,\n                arrow!(std::io::error::t_Error -> sandwich_proto::io::t_IOError),\n            >(\n                std::io::f_flush(\n                    &mut (proj_sandwich::implementation::openssl3_impl::tunnel::ssl::f_io(\n                        deref(tun),\n                    )),\n                ),\n                (|e| { sandwich::io::error::f_into_io_error(e) }),\n            )\n        }\n    }"

let impl__Bio__synchronize_states
      (self: t_Bio)
      (tun: Sandwich.Implementation.Openssl3_impl.Tunnel.Ssl.t_Tunnel)
     =
  let tun, hax_temp_output:(Sandwich.Implementation.Openssl3_impl.Tunnel.Ssl.t_Tunnel & Prims.unit)
  =
    if
      tun.Sandwich.Implementation.Openssl3_impl.Tunnel.Ssl.f_state <>.
      (Sandwich_proto.Tunnel.State_STATE_HANDSHAKE_DONE <: Sandwich_proto.Tunnel.t_State)
    then
      match impl__Bio__get_ssl self with
      | Core.Result.Result_Ok ssl ->
        let _:Prims.unit =
          if true
          then
            let _:Prims.unit =
              Hax_lib.v_assert (ssl =.
                  (Sandwich.Support.Pimpl.impl_2__as_nonnull #Openssl3.t_ssl_st
                      tun.Sandwich.Implementation.Openssl3_impl.Tunnel.Ssl.f_ssl
                    <:
                    Core.Ptr.Non_null.t_NonNull Openssl3.t_ssl_st)
                  <:
                  bool)
            in
            ()
        in
        if
          (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
              "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.PointerCoercion {cast = Types.MutToConstPointer;\n                   source =\n                   { Types.attributes = [];\n                     contents =\n                     Types.Call {\n                       args =\n                       [{ Types.attributes = [];\n                          contents =\n                          Types.VarRef {\n                            id =\n                            { Types.id =\n                              { Types.local_id = \"18\";\n                                owner =\n                                { Types.index = (0, 237); krate = \"sandwich\";\n                                  path =\n                                  [{ Types.data =\n                                     (Types.TypeNs \"implementation\");\n                                     disambiguator = 0 };\n                                    { Types.data =\n                                      (Types.TypeNs \"openssl3_impl\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"tunnel\");\n                                      disambiguator = 0 };\n                                    { Types.data =\n                                      (Types.TypeNs \"bio_method\");\n                                      disambiguator = 0 };\n                                    { Types.data = Types.Impl;\n                                      disambiguator = 1 };\n                                    { Types.data =\n                                      (Types.ValueNs \"synchronize_states\");\n                                      disambiguator = 0 }\n                                    ]\n                                  }\n                                };\n                              name = \"ssl\" }};\n                          hir_id = (Some (\"237\", \"59\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                            hi = { Types.col = \"55\"; line = \"100\" };\n                            lo = { Types.col = \"52\"; line = \"100\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (2, 2222); krate = \"core\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ptr\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"non_null\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"NonNull\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args =\n                            [(Types.Type\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21394);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []})\n                              ];\n                            trait_refs = []}\n                          }\n                         ];\n                       bounds_impls = [];\n                       fn_span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                         hi = { Types.col = \"64\"; line = \"100\" };\n                         lo = { Types.col = \"56\"; line = \"100\" } };\n                       from_hir_call = true;\n                       fun' =\n                       { Types.attributes = [];\n                         contents =\n                         Types.GlobalName {\n                           id =\n                           { Types.index = (2, 2245); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ptr\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"non_null\");\n                                 disambiguator = 0 };\n                               { Types.data = Types.Impl; disambiguator = 3 };\n                               { Types.data = (Types.ValueNs \"as_ptr\");\n                                 disambiguator = 0 }\n                               ]\n                             }};\n                         hir_id = None;\n                         span =\n                         { Types.filename =\n                           (Types.Real\n                              (Types.LocalPath\n                                 \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                           hi = { Types.col = \"62\"; line = \"100\" };\n                           lo = { Types.col = \"56\"; line = \"100\" } };\n                         ty =\n                         (Types.Arrow\n                            { Types.bound_vars = [];\n                              value =\n                              { Types.abi = Types.Abi {todo = \"Rust\"};\n                                c_variadic = false;\n                                inputs =\n                                [Types.Adt {\n                                   def_id =\n                                   { Types.index = (2, 2222); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ptr\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"non_null\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"NonNull\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type\n                                       Types.Adt {\n                                         def_id =\n                                         { Types.index = (27, 21394);\n                                           krate = \"openssl3\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"ssl_st\");\n                                              disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args = []; trait_refs = []})\n                                     ];\n                                   trait_refs = []}\n                                  ];\n                                output =\n                                (Types.RawPtr\n                                   (Types.Adt {\n                                      def_id =\n                                      { Types.index = (27, 21394);\n                                        krate = \"openssl3\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"ssl_st\");\n                                           disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args = []; trait_refs = []},\n                                    true));\n                                safety = Types.Safe }\n                              })\n                         };\n                       generic_args =\n                       [(Types.Type\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (27, 21394); krate = \"openssl3\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                  disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []})\n                         ];\n                       trait = None;\n                       ty =\n                       (Types.Arrow\n                          { Types.bound_vars = [];\n                            value =\n                            { Types.abi = Types.Abi {todo = \"Rust\"};\n                              c_variadic = false;\n                              inputs =\n                              [Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 2222); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ptr\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"non_null\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"NonNull\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args =\n                                 [(Types.Type\n                                     Types.Adt {\n                                       def_id =\n                                       { Types.index = (27, 21394);\n                                         krate = \"openssl3\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"ssl_st\");\n                                            disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args = []; trait_refs = []})\n                                   ];\n                                 trait_refs = []}\n                                ];\n                              output =\n                              (Types.RawPtr\n                                 (Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21394);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  true));\n                              safety = Types.Safe }\n                            })};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                       hi = { Types.col = \"64\"; line = \"100\" };\n                       lo = { Types.col = \"52\"; line = \"100\" } };\n                     ty =\n                     (Types.RawPtr\n                        (Types.Adt {\n                           def_id =\n                           { Types.index = (27, 21394); krate = \"openssl3\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                disambiguator = 0 }\n                               ]\n                             };\n                           generic_args = []; trait_refs = []},\n                         true))\n                     }};\n                 hir_id = (Some (\"237\", \"57\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                   hi = { Types.col = \"64\"; line = \"100\" };\n                   lo = { Types.col = \"52\"; line = \"100\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21394); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     false))\n                 }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                hi = { Types.col = \"65\"; line = \"100\" };\n                lo = { Types.col = \"28\"; line = \"100\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18703); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3451 };\n                      { Types.data = (Types.ValueNs \"SSL_get_state\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n                  hi = { Types.col = \"51\"; line = \"100\" };\n                  lo = { Types.col = \"28\"; line = \"100\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21394);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            false))\n                         ];\n                       output = (Types.Uint Types.U32); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21394); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          false))\n                       ];\n                     output = (Types.Uint Types.U32); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"237\", \"53\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n              hi = { Types.col = \"65\"; line = \"100\" };\n              lo = { Types.col = \"28\"; line = \"100\" } };\n            ty = (Types.Uint Types.U32) });\n    region_scope = { Types.data = Types.Node; id = \"61\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath\n            \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n      hi = { Types.col = \"67\"; line = \"100\" };\n      lo = { Types.col = \"19\"; line = \"100\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"237\", \"52\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath\n          \"rust/implementation/openssl3_impl/tunnel/bio_method.rs\"));\n    hi = { Types.col = \"67\"; line = \"100\" };\n    lo = { Types.col = \"19\"; line = \"100\" } };\n  ty = (Types.Uint Types.U32) }"

            <:
            u32) =.
          Openssl3.v_OSSL_HANDSHAKE_STATE_TLS_ST_OK
        then
          let tun:Sandwich.Implementation.Openssl3_impl.Tunnel.Ssl.t_Tunnel =
            {
              tun with
              Sandwich.Implementation.Openssl3_impl.Tunnel.Ssl.f_state
              =
              Sandwich_proto.Tunnel.State_STATE_HANDSHAKE_DONE <: Sandwich_proto.Tunnel.t_State
            }
            <:
            Sandwich.Implementation.Openssl3_impl.Tunnel.Ssl.t_Tunnel
          in
          tun, () <: (Sandwich.Implementation.Openssl3_impl.Tunnel.Ssl.t_Tunnel & Prims.unit)
        else tun, () <: (Sandwich.Implementation.Openssl3_impl.Tunnel.Ssl.t_Tunnel & Prims.unit)
      | _ -> tun, () <: (Sandwich.Implementation.Openssl3_impl.Tunnel.Ssl.t_Tunnel & Prims.unit)
    else tun, () <: (Sandwich.Implementation.Openssl3_impl.Tunnel.Ssl.t_Tunnel & Prims.unit)
  in
  tun

let impl__Bio__read (self: t_Bio) (buffer: t_Slice u8) =
  Rust_primitives.Hax.failure "(RefMut) The mutation of this \027[1m&mut\027[0m is not allowed here."
    "{\n        let tun: &mut sandwich::implementation::openssl3_impl::tunnel::ssl::t_Tunnel<\n            lifetime!(something),\n        > = {\n            (match (core::option::impl__ok_or::<\n                &mut sandwich::implementation::openssl3_impl::tunnel::ssl::t_Tunnel<\n                    lifetime!(something),\n                >,\n                sandwich_proto::io::t_IOError,\n            >(\n                sandwich::implementation::openssl3_impl::tunnel::bio_method::impl__Bio__get_tunnel::<\n                    lifetime!(something),\n                >(&(deref(self))),\n                sandwich_proto::io::IOError_IOERROR_SYSTEM_ERROR(),\n            )) {\n                core::result::Result_Ok(ok) => ok,\n                core::result::Result_Err(err) => {\n                    (return Tuple2(buffer, core::result::Result_Err(err)))\n                }\n            })\n        };\n        {\n            let _: tuple0 = {\n                sandwich::implementation::openssl3_impl::tunnel::bio_method::impl__Bio__synchronize_states(\n                    &(deref(self)),\n                    &mut (deref(tun)),\n                )\n            };\n            {\n                let _: tuple0 = {\n                    sandwich::tunnel::io::f_set_state(\n                        &mut (proj_sandwich::implementation::openssl3_impl::tunnel::ssl::f_io(\n                            deref(tun),\n                        )),\n                        proj_sandwich::implementation::openssl3_impl::tunnel::ssl::f_state(\n                            deref(tun),\n                        ),\n                    )\n                };\n                {\n                    let hax_temp_output: core::result::t_Result<\n                        int,\n                        sandwich_proto::io::t_IOError,\n                    > = {\n                        {\n                            core::result::impl__map_err::<\n                                int,\n                                std::io::error::t_Error,\n                                sandwich_proto::io::t_IOError,\n                                arrow!(\n                                    std::io::error::t_Error -> sandwich_proto::io::t_IOError\n                                ),\n                            >(\n                                std::io::f_read(\n                                    &mut (proj_sandwich::implementation::openssl3_impl::tunnel::ssl::f_io(\n                                        deref(tun),\n                                    )),\n                                    &mut (buffer),\n                                ),\n                                (|e| { sandwich::io::error::f_into_io_error(e) }),\n                            )\n                        }\n                    };\n                    Tuple2(buffer, hax_temp_output)\n                }\n            }\n        }\n    }"

let impl__Bio__write (self: t_Bio) (buffer: t_Slice u8) =
  Rust_primitives.Hax.failure "(RefMut) The mutation of this \027[1m&mut\027[0m is not allowed here."
    "{\n        let tun: &mut sandwich::implementation::openssl3_impl::tunnel::ssl::t_Tunnel<\n            lifetime!(something),\n        > = {\n            (match (core::option::impl__ok_or::<\n                &mut sandwich::implementation::openssl3_impl::tunnel::ssl::t_Tunnel<\n                    lifetime!(something),\n                >,\n                sandwich_proto::io::t_IOError,\n            >(\n                sandwich::implementation::openssl3_impl::tunnel::bio_method::impl__Bio__get_tunnel::<\n                    lifetime!(something),\n                >(&(deref(self))),\n                sandwich_proto::io::IOError_IOERROR_SYSTEM_ERROR(),\n            )) {\n                core::result::Result_Ok(ok) => ok,\n                core::result::Result_Err(err) => (return core::result::Result_Err(err)),\n            })\n        };\n        {\n            let _: tuple0 = {\n                sandwich::implementation::openssl3_impl::tunnel::bio_method::impl__Bio__synchronize_states(\n                    &(deref(self)),\n                    &mut (deref(tun)),\n                )\n            };\n            {\n                let _: tuple0 = {\n                    sandwich::tunnel::io::f_set_state(\n                        &mut (proj_sandwich::implementation::openssl3_impl::tunnel::ssl::f_io(\n                            deref(tun),\n                        )),\n                        proj_sandwich::implementation::openssl3_impl::tunnel::ssl::f_state(\n                            deref(tun),\n                        ),\n                    )\n                };\n                {\n                    core::result::impl__map_err::<\n                        int,\n                        std::io::error::t_Error,\n                        sandwich_proto::io::t_IOError,\n                        arrow!(std::io::error::t_Error -> sandwich_proto::io::t_IOError),\n                    >(\n                        std::io::f_write(\n                            &mut (proj_sandwich::implementation::openssl3_impl::tunnel::ssl::f_io(\n                                deref(tun),\n                            )),\n                            &(deref(buffer)),\n                        ),\n                        (|e| { sandwich::io::error::f_into_io_error(e) }),\n                    )\n                }\n            }\n        }\n    }"

(* item error backend: (reject_RawOrMutPointer) ExplicitRejection { reason: "a node of kind [Raw_pointer] have been found in the AST" }
Last available AST for this item:

/// BIO control callback.
#[cfg(feature = "tunnel")]
#[cfg(feature = "openssl3")]
#[deny(bare_trait_objects)]
#[feature(register_tool)]
#[register_tool(_hax)]
fn bio_ctrl(bio: raw_pointer!(), cmd: int, larg: int, _pargs: raw_pointer!()) -> int {
    {
        (match (cast(cmd)) {
            9 => {
                let _: tuple0 = {
                    openssl3::foreign_mod_534::v_BIO_set_shutdown(bio, cast(larg))
                };
                { 1 }
            }
            8 => cast(openssl3::foreign_mod_535::v_BIO_get_shutdown(bio)),
            11 => {
                (if core::result::impl__is_err::<
                    tuple0,
                    sandwich_proto::io::t_IOError,
                >(
                    &(sandwich::implementation::openssl3_impl::tunnel::bio_method::impl__Bio__flush(
                        &(sandwich::implementation::openssl3_impl::tunnel::bio_method::Bio(
                            core::ptr::non_null::impl_3__new_unchecked::<
                                openssl3::t_bio_st,
                            >(bio),
                        )),
                    )),
                ) {
                    { 0 }
                } else {
                    { 1 }
                })
            }
            _ => 0,
        })
    }
}


Last AST:
/** print_rust: pitem: not implemented  (item: { Concrete_ident.T.def_id =
  { Concrete_ident.Imported.krate = "sandwich";
    path =
    [{ Concrete_ident.Imported.data =
       (Concrete_ident.Imported.TypeNs "implementation"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "openssl3_impl"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "tunnel"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "bio_method"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.ValueNs "bio_ctrl"); disambiguator = 0 }
      ]
    };
  kind = Concrete_ident.Kind.Value }) */
const _: () = ();
 *)

(* item error backend: (reject_RawOrMutPointer) ExplicitRejection { reason: "a node of kind [Raw_pointer] have been found in the AST" }
Last available AST for this item:

/// BIO read callback.
#[cfg(feature = "tunnel")]
#[cfg(feature = "openssl3")]
#[deny(bare_trait_objects)]
#[feature(register_tool)]
#[register_tool(_hax)]
fn bio_read(
    bio: raw_pointer!(),
    data: raw_pointer!(),
    len: int,
    written: raw_pointer!(),
) -> int {
    {
        let bio: sandwich::implementation::openssl3_impl::tunnel::bio_method::t_Bio = {
            sandwich::implementation::openssl3_impl::tunnel::bio_method::Bio(
                core::ptr::non_null::impl_3__new_unchecked::<openssl3::t_bio_st>(bio),
            )
        };
        {
            let _: tuple0 = {
                sandwich::implementation::openssl3_impl::tunnel::bio_method::impl__Bio__clear_retry_flag(
                    &(bio),
                )
            };
            {
                (match (sandwich::implementation::openssl3_impl::tunnel::bio_method::impl__Bio__read(
                    &(bio),
                    &mut (deref(
                        core::slice::raw::from_raw_parts_mut::<
                            lifetime!(something),
                            int,
                        >(core::ptr::mut_ptr::impl__cast::<int, int>(data), len),
                    )),
                )) {
                    core::result::Result_Ok(n) => {
                        let _: tuple0 = { (deref(written) = n) };
                        { 1 }
                    }
                    core::result::Result_Err(e) => {
                        sandwich::implementation::openssl3_impl::tunnel::bio_method::bio_reflect_io_error::<
                            arrow!(tuple0 -> int),
                            arrow!(tuple0 -> int),
                            int,
                        >(
                            e,
                            (|_| {
                                {
                                    let _: tuple0 = {
                                        sandwich::implementation::openssl3_impl::tunnel::bio_method::impl__Bio__set_retry_read_flag(
                                            &(bio),
                                        )
                                    };
                                    { 1 }
                                }
                            }),
                            (|_| {
                                {
                                    let _: tuple0 = {
                                        sandwich::implementation::openssl3_impl::tunnel::bio_method::impl__Bio__declare_closed(
                                            &(bio),
                                        )
                                    };
                                    { 1 }
                                }
                            }),
                            1,
                        )
                    }
                })
            }
        }
    }
}


Last AST:
/** print_rust: pitem: not implemented  (item: { Concrete_ident.T.def_id =
  { Concrete_ident.Imported.krate = "sandwich";
    path =
    [{ Concrete_ident.Imported.data =
       (Concrete_ident.Imported.TypeNs "implementation"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "openssl3_impl"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "tunnel"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "bio_method"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.ValueNs "bio_read"); disambiguator = 0 }
      ]
    };
  kind = Concrete_ident.Kind.Value }) */
const _: () = ();
 *)

(* item error backend: (reject_RawOrMutPointer) ExplicitRejection { reason: "a node of kind [Raw_pointer] have been found in the AST" }
Last available AST for this item:

/// BIO write callback.
#[cfg(feature = "tunnel")]
#[cfg(feature = "openssl3")]
#[deny(bare_trait_objects)]
#[feature(register_tool)]
#[register_tool(_hax)]
fn bio_write(
    bio: raw_pointer!(),
    data: raw_pointer!(),
    len: int,
    written: raw_pointer!(),
) -> int {
    {
        let bio: sandwich::implementation::openssl3_impl::tunnel::bio_method::t_Bio = {
            sandwich::implementation::openssl3_impl::tunnel::bio_method::Bio(
                core::ptr::non_null::impl_3__new_unchecked::<openssl3::t_bio_st>(bio),
            )
        };
        {
            let _: tuple0 = {
                sandwich::implementation::openssl3_impl::tunnel::bio_method::impl__Bio__clear_retry_flag(
                    &(bio),
                )
            };
            {
                (match (sandwich::implementation::openssl3_impl::tunnel::bio_method::impl__Bio__write(
                    &(bio),
                    &(deref(
                        core::slice::raw::from_raw_parts::<
                            lifetime!(something),
                            int,
                        >(core::ptr::const_ptr::impl__cast::<int, int>(data), len),
                    )),
                )) {
                    core::result::Result_Ok(n) => {
                        let _: tuple0 = { (deref(written) = n) };
                        { 1 }
                    }
                    core::result::Result_Err(e) => {
                        sandwich::implementation::openssl3_impl::tunnel::bio_method::bio_reflect_io_error::<
                            arrow!(tuple0 -> int),
                            arrow!(tuple0 -> int),
                            int,
                        >(
                            e,
                            (|_| {
                                {
                                    let _: tuple0 = {
                                        sandwich::implementation::openssl3_impl::tunnel::bio_method::impl__Bio__set_retry_write_flag(
                                            &(bio),
                                        )
                                    };
                                    { 1 }
                                }
                            }),
                            (|_| {
                                {
                                    let _: tuple0 = {
                                        sandwich::implementation::openssl3_impl::tunnel::bio_method::impl__Bio__declare_closed(
                                            &(bio),
                                        )
                                    };
                                    { 1 }
                                }
                            }),
                            1,
                        )
                    }
                })
            }
        }
    }
}


Last AST:
/** print_rust: pitem: not implemented  (item: { Concrete_ident.T.def_id =
  { Concrete_ident.Imported.krate = "sandwich";
    path =
    [{ Concrete_ident.Imported.data =
       (Concrete_ident.Imported.TypeNs "implementation"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "openssl3_impl"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "tunnel"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.TypeNs "bio_method"); disambiguator = 0 };
      { Concrete_ident.Imported.data =
        (Concrete_ident.Imported.ValueNs "bio_write"); disambiguator = 0 }
      ]
    };
  kind = Concrete_ident.Kind.Value }) */
const _: () = ();
 *)
