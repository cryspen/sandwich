module Sandwich.Implementation.Openssl3.Tunnel.Context
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let _ =
  (* This module has implicit dependencies, here we make them explicit. *)
  (* The implicit dependencies arise from typeclasses instances. *)
  let open Sandwich in
  let open Sandwich.Error in
  let open Sandwich.Error.Code in
  let open Sandwich.Implementation.Openssl3.Tunnel.X509_verify_param in
  let open Sandwich.Support.Data_source in
  let open Sandwich.Tunnel.Context in
  let open Sandwich.Tunnel.Tls in
  ()

let get_verify_mode_from_mode_and_x509_verifier
      (mode: Sandwich.Tunnel.Context.t_Mode)
      (x509_verifier: Core.Option.t_Option Sandwich_api_proto.Verifiers.t_X509Verifier)
     =
  if Core.Option.impl__is_none #Sandwich_api_proto.Verifiers.t_X509Verifier x509_verifier
  then Sandwich.Tunnel.Tls.VerifyMode_None <: Sandwich.Tunnel.Tls.t_VerifyMode
  else
    if mode =. (Sandwich.Tunnel.Context.Mode_Client <: Sandwich.Tunnel.Context.t_Mode)
    then Sandwich.Tunnel.Tls.VerifyMode_Peer <: Sandwich.Tunnel.Tls.t_VerifyMode
    else Sandwich.Tunnel.Tls.VerifyMode_Mutual <: Sandwich.Tunnel.Tls.t_VerifyMode

let impl__SslContext__disable_session_cache_mode (self: t_SslContext) =
  let _:i64 =
    Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
      "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 241);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs\n                                             \"disable_session_cache_mode\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"20\"; line = \"101\" };\n                                lo = { Types.col = \"16\"; line = \"101\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"241\", \"11\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"20\"; line = \"101\" };\n                            lo = { Types.col = \"16\"; line = \"101\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"241\", \"10\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"22\"; line = \"101\" };\n                        lo = { Types.col = \"16\"; line = \"101\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"31\"; line = \"101\" };\n                     lo = { Types.col = \"23\"; line = \"101\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"29\"; line = \"101\" };\n                       lo = { Types.col = \"23\"; line = \"101\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"241\", \"8\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"31\"; line = \"101\" };\n                   lo = { Types.col = \"16\"; line = \"101\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Cast {\n                    source =\n                    { Types.attributes = [];\n                      contents =\n                      Types.NamedConst {args = [];\n                        def_id =\n                        { Types.index = (27, 10452); krate = \"openssl3\";\n                          path =\n                          [{ Types.data =\n                             (Types.ValueNs \"SSL_CTRL_SET_SESS_CACHE_MODE\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        impl = None; user_ty = None};\n                      hir_id = (Some (\"241\", \"14\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"54\"; line = \"102\" };\n                        lo = { Types.col = \"16\"; line = \"102\" } };\n                      ty = (Types.Uint Types.U32) }};\n                  hir_id = (Some (\"241\", \"13\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"61\"; line = \"102\" };\n                    lo = { Types.col = \"16\"; line = \"102\" } };\n                  ty = (Types.Int Types.I32) };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {\n                    args =\n                    [{ Types.attributes = [];\n                       contents =\n                       Types.NamedConst {args = [];\n                         def_id =\n                         { Types.index = (27, 8838); krate = \"openssl3\";\n                           path =\n                           [{ Types.data =\n                              (Types.ValueNs \"SSL_SESS_CACHE_OFF\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         impl = None; user_ty = None};\n                       hir_id = (Some (\"241\", \"21\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3/tunnel/context.rs\"));\n                         hi = { Types.col = \"44\"; line = \"103\" };\n                         lo = { Types.col = \"16\"; line = \"103\" } };\n                       ty = (Types.Uint Types.U32) }\n                      ];\n                    bounds_impls = [];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"51\"; line = \"103\" };\n                      lo = { Types.col = \"45\"; line = \"103\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2997); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"convert\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Into\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"into\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"49\"; line = \"103\" };\n                        lo = { Types.col = \"45\"; line = \"103\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs = [(Types.Uint Types.U32)];\n                             output = (Types.Int Types.I64);\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args = [];\n                    trait =\n                    (Some ({ Types.args =\n                             [{ Types.args = [];\n                                impl =\n                                Types.Builtin {\n                                  trait =\n                                  { Types.def_id =\n                                    { Types.index = (2, 26413);\n                                      krate = \"core\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"marker\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Sized\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Type (Types.Uint Types.U32))] }};\n                                trait =\n                                { Types.def_id =\n                                  { Types.index = (2, 26413); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"marker\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Sized\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Type (Types.Uint Types.U32))] }\n                                };\n                               { Types.args = [];\n                                 impl =\n                                 Types.Builtin {\n                                   trait =\n                                   { Types.def_id =\n                                     { Types.index = (2, 26413);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"marker\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"Sized\");\n                                           disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args =\n                                     [(Types.Type (Types.Int Types.I64))] }};\n                                 trait =\n                                 { Types.def_id =\n                                   { Types.index = (2, 26413);\n                                     krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"marker\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"Sized\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type (Types.Int Types.I64))] }\n                                 };\n                               { Types.args = [];\n                                 impl =\n                                 Types.Concrete {generics = [];\n                                   id =\n                                   { Types.index = (2, 25602);\n                                     krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"convert\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"num\");\n                                         disambiguator = 0 };\n                                       { Types.data = Types.Impl;\n                                         disambiguator = 93 }\n                                       ]\n                                     }};\n                                 trait =\n                                 { Types.def_id =\n                                   { Types.index = (2, 2998); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"convert\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"From\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type (Types.Int Types.I64));\n                                     (Types.Type (Types.Uint Types.U32))]\n                                   }\n                                 }\n                               ];\n                             impl =\n                             Types.Concrete {\n                               generics =\n                               [(Types.Type (Types.Uint Types.U32));\n                                 (Types.Type (Types.Int Types.I64))];\n                               id =\n                               { Types.index = (2, 3021); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"convert\");\n                                    disambiguator = 0 };\n                                   { Types.data = Types.Impl;\n                                     disambiguator = 3 }\n                                   ]\n                                 }};\n                             trait =\n                             { Types.def_id =\n                               { Types.index = (2, 2995); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"convert\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"Into\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type (Types.Uint Types.U32));\n                                 (Types.Type (Types.Int Types.I64))]\n                               }\n                             },\n                           [(Types.Type (Types.Uint Types.U32));\n                             (Types.Type (Types.Int Types.I64))]));\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs = [(Types.Uint Types.U32)];\n                           output = (Types.Int Types.I64);\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"241\", \"19\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"51\"; line = \"103\" };\n                    lo = { Types.col = \"16\"; line = \"103\" } };\n                  ty = (Types.Int Types.I64) };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {args = [];\n                    bounds_impls =\n                    [{ Types.args = [];\n                       impl =\n                       Types.Builtin {\n                         trait =\n                         { Types.def_id =\n                           { Types.index = (2, 2148); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ptr\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"metadata\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"Thin\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args =\n                           [(Types.Type\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 5307); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_void\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []})\n                             ]\n                           }};\n                       trait =\n                       { Types.def_id =\n                         { Types.index = (2, 2148); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ptr\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"metadata\");\n                               disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Thin\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (2, 5307); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ffi\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"c_void\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []})\n                           ]\n                         }\n                       }\n                      ];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"31\"; line = \"104\" };\n                      lo = { Types.col = \"16\"; line = \"104\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2600); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"null_mut\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"29\"; line = \"104\" };\n                        lo = { Types.col = \"16\"; line = \"104\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false; inputs = [];\n                             output =\n                             (Types.RawPtr\n                                (Types.Adt {\n                                   def_id =\n                                   { Types.index = (2, 5307); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ffi\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"c_void\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []},\n                                 true));\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args =\n                    [(Types.Type\n                        Types.Adt {\n                          def_id =\n                          { Types.index = (2, 5307); krate = \"core\";\n                            path =\n                            [{ Types.data = (Types.TypeNs \"ffi\");\n                               disambiguator = 0 };\n                              { Types.data = (Types.TypeNs \"c_void\");\n                                disambiguator = 0 }\n                              ]\n                            };\n                          generic_args = []; trait_refs = []})\n                      ];\n                    trait = None;\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false; inputs = [];\n                           output =\n                           (Types.RawPtr\n                              (Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 5307); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_void\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []},\n                               true));\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"241\", \"24\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"31\"; line = \"104\" };\n                    lo = { Types.col = \"16\"; line = \"104\" } };\n                  ty =\n                  (Types.RawPtr\n                     (Types.Adt {\n                        def_id =\n                        { Types.index = (2, 5307); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ffi\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"c_void\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args = []; trait_refs = []},\n                      true))\n                  }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"13\"; line = \"105\" };\n                lo = { Types.col = \"12\"; line = \"100\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18543); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3371 };\n                      { Types.data = (Types.ValueNs \"SSL_CTX_ctrl\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"34\"; line = \"100\" };\n                  lo = { Types.col = \"12\"; line = \"100\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.Int Types.I32); (Types.Int Types.I64);\n                         (Types.RawPtr\n                            (Types.Adt {\n                               def_id =\n                               { Types.index = (2, 5307); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ffi\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"c_void\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []},\n                             true))\n                         ];\n                       output = (Types.Int Types.I64); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.Int Types.I32); (Types.Int Types.I64);\n                       (Types.RawPtr\n                          (Types.Adt {\n                             def_id =\n                             { Types.index = (2, 5307); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ffi\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"c_void\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           true))\n                       ];\n                     output = (Types.Int Types.I64); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"241\", \"4\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"13\"; line = \"105\" };\n              lo = { Types.col = \"12\"; line = \"100\" } };\n            ty = (Types.Int Types.I64) });\n    region_scope = { Types.data = Types.Node; id = \"28\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"9\"; line = \"106\" };\n      lo = { Types.col = \"8\"; line = \"99\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"241\", \"3\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"9\"; line = \"106\" };\n    lo = { Types.col = \"8\"; line = \"99\" } };\n  ty = (Types.Int Types.I64) }"

  in
  ()

let impl__SslContext__set_mode_release_buffers (self: t_SslContext) =
  let _:i64 =
    Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
      "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 247);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs\n                                             \"set_mode_release_buffers\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"20\"; line = \"212\" };\n                                lo = { Types.col = \"16\"; line = \"212\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"247\", \"11\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"20\"; line = \"212\" };\n                            lo = { Types.col = \"16\"; line = \"212\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"247\", \"10\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"22\"; line = \"212\" };\n                        lo = { Types.col = \"16\"; line = \"212\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"31\"; line = \"212\" };\n                     lo = { Types.col = \"23\"; line = \"212\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"29\"; line = \"212\" };\n                       lo = { Types.col = \"23\"; line = \"212\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"247\", \"8\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"31\"; line = \"212\" };\n                   lo = { Types.col = \"16\"; line = \"212\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Cast {\n                    source =\n                    { Types.attributes = [];\n                      contents =\n                      Types.NamedConst {args = [];\n                        def_id =\n                        { Types.index = (27, 10447); krate = \"openssl3\";\n                          path =\n                          [{ Types.data = (Types.ValueNs \"SSL_CTRL_MODE\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        impl = None; user_ty = None};\n                      hir_id = (Some (\"247\", \"14\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"39\"; line = \"213\" };\n                        lo = { Types.col = \"16\"; line = \"213\" } };\n                      ty = (Types.Uint Types.U32) }};\n                  hir_id = (Some (\"247\", \"13\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"48\"; line = \"213\" };\n                    lo = { Types.col = \"16\"; line = \"213\" } };\n                  ty = (Types.Int Types.I32) };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {\n                    args =\n                    [{ Types.attributes = [];\n                       contents =\n                       Types.NamedConst {args = [];\n                         def_id =\n                         { Types.index = (27, 8795); krate = \"openssl3\";\n                           path =\n                           [{ Types.data =\n                              (Types.ValueNs \"SSL_MODE_RELEASE_BUFFERS\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         impl = None; user_ty = None};\n                       hir_id = (Some (\"247\", \"21\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3/tunnel/context.rs\"));\n                         hi = { Types.col = \"50\"; line = \"214\" };\n                         lo = { Types.col = \"16\"; line = \"214\" } };\n                       ty = (Types.Uint Types.U32) }\n                      ];\n                    bounds_impls = [];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"57\"; line = \"214\" };\n                      lo = { Types.col = \"51\"; line = \"214\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2997); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"convert\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Into\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"into\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"55\"; line = \"214\" };\n                        lo = { Types.col = \"51\"; line = \"214\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs = [(Types.Uint Types.U32)];\n                             output = (Types.Int Types.I64);\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args = [];\n                    trait =\n                    (Some ({ Types.args =\n                             [{ Types.args = [];\n                                impl =\n                                Types.Builtin {\n                                  trait =\n                                  { Types.def_id =\n                                    { Types.index = (2, 26413);\n                                      krate = \"core\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"marker\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Sized\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Type (Types.Uint Types.U32))] }};\n                                trait =\n                                { Types.def_id =\n                                  { Types.index = (2, 26413); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"marker\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Sized\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Type (Types.Uint Types.U32))] }\n                                };\n                               { Types.args = [];\n                                 impl =\n                                 Types.Builtin {\n                                   trait =\n                                   { Types.def_id =\n                                     { Types.index = (2, 26413);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"marker\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"Sized\");\n                                           disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args =\n                                     [(Types.Type (Types.Int Types.I64))] }};\n                                 trait =\n                                 { Types.def_id =\n                                   { Types.index = (2, 26413);\n                                     krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"marker\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"Sized\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type (Types.Int Types.I64))] }\n                                 };\n                               { Types.args = [];\n                                 impl =\n                                 Types.Concrete {generics = [];\n                                   id =\n                                   { Types.index = (2, 25602);\n                                     krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"convert\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"num\");\n                                         disambiguator = 0 };\n                                       { Types.data = Types.Impl;\n                                         disambiguator = 93 }\n                                       ]\n                                     }};\n                                 trait =\n                                 { Types.def_id =\n                                   { Types.index = (2, 2998); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"convert\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"From\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type (Types.Int Types.I64));\n                                     (Types.Type (Types.Uint Types.U32))]\n                                   }\n                                 }\n                               ];\n                             impl =\n                             Types.Concrete {\n                               generics =\n                               [(Types.Type (Types.Uint Types.U32));\n                                 (Types.Type (Types.Int Types.I64))];\n                               id =\n                               { Types.index = (2, 3021); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"convert\");\n                                    disambiguator = 0 };\n                                   { Types.data = Types.Impl;\n                                     disambiguator = 3 }\n                                   ]\n                                 }};\n                             trait =\n                             { Types.def_id =\n                               { Types.index = (2, 2995); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"convert\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"Into\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type (Types.Uint Types.U32));\n                                 (Types.Type (Types.Int Types.I64))]\n                               }\n                             },\n                           [(Types.Type (Types.Uint Types.U32));\n                             (Types.Type (Types.Int Types.I64))]));\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs = [(Types.Uint Types.U32)];\n                           output = (Types.Int Types.I64);\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"247\", \"19\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"57\"; line = \"214\" };\n                    lo = { Types.col = \"16\"; line = \"214\" } };\n                  ty = (Types.Int Types.I64) };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {args = [];\n                    bounds_impls =\n                    [{ Types.args = [];\n                       impl =\n                       Types.Builtin {\n                         trait =\n                         { Types.def_id =\n                           { Types.index = (2, 2148); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ptr\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"metadata\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"Thin\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args =\n                           [(Types.Type\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 5307); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_void\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []})\n                             ]\n                           }};\n                       trait =\n                       { Types.def_id =\n                         { Types.index = (2, 2148); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ptr\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"metadata\");\n                               disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Thin\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (2, 5307); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ffi\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"c_void\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []})\n                           ]\n                         }\n                       }\n                      ];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"31\"; line = \"215\" };\n                      lo = { Types.col = \"16\"; line = \"215\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2600); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"null_mut\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"29\"; line = \"215\" };\n                        lo = { Types.col = \"16\"; line = \"215\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false; inputs = [];\n                             output =\n                             (Types.RawPtr\n                                (Types.Adt {\n                                   def_id =\n                                   { Types.index = (2, 5307); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ffi\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"c_void\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []},\n                                 true));\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args =\n                    [(Types.Type\n                        Types.Adt {\n                          def_id =\n                          { Types.index = (2, 5307); krate = \"core\";\n                            path =\n                            [{ Types.data = (Types.TypeNs \"ffi\");\n                               disambiguator = 0 };\n                              { Types.data = (Types.TypeNs \"c_void\");\n                                disambiguator = 0 }\n                              ]\n                            };\n                          generic_args = []; trait_refs = []})\n                      ];\n                    trait = None;\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false; inputs = [];\n                           output =\n                           (Types.RawPtr\n                              (Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 5307); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_void\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []},\n                               true));\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"247\", \"24\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"31\"; line = \"215\" };\n                    lo = { Types.col = \"16\"; line = \"215\" } };\n                  ty =\n                  (Types.RawPtr\n                     (Types.Adt {\n                        def_id =\n                        { Types.index = (2, 5307); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ffi\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"c_void\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args = []; trait_refs = []},\n                      true))\n                  }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"13\"; line = \"216\" };\n                lo = { Types.col = \"12\"; line = \"211\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18543); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3371 };\n                      { Types.data = (Types.ValueNs \"SSL_CTX_ctrl\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"34\"; line = \"211\" };\n                  lo = { Types.col = \"12\"; line = \"211\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.Int Types.I32); (Types.Int Types.I64);\n                         (Types.RawPtr\n                            (Types.Adt {\n                               def_id =\n                               { Types.index = (2, 5307); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ffi\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"c_void\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []},\n                             true))\n                         ];\n                       output = (Types.Int Types.I64); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.Int Types.I32); (Types.Int Types.I64);\n                       (Types.RawPtr\n                          (Types.Adt {\n                             def_id =\n                             { Types.index = (2, 5307); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ffi\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"c_void\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           true))\n                       ];\n                     output = (Types.Int Types.I64); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"247\", \"4\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"13\"; line = \"216\" };\n              lo = { Types.col = \"12\"; line = \"211\" } };\n            ty = (Types.Int Types.I64) });\n    region_scope = { Types.data = Types.Node; id = \"28\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"9\"; line = \"217\" };\n      lo = { Types.col = \"8\"; line = \"210\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"247\", \"3\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"9\"; line = \"217\" };\n    lo = { Types.col = \"8\"; line = \"210\" } };\n  ty = (Types.Int Types.I64) }"

  in
  ()

let impl__SslContext__set_verify_mode
      (self: t_SslContext)
      (verify_mode: Sandwich.Tunnel.Tls.t_VerifyMode)
     =
  let flag:u32 =
    match verify_mode with
    | Sandwich.Tunnel.Tls.VerifyMode_None  -> Openssl3.v_SSL_VERIFY_NONE
    | Sandwich.Tunnel.Tls.VerifyMode_Peer  -> Openssl3.v_SSL_VERIFY_PEER
    | Sandwich.Tunnel.Tls.VerifyMode_Mutual  ->
      Openssl3.v_SSL_VERIFY_PEER |. Openssl3.v_SSL_VERIFY_FAIL_IF_NO_PEER_CERT
  in
  Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
    "{ Types.attributes = [];\n  contents =\n  Types.Block {expr = None;\n    region_scope = { Types.data = Types.Node; id = \"59\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"9\"; line = \"639\" };\n      lo = { Types.col = \"8\"; line = \"637\" } };\n    stmts =\n    [{ Types.kind =\n       Types.Expr {\n         expr =\n         { Types.attributes = [];\n           contents =\n           Types.Call {\n             args =\n             [{ Types.attributes = [];\n                contents =\n                Types.Call {\n                  args =\n                  [{ Types.attributes = [];\n                     contents =\n                     Types.Field {\n                       field =\n                       { Types.index = (0, 237); krate = \"sandwich\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"implementation\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"openssl3\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"tunnel\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"context\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"SslContext\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.ValueNs \"0\");\n                             disambiguator = 0 }\n                           ]\n                         };\n                       lhs =\n                       { Types.attributes = [];\n                         contents =\n                         Types.Deref {\n                           arg =\n                           { Types.attributes = [];\n                             contents =\n                             Types.VarRef {\n                               id =\n                               { Types.id =\n                                 { Types.local_id = \"2\";\n                                   owner =\n                                   { Types.index = (0, 278);\n                                     krate = \"sandwich\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"implementation\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"openssl3\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"tunnel\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"context\");\n                                         disambiguator = 0 };\n                                       { Types.data = Types.Impl;\n                                         disambiguator = 4 };\n                                       { Types.data =\n                                         (Types.ValueNs \"set_verify_mode\");\n                                         disambiguator = 0 }\n                                       ]\n                                     }\n                                   };\n                                 name = \"self\" }};\n                             hir_id = None;\n                             span =\n                             { Types.filename =\n                               (Types.Real\n                                  (Types.LocalPath\n                                     \"rust/implementation/openssl3/tunnel/context.rs\"));\n                               hi = { Types.col = \"45\"; line = \"638\" };\n                               lo = { Types.col = \"41\"; line = \"638\" } };\n                             ty =\n                             (Types.Ref\n                                ({ Types.kind = Types.ReErased },\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (0, 235);\n                                     krate = \"sandwich\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"implementation\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"openssl3\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"tunnel\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"context\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"SslContext\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []},\n                                 false))\n                             }};\n                         hir_id = (Some (\"278\", \"46\"));\n                         span =\n                         { Types.filename =\n                           (Types.Real\n                              (Types.LocalPath\n                                 \"rust/implementation/openssl3/tunnel/context.rs\"));\n                           hi = { Types.col = \"45\"; line = \"638\" };\n                           lo = { Types.col = \"41\"; line = \"638\" } };\n                         ty =\n                         Types.Adt {\n                           def_id =\n                           { Types.index = (0, 235); krate = \"sandwich\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"implementation\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"openssl3\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"tunnel\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"context\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"SslContext\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args = []; trait_refs = []}\n                         }};\n                     hir_id = (Some (\"278\", \"45\"));\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"47\"; line = \"638\" };\n                       lo = { Types.col = \"41\"; line = \"638\" } };\n                     ty =\n                     Types.Adt {\n                       def_id =\n                       { Types.index = (2, 2222); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"NonNull\");\n                             disambiguator = 0 }\n                           ]\n                         };\n                       generic_args =\n                       [(Types.Type\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (27, 21403); krate = \"openssl3\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                  disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []})\n                         ];\n                       trait_refs = []}\n                     }\n                    ];\n                  bounds_impls = [];\n                  fn_span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"56\"; line = \"638\" };\n                    lo = { Types.col = \"48\"; line = \"638\" } };\n                  from_hir_call = true;\n                  fun' =\n                  { Types.attributes = [];\n                    contents =\n                    Types.GlobalName {\n                      id =\n                      { Types.index = (2, 2245); krate = \"core\";\n                        path =\n                        [{ Types.data = (Types.TypeNs \"ptr\");\n                           disambiguator = 0 };\n                          { Types.data = (Types.TypeNs \"non_null\");\n                            disambiguator = 0 };\n                          { Types.data = Types.Impl; disambiguator = 3 };\n                          { Types.data = (Types.ValueNs \"as_ptr\");\n                            disambiguator = 0 }\n                          ]\n                        }};\n                    hir_id = None;\n                    span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"54\"; line = \"638\" };\n                      lo = { Types.col = \"48\"; line = \"638\" } };\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [Types.Adt {\n                              def_id =\n                              { Types.index = (2, 2222); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ptr\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"non_null\");\n                                    disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"NonNull\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21403);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"ssl_ctx_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []})\n                                ];\n                              trait_refs = []}\n                             ];\n                           output =\n                           (Types.RawPtr\n                              (Types.Adt {\n                                 def_id =\n                                 { Types.index = (27, 21403);\n                                   krate = \"openssl3\";\n                                   path =\n                                   [{ Types.data =\n                                      (Types.TypeNs \"ssl_ctx_st\");\n                                      disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []},\n                               true));\n                           safety = Types.Safe }\n                         })\n                    };\n                  generic_args =\n                  [(Types.Type\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (27, 21403); krate = \"openssl3\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        generic_args = []; trait_refs = []})\n                    ];\n                  trait = None;\n                  ty =\n                  (Types.Arrow\n                     { Types.bound_vars = [];\n                       value =\n                       { Types.abi = Types.Abi {todo = \"Rust\"};\n                         c_variadic = false;\n                         inputs =\n                         [Types.Adt {\n                            def_id =\n                            { Types.index = (2, 2222); krate = \"core\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ptr\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"non_null\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"NonNull\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args =\n                            [(Types.Type\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []})\n                              ];\n                            trait_refs = []}\n                           ];\n                         output =\n                         (Types.RawPtr\n                            (Types.Adt {\n                               def_id =\n                               { Types.index = (27, 21403);\n                                 krate = \"openssl3\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                    disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []},\n                             true));\n                         safety = Types.Safe }\n                       })};\n                hir_id = (Some (\"278\", \"43\"));\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"56\"; line = \"638\" };\n                  lo = { Types.col = \"41\"; line = \"638\" } };\n                ty =\n                (Types.RawPtr\n                   (Types.Adt {\n                      def_id =\n                      { Types.index = (27, 21403); krate = \"openssl3\";\n                        path =\n                        [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                           disambiguator = 0 }\n                          ]\n                        };\n                      generic_args = []; trait_refs = []},\n                    true))\n                };\n               { Types.attributes = [];\n                 contents =\n                 Types.Cast {\n                   source =\n                   { Types.attributes = [];\n                     contents =\n                     Types.VarRef {\n                       id =\n                       { Types.id =\n                         { Types.local_id = \"37\";\n                           owner =\n                           { Types.index = (0, 278); krate = \"sandwich\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"implementation\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"openssl3\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"tunnel\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"context\");\n                                 disambiguator = 0 };\n                               { Types.data = Types.Impl; disambiguator = 4 };\n                               { Types.data =\n                                 (Types.ValueNs \"set_verify_mode\");\n                                 disambiguator = 0 }\n                               ]\n                             }\n                           };\n                         name = \"flag\" }};\n                     hir_id = (Some (\"278\", \"49\"));\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"62\"; line = \"638\" };\n                       lo = { Types.col = \"58\"; line = \"638\" } };\n                     ty = (Types.Uint Types.U32) }};\n                 hir_id = (Some (\"278\", \"48\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"69\"; line = \"638\" };\n                   lo = { Types.col = \"58\"; line = \"638\" } };\n                 ty = (Types.Int Types.I32) };\n               { Types.attributes = [];\n                 contents =\n                 (Types.Adt\n                    { Types.base = None;\n                      fields =\n                      [{ Types.field =\n                         { Types.index = (2, 36180); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"option\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Option\");\n                               disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Some\");\n                               disambiguator = 0 };\n                             { Types.data = (Types.ValueNs \"0\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         value =\n                         { Types.attributes = [];\n                           contents =\n                           Types.PointerCoercion {\n                             cast = Types.UnsafeFnPointer;\n                             source =\n                             { Types.attributes = [];\n                               contents =\n                               Types.PointerCoercion {\n                                 cast = Types.ReifyFnPointer;\n                                 source =\n                                 { Types.attributes = [];\n                                   contents =\n                                   Types.GlobalName {\n                                     id =\n                                     { Types.index = (0, 397);\n                                       krate = \"sandwich\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"implementation\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"openssl3\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"tunnel\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"verify_callback\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.ValueNs \"verify_callback\");\n                                           disambiguator = 0 }\n                                         ]\n                                       }};\n                                   hir_id = None;\n                                   span =\n                                   { Types.filename =\n                                     (Types.Real\n                                        (Types.LocalPath\n                                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                     hi = { Types.col = \"91\"; line = \"638\" };\n                                     lo = { Types.col = \"76\"; line = \"638\" }\n                                     };\n                                   ty =\n                                   (Types.Arrow\n                                      { Types.bound_vars = [];\n                                        value =\n                                        { Types.abi =\n                                          Types.Abi {\n                                            todo = \"C { unwind: false }\"};\n                                          c_variadic = false;\n                                          inputs =\n                                          [(Types.Int Types.I32);\n                                            (Types.RawPtr\n                                               (Types.Adt {\n                                                  def_id =\n                                                  { Types.index = (27, 21286);\n                                                    krate = \"openssl3\";\n                                                    path =\n                                                    [{ Types.data =\n                                                       (Types.TypeNs\n                                                          \"x509_store_ctx_st\");\n                                                       disambiguator = 0 }\n                                                      ]\n                                                    };\n                                                  generic_args = [];\n                                                  trait_refs = []},\n                                                true))\n                                            ];\n                                          output = (Types.Int Types.I32);\n                                          safety = Types.Safe }\n                                        })\n                                   }};\n                               hir_id = None;\n                               span =\n                               { Types.filename =\n                                 (Types.Real\n                                    (Types.LocalPath\n                                       \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                 hi = { Types.col = \"91\"; line = \"638\" };\n                                 lo = { Types.col = \"76\"; line = \"638\" } };\n                               ty =\n                               (Types.Arrow\n                                  { Types.bound_vars = [];\n                                    value =\n                                    { Types.abi =\n                                      Types.Abi {todo = \"C { unwind: false }\"};\n                                      c_variadic = false;\n                                      inputs =\n                                      [(Types.Int Types.I32);\n                                        (Types.RawPtr\n                                           (Types.Adt {\n                                              def_id =\n                                              { Types.index = (27, 21286);\n                                                krate = \"openssl3\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs\n                                                      \"x509_store_ctx_st\");\n                                                   disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args = [];\n                                              trait_refs = []},\n                                            true))\n                                        ];\n                                      output = (Types.Int Types.I32);\n                                      safety = Types.Safe }\n                                    })\n                               }};\n                           hir_id = (Some (\"278\", \"56\"));\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"91\"; line = \"638\" };\n                             lo = { Types.col = \"76\"; line = \"638\" } };\n                           ty =\n                           (Types.Arrow\n                              { Types.bound_vars = [];\n                                value =\n                                { Types.abi =\n                                  Types.Abi {todo = \"C { unwind: false }\"};\n                                  c_variadic = false;\n                                  inputs =\n                                  [(Types.Int Types.I32);\n                                    (Types.RawPtr\n                                       (Types.Adt {\n                                          def_id =\n                                          { Types.index = (27, 21286);\n                                            krate = \"openssl3\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs\n                                                  \"x509_store_ctx_st\");\n                                               disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []},\n                                        true))\n                                    ];\n                                  output = (Types.Int Types.I32);\n                                  safety = Types.Unsafe }\n                                })\n                           }\n                         }\n                        ];\n                      info =\n                      { Types.typ =\n                        { Types.index = (2, 36174); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"option\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Option\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        typ_is_record = false; typ_is_struct = false;\n                        type_namespace =\n                        { Types.index = (2, 36174); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"option\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        variant =\n                        { Types.index = (2, 36178); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"option\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Option\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Some\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        variant_index = \"1\"; variant_is_record = false };\n                      user_ty = None });\n                 hir_id = (Some (\"278\", \"53\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"92\"; line = \"638\" };\n                   lo = { Types.col = \"71\"; line = \"638\" } };\n                 ty =\n                 Types.Adt {\n                   def_id =\n                   { Types.index = (2, 36174); krate = \"core\";\n                     path =\n                     [{ Types.data = (Types.TypeNs \"option\");\n                        disambiguator = 0 };\n                       { Types.data = (Types.TypeNs \"Option\");\n                         disambiguator = 0 }\n                       ]\n                     };\n                   generic_args =\n                   [(Types.Type\n                       (Types.Arrow\n                          { Types.bound_vars = [];\n                            value =\n                            { Types.abi =\n                              Types.Abi {todo = \"C { unwind: false }\"};\n                              c_variadic = false;\n                              inputs =\n                              [(Types.Int Types.I32);\n                                (Types.RawPtr\n                                   (Types.Adt {\n                                      def_id =\n                                      { Types.index = (27, 21286);\n                                        krate = \"openssl3\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"x509_store_ctx_st\");\n                                           disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args = []; trait_refs = []},\n                                    true))\n                                ];\n                              output = (Types.Int Types.I32);\n                              safety = Types.Unsafe }\n                            }))\n                     ];\n                   trait_refs =\n                   [{ Types.args = [];\n                      impl =\n                      Types.Builtin {\n                        trait =\n                        { Types.def_id =\n                          { Types.index = (2, 26413); krate = \"core\";\n                            path =\n                            [{ Types.data = (Types.TypeNs \"marker\");\n                               disambiguator = 0 };\n                              { Types.data = (Types.TypeNs \"Sized\");\n                                disambiguator = 0 }\n                              ]\n                            };\n                          generic_args =\n                          [(Types.Type\n                              (Types.Arrow\n                                 { Types.bound_vars = [];\n                                   value =\n                                   { Types.abi =\n                                     Types.Abi {todo = \"C { unwind: false }\"};\n                                     c_variadic = false;\n                                     inputs =\n                                     [(Types.Int Types.I32);\n                                       (Types.RawPtr\n                                          (Types.Adt {\n                                             def_id =\n                                             { Types.index = (27, 21286);\n                                               krate = \"openssl3\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs\n                                                     \"x509_store_ctx_st\");\n                                                  disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args = [];\n                                             trait_refs = []},\n                                           true))\n                                       ];\n                                     output = (Types.Int Types.I32);\n                                     safety = Types.Unsafe }\n                                   }))\n                            ]\n                          }};\n                      trait =\n                      { Types.def_id =\n                        { Types.index = (2, 26413); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"marker\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Sized\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            (Types.Arrow\n                               { Types.bound_vars = [];\n                                 value =\n                                 { Types.abi =\n                                   Types.Abi {todo = \"C { unwind: false }\"};\n                                   c_variadic = false;\n                                   inputs =\n                                   [(Types.Int Types.I32);\n                                     (Types.RawPtr\n                                        (Types.Adt {\n                                           def_id =\n                                           { Types.index = (27, 21286);\n                                             krate = \"openssl3\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs\n                                                   \"x509_store_ctx_st\");\n                                                disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args = []; trait_refs = []},\n                                         true))\n                                     ];\n                                   output = (Types.Int Types.I32);\n                                   safety = Types.Unsafe }\n                                 }))\n                          ]\n                        }\n                      }\n                     ]}\n                 }\n               ];\n             bounds_impls = [];\n             fn_span =\n             { Types.filename =\n               (Types.Real\n                  (Types.LocalPath\n                     \"rust/implementation/openssl3/tunnel/context.rs\"));\n               hi = { Types.col = \"93\"; line = \"638\" };\n               lo = { Types.col = \"12\"; line = \"638\" } };\n             from_hir_call = true;\n             fun' =\n             { Types.attributes = [];\n               contents =\n               Types.GlobalName {\n                 id =\n                 { Types.index = (27, 18376); krate = \"openssl3\";\n                   path =\n                   [{ Types.data = Types.ForeignMod; disambiguator = 3288 };\n                     { Types.data = (Types.ValueNs \"SSL_CTX_set_verify\");\n                       disambiguator = 0 }\n                     ]\n                   }};\n               hir_id = None;\n               span =\n               { Types.filename =\n                 (Types.Real\n                    (Types.LocalPath\n                       \"rust/implementation/openssl3/tunnel/context.rs\"));\n                 hi = { Types.col = \"40\"; line = \"638\" };\n                 lo = { Types.col = \"12\"; line = \"638\" } };\n               ty =\n               (Types.Arrow\n                  { Types.bound_vars = [];\n                    value =\n                    { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                      c_variadic = false;\n                      inputs =\n                      [(Types.RawPtr\n                          (Types.Adt {\n                             def_id =\n                             { Types.index = (27, 21403); krate = \"openssl3\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                  disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           true));\n                        (Types.Int Types.I32);\n                        Types.Adt {\n                          def_id =\n                          { Types.index = (2, 36174); krate = \"core\";\n                            path =\n                            [{ Types.data = (Types.TypeNs \"option\");\n                               disambiguator = 0 };\n                              { Types.data = (Types.TypeNs \"Option\");\n                                disambiguator = 0 }\n                              ]\n                            };\n                          generic_args =\n                          [(Types.Type\n                              (Types.Arrow\n                                 { Types.bound_vars = [];\n                                   value =\n                                   { Types.abi =\n                                     Types.Abi {todo = \"C { unwind: false }\"};\n                                     c_variadic = false;\n                                     inputs =\n                                     [(Types.Int Types.I32);\n                                       (Types.RawPtr\n                                          (Types.Adt {\n                                             def_id =\n                                             { Types.index = (27, 21286);\n                                               krate = \"openssl3\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs\n                                                     \"x509_store_ctx_st\");\n                                                  disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args = [];\n                                             trait_refs = []},\n                                           true))\n                                       ];\n                                     output = (Types.Int Types.I32);\n                                     safety = Types.Unsafe }\n                                   }))\n                            ];\n                          trait_refs =\n                          [{ Types.args = [];\n                             impl =\n                             Types.Builtin {\n                               trait =\n                               { Types.def_id =\n                                 { Types.index = (2, 26413); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"marker\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"Sized\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args =\n                                 [(Types.Type\n                                     (Types.Arrow\n                                        { Types.bound_vars = [];\n                                          value =\n                                          { Types.abi =\n                                            Types.Abi {\n                                              todo = \"C { unwind: false }\"};\n                                            c_variadic = false;\n                                            inputs =\n                                            [(Types.Int Types.I32);\n                                              (Types.RawPtr\n                                                 (Types.Adt {\n                                                    def_id =\n                                                    { Types.index =\n                                                      (27, 21286);\n                                                      krate = \"openssl3\";\n                                                      path =\n                                                      [{ Types.data =\n                                                         (Types.TypeNs\n                                                            \"x509_store_ctx_st\");\n                                                         disambiguator = 0 }\n                                                        ]\n                                                      };\n                                                    generic_args = [];\n                                                    trait_refs = []},\n                                                  true))\n                                              ];\n                                            output = (Types.Int Types.I32);\n                                            safety = Types.Unsafe }\n                                          }))\n                                   ]\n                                 }};\n                             trait =\n                             { Types.def_id =\n                               { Types.index = (2, 26413); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"marker\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"Sized\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   (Types.Arrow\n                                      { Types.bound_vars = [];\n                                        value =\n                                        { Types.abi =\n                                          Types.Abi {\n                                            todo = \"C { unwind: false }\"};\n                                          c_variadic = false;\n                                          inputs =\n                                          [(Types.Int Types.I32);\n                                            (Types.RawPtr\n                                               (Types.Adt {\n                                                  def_id =\n                                                  { Types.index = (27, 21286);\n                                                    krate = \"openssl3\";\n                                                    path =\n                                                    [{ Types.data =\n                                                       (Types.TypeNs\n                                                          \"x509_store_ctx_st\");\n                                                       disambiguator = 0 }\n                                                      ]\n                                                    };\n                                                  generic_args = [];\n                                                  trait_refs = []},\n                                                true))\n                                            ];\n                                          output = (Types.Int Types.I32);\n                                          safety = Types.Unsafe }\n                                        }))\n                                 ]\n                               }\n                             }\n                            ]}\n                        ];\n                      output = (Types.Tuple []); safety = Types.Unsafe }\n                    })\n               };\n             generic_args = []; trait = None;\n             ty =\n             (Types.Arrow\n                { Types.bound_vars = [];\n                  value =\n                  { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                    c_variadic = false;\n                    inputs =\n                    [(Types.RawPtr\n                        (Types.Adt {\n                           def_id =\n                           { Types.index = (27, 21403); krate = \"openssl3\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                disambiguator = 0 }\n                               ]\n                             };\n                           generic_args = []; trait_refs = []},\n                         true));\n                      (Types.Int Types.I32);\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 36174); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"option\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Option\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            (Types.Arrow\n                               { Types.bound_vars = [];\n                                 value =\n                                 { Types.abi =\n                                   Types.Abi {todo = \"C { unwind: false }\"};\n                                   c_variadic = false;\n                                   inputs =\n                                   [(Types.Int Types.I32);\n                                     (Types.RawPtr\n                                        (Types.Adt {\n                                           def_id =\n                                           { Types.index = (27, 21286);\n                                             krate = \"openssl3\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs\n                                                   \"x509_store_ctx_st\");\n                                                disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args = []; trait_refs = []},\n                                         true))\n                                     ];\n                                   output = (Types.Int Types.I32);\n                                   safety = Types.Unsafe }\n                                 }))\n                          ];\n                        trait_refs =\n                        [{ Types.args = [];\n                           impl =\n                           Types.Builtin {\n                             trait =\n                             { Types.def_id =\n                               { Types.index = (2, 26413); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"marker\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"Sized\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   (Types.Arrow\n                                      { Types.bound_vars = [];\n                                        value =\n                                        { Types.abi =\n                                          Types.Abi {\n                                            todo = \"C { unwind: false }\"};\n                                          c_variadic = false;\n                                          inputs =\n                                          [(Types.Int Types.I32);\n                                            (Types.RawPtr\n                                               (Types.Adt {\n                                                  def_id =\n                                                  { Types.index = (27, 21286);\n                                                    krate = \"openssl3\";\n                                                    path =\n                                                    [{ Types.data =\n                                                       (Types.TypeNs\n                                                          \"x509_store_ctx_st\");\n                                                       disambiguator = 0 }\n                                                      ]\n                                                    };\n                                                  generic_args = [];\n                                                  trait_refs = []},\n                                                true))\n                                            ];\n                                          output = (Types.Int Types.I32);\n                                          safety = Types.Unsafe }\n                                        }))\n                                 ]\n                               }};\n                           trait =\n                           { Types.def_id =\n                             { Types.index = (2, 26413); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"marker\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"Sized\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 (Types.Arrow\n                                    { Types.bound_vars = [];\n                                      value =\n                                      { Types.abi =\n                                        Types.Abi {\n                                          todo = \"C { unwind: false }\"};\n                                        c_variadic = false;\n                                        inputs =\n                                        [(Types.Int Types.I32);\n                                          (Types.RawPtr\n                                             (Types.Adt {\n                                                def_id =\n                                                { Types.index = (27, 21286);\n                                                  krate = \"openssl3\";\n                                                  path =\n                                                  [{ Types.data =\n                                                     (Types.TypeNs\n                                                        \"x509_store_ctx_st\");\n                                                     disambiguator = 0 }\n                                                    ]\n                                                  };\n                                                generic_args = [];\n                                                trait_refs = []},\n                                              true))\n                                          ];\n                                        output = (Types.Int Types.I32);\n                                        safety = Types.Unsafe }\n                                      }))\n                               ]\n                             }\n                           }\n                          ]}\n                      ];\n                    output = (Types.Tuple []); safety = Types.Unsafe }\n                  })};\n           hir_id = (Some (\"278\", \"39\"));\n           span =\n           { Types.filename =\n             (Types.Real\n                (Types.LocalPath\n                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n             hi = { Types.col = \"93\"; line = \"638\" };\n             lo = { Types.col = \"12\"; line = \"638\" } };\n           ty = (Types.Tuple []) };\n         scope = { Types.data = Types.Node; id = \"58\" }}\n       }\n      ];\n    targeted_by_break = false};\n  hir_id = (Some (\"278\", \"38\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"9\"; line = \"639\" };\n    lo = { Types.col = \"8\"; line = \"637\" } };\n  ty = (Types.Tuple []) }"

let impl__SslContext__add_extra_chain_cert
      (self: t_SslContext)
      (extra_certificate: Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_x509_st)
     =
  if
    (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
        "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 270);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs\n                                             \"add_extra_chain_cert\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"20\"; line = \"498\" };\n                                lo = { Types.col = \"16\"; line = \"498\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"270\", \"15\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"20\"; line = \"498\" };\n                            lo = { Types.col = \"16\"; line = \"498\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"270\", \"14\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"22\"; line = \"498\" };\n                        lo = { Types.col = \"16\"; line = \"498\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"31\"; line = \"498\" };\n                     lo = { Types.col = \"23\"; line = \"498\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"29\"; line = \"498\" };\n                       lo = { Types.col = \"23\"; line = \"498\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"270\", \"12\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"31\"; line = \"498\" };\n                   lo = { Types.col = \"16\"; line = \"498\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Cast {\n                    source =\n                    { Types.attributes = [];\n                      contents =\n                      Types.NamedConst {args = [];\n                        def_id =\n                        { Types.index = (27, 10431); krate = \"openssl3\";\n                          path =\n                          [{ Types.data =\n                             (Types.ValueNs \"SSL_CTRL_EXTRA_CHAIN_CERT\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        impl = None; user_ty = None};\n                      hir_id = (Some (\"270\", \"18\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"51\"; line = \"499\" };\n                        lo = { Types.col = \"16\"; line = \"499\" } };\n                      ty = (Types.Uint Types.U32) }};\n                  hir_id = (Some (\"270\", \"17\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"60\"; line = \"499\" };\n                    lo = { Types.col = \"16\"; line = \"499\" } };\n                  ty = (Types.Int Types.I32) };\n                { Types.attributes = [];\n                  contents =\n                  Types.Literal {\n                    lit =\n                    { Types.node = (Types.Int (\"0\", Types.Unsuffixed));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"17\"; line = \"500\" };\n                        lo = { Types.col = \"16\"; line = \"500\" } }\n                      };\n                    neg = false};\n                  hir_id = (Some (\"270\", \"23\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"17\"; line = \"500\" };\n                    lo = { Types.col = \"16\"; line = \"500\" } };\n                  ty = (Types.Int Types.I64) };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {\n                    args =\n                    [{ Types.attributes = [];\n                       contents =\n                       Types.Call {\n                         args =\n                         [{ Types.attributes = [];\n                            contents =\n                            Types.Call {\n                              args =\n                              [{ Types.attributes = [];\n                                 contents =\n                                 Types.Borrow {\n                                   arg =\n                                   { Types.attributes = [];\n                                     contents =\n                                     Types.VarRef {\n                                       id =\n                                       { Types.id =\n                                         { Types.local_id = \"4\";\n                                           owner =\n                                           { Types.index = (0, 270);\n                                             krate = \"sandwich\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs\n                                                   \"implementation\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"openssl3\");\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"tunnel\");\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"context\");\n                                                 disambiguator = 0 };\n                                               { Types.data = Types.Impl;\n                                                 disambiguator = 4 };\n                                               { Types.data =\n                                                 (Types.ValueNs\n                                                    \"add_extra_chain_cert\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             }\n                                           };\n                                         name = \"extra_certificate\" }};\n                                     hir_id = None;\n                                     span =\n                                     { Types.filename =\n                                       (Types.Real\n                                          (Types.LocalPath\n                                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                       hi =\n                                       { Types.col = \"33\"; line = \"501\" };\n                                       lo =\n                                       { Types.col = \"16\"; line = \"501\" } };\n                                     ty =\n                                     Types.Adt {\n                                       def_id =\n                                       { Types.index = (0, 608);\n                                         krate = \"sandwich\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"support\");\n                                            disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"pimpl\");\n                                             disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"Pimpl\");\n                                             disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args =\n                                       [(Types.Lifetime\n                                           { Types.kind = Types.ReErased });\n                                         (Types.Type\n                                            Types.Adt {\n                                              def_id =\n                                              { Types.index = (27, 21223);\n                                                krate = \"openssl3\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"x509_st\");\n                                                   disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args = [];\n                                              trait_refs = []})\n                                         ];\n                                       trait_refs =\n                                       [{ Types.args = [];\n                                          impl =\n                                          Types.Builtin {\n                                            trait =\n                                            { Types.def_id =\n                                              { Types.index = (2, 26413);\n                                                krate = \"core\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"marker\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"Sized\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args =\n                                              [(Types.Type\n                                                  Types.Adt {\n                                                    def_id =\n                                                    { Types.index =\n                                                      (27, 21223);\n                                                      krate = \"openssl3\";\n                                                      path =\n                                                      [{ Types.data =\n                                                         (Types.TypeNs\n                                                            \"x509_st\");\n                                                         disambiguator = 0 }\n                                                        ]\n                                                      };\n                                                    generic_args = [];\n                                                    trait_refs = []})\n                                                ]\n                                              }};\n                                          trait =\n                                          { Types.def_id =\n                                            { Types.index = (2, 26413);\n                                              krate = \"core\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"marker\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"Sized\");\n                                                  disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args =\n                                            [(Types.Type\n                                                Types.Adt {\n                                                  def_id =\n                                                  { Types.index = (27, 21223);\n                                                    krate = \"openssl3\";\n                                                    path =\n                                                    [{ Types.data =\n                                                       (Types.TypeNs\n                                                          \"x509_st\");\n                                                       disambiguator = 0 }\n                                                      ]\n                                                    };\n                                                  generic_args = [];\n                                                  trait_refs = []})\n                                              ]\n                                            }\n                                          }\n                                         ]}\n                                     };\n                                   borrow_kind = Types.Shared};\n                                 hir_id = (Some (\"270\", \"30\"));\n                                 span =\n                                 { Types.filename =\n                                   (Types.Real\n                                      (Types.LocalPath\n                                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                   hi = { Types.col = \"33\"; line = \"501\" };\n                                   lo = { Types.col = \"16\"; line = \"501\" } };\n                                 ty =\n                                 (Types.Ref\n                                    ({ Types.kind = Types.ReErased },\n                                     Types.Adt {\n                                       def_id =\n                                       { Types.index = (0, 608);\n                                         krate = \"sandwich\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"support\");\n                                            disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"pimpl\");\n                                             disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"Pimpl\");\n                                             disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args =\n                                       [(Types.Lifetime\n                                           { Types.kind = Types.ReErased });\n                                         (Types.Type\n                                            Types.Adt {\n                                              def_id =\n                                              { Types.index = (27, 21223);\n                                                krate = \"openssl3\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"x509_st\");\n                                                   disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args = [];\n                                              trait_refs = []})\n                                         ];\n                                       trait_refs =\n                                       [{ Types.args = [];\n                                          impl =\n                                          Types.Builtin {\n                                            trait =\n                                            { Types.def_id =\n                                              { Types.index = (2, 26413);\n                                                krate = \"core\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"marker\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"Sized\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args =\n                                              [(Types.Type\n                                                  Types.Adt {\n                                                    def_id =\n                                                    { Types.index =\n                                                      (27, 21223);\n                                                      krate = \"openssl3\";\n                                                      path =\n                                                      [{ Types.data =\n                                                         (Types.TypeNs\n                                                            \"x509_st\");\n                                                         disambiguator = 0 }\n                                                        ]\n                                                      };\n                                                    generic_args = [];\n                                                    trait_refs = []})\n                                                ]\n                                              }};\n                                          trait =\n                                          { Types.def_id =\n                                            { Types.index = (2, 26413);\n                                              krate = \"core\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"marker\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"Sized\");\n                                                  disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args =\n                                            [(Types.Type\n                                                Types.Adt {\n                                                  def_id =\n                                                  { Types.index = (27, 21223);\n                                                    krate = \"openssl3\";\n                                                    path =\n                                                    [{ Types.data =\n                                                       (Types.TypeNs\n                                                          \"x509_st\");\n                                                       disambiguator = 0 }\n                                                      ]\n                                                    };\n                                                  generic_args = [];\n                                                  trait_refs = []})\n                                              ]\n                                            }\n                                          }\n                                         ]},\n                                     false))\n                                 }\n                                ];\n                              bounds_impls = [];\n                              fn_span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"46\"; line = \"501\" };\n                                lo = { Types.col = \"34\"; line = \"501\" } };\n                              from_hir_call = true;\n                              fun' =\n                              { Types.attributes = [];\n                                contents =\n                                Types.GlobalName {\n                                  id =\n                                  { Types.index = (0, 624);\n                                    krate = \"sandwich\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"support\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"pimpl\");\n                                        disambiguator = 0 };\n                                      { Types.data = Types.Impl;\n                                        disambiguator = 2 };\n                                      { Types.data =\n                                        (Types.ValueNs \"as_nonnull\");\n                                        disambiguator = 0 }\n                                      ]\n                                    }};\n                                hir_id = None;\n                                span =\n                                { Types.filename =\n                                  (Types.Real\n                                     (Types.LocalPath\n                                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                  hi = { Types.col = \"44\"; line = \"501\" };\n                                  lo = { Types.col = \"34\"; line = \"501\" } };\n                                ty =\n                                (Types.Arrow\n                                   { Types.bound_vars =\n                                     [(Types.Region\n                                         (Types.BrNamed\n                                            ({ Types.index = (0, 1658);\n                                               krate = \"sandwich\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"support\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"pimpl\");\n                                                   disambiguator = 0 };\n                                                 { Types.data = Types.Impl;\n                                                   disambiguator = 2 };\n                                                 { Types.data =\n                                                   (Types.ValueNs\n                                                      \"as_nonnull\");\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.LifetimeNs \"'_\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               },\n                                             \"'_\")))\n                                       ];\n                                     value =\n                                     { Types.abi = Types.Abi {todo = \"Rust\"};\n                                       c_variadic = false;\n                                       inputs =\n                                       [(Types.Ref\n                                           ({ Types.kind =\n                                              (Types.ReBound\n                                                 (\"0\",\n                                                  { Types.kind =\n                                                    (Types.BrNamed\n                                                       ({ Types.index =\n                                                          (0, 1658);\n                                                          krate = \"sandwich\";\n                                                          path =\n                                                          [{ Types.data =\n                                                             (Types.TypeNs\n                                                                \"support\");\n                                                             disambiguator =\n                                                             0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"pimpl\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              Types.Impl;\n                                                              disambiguator =\n                                                              2 };\n                                                            { Types.data =\n                                                              (Types.ValueNs\n                                                                 \"as_nonnull\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.LifetimeNs\n                                                                 \"'_\");\n                                                              disambiguator =\n                                                              0 }\n                                                            ]\n                                                          },\n                                                        \"'_\"));\n                                                    var = \"0\" }))\n                                              },\n                                            Types.Adt {\n                                              def_id =\n                                              { Types.index = (0, 608);\n                                                krate = \"sandwich\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"support\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"pimpl\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"Pimpl\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args =\n                                              [(Types.Lifetime\n                                                  { Types.kind =\n                                                    Types.ReErased });\n                                                (Types.Type\n                                                   Types.Adt {\n                                                     def_id =\n                                                     { Types.index =\n                                                       (27, 21223);\n                                                       krate = \"openssl3\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs\n                                                             \"x509_st\");\n                                                          disambiguator = 0 }\n                                                         ]\n                                                       };\n                                                     generic_args = [];\n                                                     trait_refs = []})\n                                                ];\n                                              trait_refs =\n                                              [{ Types.args = [];\n                                                 impl =\n                                                 Types.Builtin {\n                                                   trait =\n                                                   { Types.def_id =\n                                                     { Types.index =\n                                                       (2, 26413);\n                                                       krate = \"core\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs\n                                                             \"marker\");\n                                                          disambiguator = 0 };\n                                                         { Types.data =\n                                                           (Types.TypeNs\n                                                              \"Sized\");\n                                                           disambiguator = 0\n                                                           }\n                                                         ]\n                                                       };\n                                                     generic_args =\n                                                     [(Types.Type\n                                                         Types.Adt {\n                                                           def_id =\n                                                           { Types.index =\n                                                             (27, 21223);\n                                                             krate =\n                                                             \"openssl3\";\n                                                             path =\n                                                             [{ Types.data =\n                                                                (Types.TypeNs\n                                                                   \"x509_st\");\n                                                                disambiguator =\n                                                                0 }\n                                                               ]\n                                                             };\n                                                           generic_args = [];\n                                                           trait_refs = []})\n                                                       ]\n                                                     }};\n                                                 trait =\n                                                 { Types.def_id =\n                                                   { Types.index = (2, 26413);\n                                                     krate = \"core\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"marker\");\n                                                        disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"Sized\");\n                                                         disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args =\n                                                   [(Types.Type\n                                                       Types.Adt {\n                                                         def_id =\n                                                         { Types.index =\n                                                           (27, 21223);\n                                                           krate = \"openssl3\";\n                                                           path =\n                                                           [{ Types.data =\n                                                              (Types.TypeNs\n                                                                 \"x509_st\");\n                                                              disambiguator =\n                                                              0 }\n                                                             ]\n                                                           };\n                                                         generic_args = [];\n                                                         trait_refs = []})\n                                                     ]\n                                                   }\n                                                 }\n                                                ]},\n                                            false))\n                                         ];\n                                       output =\n                                       Types.Adt {\n                                         def_id =\n                                         { Types.index = (2, 2222);\n                                           krate = \"core\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"ptr\");\n                                              disambiguator = 0 };\n                                             { Types.data =\n                                               (Types.TypeNs \"non_null\");\n                                               disambiguator = 0 };\n                                             { Types.data =\n                                               (Types.TypeNs \"NonNull\");\n                                               disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args =\n                                         [(Types.Type\n                                             Types.Adt {\n                                               def_id =\n                                               { Types.index = (27, 21223);\n                                                 krate = \"openssl3\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"x509_st\");\n                                                    disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []})\n                                           ];\n                                         trait_refs = []};\n                                       safety = Types.Safe }\n                                     })\n                                };\n                              generic_args =\n                              [(Types.Lifetime\n                                  { Types.kind = Types.ReErased });\n                                (Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21223);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"x509_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                ];\n                              trait = None;\n                              ty =\n                              (Types.Arrow\n                                 { Types.bound_vars =\n                                   [(Types.Region\n                                       (Types.BrNamed\n                                          ({ Types.index = (0, 1658);\n                                             krate = \"sandwich\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"support\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"pimpl\");\n                                                 disambiguator = 0 };\n                                               { Types.data = Types.Impl;\n                                                 disambiguator = 2 };\n                                               { Types.data =\n                                                 (Types.ValueNs \"as_nonnull\");\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.LifetimeNs \"'_\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             },\n                                           \"'_\")))\n                                     ];\n                                   value =\n                                   { Types.abi = Types.Abi {todo = \"Rust\"};\n                                     c_variadic = false;\n                                     inputs =\n                                     [(Types.Ref\n                                         ({ Types.kind =\n                                            (Types.ReBound\n                                               (\"0\",\n                                                { Types.kind =\n                                                  (Types.BrNamed\n                                                     ({ Types.index =\n                                                        (0, 1658);\n                                                        krate = \"sandwich\";\n                                                        path =\n                                                        [{ Types.data =\n                                                           (Types.TypeNs\n                                                              \"support\");\n                                                           disambiguator = 0\n                                                           };\n                                                          { Types.data =\n                                                            (Types.TypeNs\n                                                               \"pimpl\");\n                                                            disambiguator = 0\n                                                            };\n                                                          { Types.data =\n                                                            Types.Impl;\n                                                            disambiguator = 2\n                                                            };\n                                                          { Types.data =\n                                                            (Types.ValueNs\n                                                               \"as_nonnull\");\n                                                            disambiguator = 0\n                                                            };\n                                                          { Types.data =\n                                                            (Types.LifetimeNs\n                                                               \"'_\");\n                                                            disambiguator = 0\n                                                            }\n                                                          ]\n                                                        },\n                                                      \"'_\"));\n                                                  var = \"0\" }))\n                                            },\n                                          Types.Adt {\n                                            def_id =\n                                            { Types.index = (0, 608);\n                                              krate = \"sandwich\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"support\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"pimpl\");\n                                                  disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"Pimpl\");\n                                                  disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args =\n                                            [(Types.Lifetime\n                                                { Types.kind = Types.ReErased\n                                                  });\n                                              (Types.Type\n                                                 Types.Adt {\n                                                   def_id =\n                                                   { Types.index =\n                                                     (27, 21223);\n                                                     krate = \"openssl3\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"x509_st\");\n                                                        disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args = [];\n                                                   trait_refs = []})\n                                              ];\n                                            trait_refs =\n                                            [{ Types.args = [];\n                                               impl =\n                                               Types.Builtin {\n                                                 trait =\n                                                 { Types.def_id =\n                                                   { Types.index = (2, 26413);\n                                                     krate = \"core\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"marker\");\n                                                        disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"Sized\");\n                                                         disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args =\n                                                   [(Types.Type\n                                                       Types.Adt {\n                                                         def_id =\n                                                         { Types.index =\n                                                           (27, 21223);\n                                                           krate = \"openssl3\";\n                                                           path =\n                                                           [{ Types.data =\n                                                              (Types.TypeNs\n                                                                 \"x509_st\");\n                                                              disambiguator =\n                                                              0 }\n                                                             ]\n                                                           };\n                                                         generic_args = [];\n                                                         trait_refs = []})\n                                                     ]\n                                                   }};\n                                               trait =\n                                               { Types.def_id =\n                                                 { Types.index = (2, 26413);\n                                                   krate = \"core\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs \"marker\");\n                                                      disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs \"Sized\");\n                                                       disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 generic_args =\n                                                 [(Types.Type\n                                                     Types.Adt {\n                                                       def_id =\n                                                       { Types.index =\n                                                         (27, 21223);\n                                                         krate = \"openssl3\";\n                                                         path =\n                                                         [{ Types.data =\n                                                            (Types.TypeNs\n                                                               \"x509_st\");\n                                                            disambiguator = 0\n                                                            }\n                                                           ]\n                                                         };\n                                                       generic_args = [];\n                                                       trait_refs = []})\n                                                   ]\n                                                 }\n                                               }\n                                              ]},\n                                          false))\n                                       ];\n                                     output =\n                                     Types.Adt {\n                                       def_id =\n                                       { Types.index = (2, 2222);\n                                         krate = \"core\";\n                                         path =\n                                         [{ Types.data = (Types.TypeNs \"ptr\");\n                                            disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"non_null\");\n                                             disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"NonNull\");\n                                             disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args =\n                                       [(Types.Type\n                                           Types.Adt {\n                                             def_id =\n                                             { Types.index = (27, 21223);\n                                               krate = \"openssl3\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"x509_st\");\n                                                  disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args = [];\n                                             trait_refs = []})\n                                         ];\n                                       trait_refs = []};\n                                     safety = Types.Safe }\n                                   })};\n                            hir_id = (Some (\"270\", \"28\"));\n                            span =\n                            { Types.filename =\n                              (Types.Real\n                                 (Types.LocalPath\n                                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n                              hi = { Types.col = \"46\"; line = \"501\" };\n                              lo = { Types.col = \"16\"; line = \"501\" } };\n                            ty =\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (2, 2222); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ptr\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"non_null\");\n                                    disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"NonNull\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21223);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"x509_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []})\n                                ];\n                              trait_refs = []}\n                            }\n                           ];\n                         bounds_impls = [];\n                         fn_span =\n                         { Types.filename =\n                           (Types.Real\n                              (Types.LocalPath\n                                 \"rust/implementation/openssl3/tunnel/context.rs\"));\n                           hi = { Types.col = \"55\"; line = \"501\" };\n                           lo = { Types.col = \"47\"; line = \"501\" } };\n                         from_hir_call = true;\n                         fun' =\n                         { Types.attributes = [];\n                           contents =\n                           Types.GlobalName {\n                             id =\n                             { Types.index = (2, 2245); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = Types.Impl; disambiguator = 3\n                                   };\n                                 { Types.data = (Types.ValueNs \"as_ptr\");\n                                   disambiguator = 0 }\n                                 ]\n                               }};\n                           hir_id = None;\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"53\"; line = \"501\" };\n                             lo = { Types.col = \"47\"; line = \"501\" } };\n                           ty =\n                           (Types.Arrow\n                              { Types.bound_vars = [];\n                                value =\n                                { Types.abi = Types.Abi {todo = \"Rust\"};\n                                  c_variadic = false;\n                                  inputs =\n                                  [Types.Adt {\n                                     def_id =\n                                     { Types.index = (2, 2222);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data = (Types.TypeNs \"ptr\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"non_null\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"NonNull\");\n                                           disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args =\n                                     [(Types.Type\n                                         Types.Adt {\n                                           def_id =\n                                           { Types.index = (27, 21223);\n                                             krate = \"openssl3\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"x509_st\");\n                                                disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args = []; trait_refs = []})\n                                       ];\n                                     trait_refs = []}\n                                    ];\n                                  output =\n                                  (Types.RawPtr\n                                     (Types.Adt {\n                                        def_id =\n                                        { Types.index = (27, 21223);\n                                          krate = \"openssl3\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"x509_st\");\n                                             disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args = []; trait_refs = []},\n                                      true));\n                                  safety = Types.Safe }\n                                })\n                           };\n                         generic_args =\n                         [(Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (27, 21223);\n                                 krate = \"openssl3\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"x509_st\");\n                                    disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []})\n                           ];\n                         trait = None;\n                         ty =\n                         (Types.Arrow\n                            { Types.bound_vars = [];\n                              value =\n                              { Types.abi = Types.Abi {todo = \"Rust\"};\n                                c_variadic = false;\n                                inputs =\n                                [Types.Adt {\n                                   def_id =\n                                   { Types.index = (2, 2222); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ptr\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"non_null\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"NonNull\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type\n                                       Types.Adt {\n                                         def_id =\n                                         { Types.index = (27, 21223);\n                                           krate = \"openssl3\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"x509_st\");\n                                              disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args = []; trait_refs = []})\n                                     ];\n                                   trait_refs = []}\n                                  ];\n                                output =\n                                (Types.RawPtr\n                                   (Types.Adt {\n                                      def_id =\n                                      { Types.index = (27, 21223);\n                                        krate = \"openssl3\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"x509_st\");\n                                           disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args = []; trait_refs = []},\n                                    true));\n                                safety = Types.Safe }\n                              })};\n                       hir_id = (Some (\"270\", \"26\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3/tunnel/context.rs\"));\n                         hi = { Types.col = \"55\"; line = \"501\" };\n                         lo = { Types.col = \"16\"; line = \"501\" } };\n                       ty =\n                       (Types.RawPtr\n                          (Types.Adt {\n                             def_id =\n                             { Types.index = (27, 21223); krate = \"openssl3\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"x509_st\");\n                                  disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           true))\n                       }\n                      ];\n                    bounds_impls =\n                    [{ Types.args = [];\n                       impl =\n                       Types.Builtin {\n                         trait =\n                         { Types.def_id =\n                           { Types.index = (2, 26413); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"marker\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"Sized\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args =\n                           [(Types.Type\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 5307); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_void\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []})\n                             ]\n                           }};\n                       trait =\n                       { Types.def_id =\n                         { Types.index = (2, 26413); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"marker\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Sized\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (2, 5307); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ffi\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"c_void\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []})\n                           ]\n                         }\n                       }\n                      ];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"62\"; line = \"501\" };\n                      lo = { Types.col = \"56\"; line = \"501\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2500); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"mut_ptr\");\n                              disambiguator = 0 };\n                            { Types.data = Types.Impl; disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"cast\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"60\"; line = \"501\" };\n                        lo = { Types.col = \"56\"; line = \"501\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [(Types.RawPtr\n                                 (Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21223);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"x509_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  true))\n                               ];\n                             output =\n                             (Types.RawPtr\n                                (Types.Adt {\n                                   def_id =\n                                   { Types.index = (2, 5307); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ffi\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"c_void\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []},\n                                 true));\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args =\n                    [(Types.Type\n                        Types.Adt {\n                          def_id =\n                          { Types.index = (27, 21223); krate = \"openssl3\";\n                            path =\n                            [{ Types.data = (Types.TypeNs \"x509_st\");\n                               disambiguator = 0 }\n                              ]\n                            };\n                          generic_args = []; trait_refs = []});\n                      (Types.Type\n                         Types.Adt {\n                           def_id =\n                           { Types.index = (2, 5307); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ffi\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"c_void\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args = []; trait_refs = []})\n                      ];\n                    trait = None;\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [(Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21223);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"x509_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true))\n                             ];\n                           output =\n                           (Types.RawPtr\n                              (Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 5307); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_void\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []},\n                               true));\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"270\", \"24\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"62\"; line = \"501\" };\n                    lo = { Types.col = \"16\"; line = \"501\" } };\n                  ty =\n                  (Types.RawPtr\n                     (Types.Adt {\n                        def_id =\n                        { Types.index = (2, 5307); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ffi\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"c_void\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args = []; trait_refs = []},\n                      true))\n                  }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"13\"; line = \"502\" };\n                lo = { Types.col = \"12\"; line = \"497\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18543); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3371 };\n                      { Types.data = (Types.ValueNs \"SSL_CTX_ctrl\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"34\"; line = \"497\" };\n                  lo = { Types.col = \"12\"; line = \"497\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.Int Types.I32); (Types.Int Types.I64);\n                         (Types.RawPtr\n                            (Types.Adt {\n                               def_id =\n                               { Types.index = (2, 5307); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ffi\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"c_void\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []},\n                             true))\n                         ];\n                       output = (Types.Int Types.I64); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.Int Types.I32); (Types.Int Types.I64);\n                       (Types.RawPtr\n                          (Types.Adt {\n                             def_id =\n                             { Types.index = (2, 5307); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ffi\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"c_void\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           true))\n                       ];\n                     output = (Types.Int Types.I64); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"270\", \"8\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"13\"; line = \"502\" };\n              lo = { Types.col = \"12\"; line = \"497\" } };\n            ty = (Types.Int Types.I64) });\n    region_scope = { Types.data = Types.Node; id = \"32\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"9\"; line = \"503\" };\n      lo = { Types.col = \"11\"; line = \"496\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"270\", \"7\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"9\"; line = \"503\" };\n    lo = { Types.col = \"11\"; line = \"496\" } };\n  ty = (Types.Int Types.I64) }"

      <:
      i64) =.
    1L
  then
    Rust_primitives.Hax.failure "(reject_RawOrMutPointer) ExplicitRejection { reason: \"a node of kind [Raw_pointer] have been found in the AST\" }"
      "{\n        let _: raw_pointer!() = {\n            sandwich::support::pimpl::impl_2__into_raw::<\n                lifetime!(something),\n                openssl3::t_x509_st,\n            >(extra_certificate)\n        };\n        { core::result::Result_Ok(Tuple0()) }\n    }"

  else
    let res:Alloc.String.t_String =
      Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
            (sz 1)
            (let list = ["failed to add an extra certificate to the certificate chain: "] in
              FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
              Rust_primitives.Hax.array_of_list 1 list)
            (let list =
                [
                  Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                    (Sandwich.Implementation.Openssl3.errstr () <: Alloc.String.t_String)
                  <:
                  Core.Fmt.Rt.t_Argument
                ]
              in
              FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
              Rust_primitives.Hax.array_of_list 1 list)
          <:
          Core.Fmt.t_Arguments)
    in
    Core.Result.Result_Err
    (Core.Convert.f_into #(Sandwich_proto.Errors.t_CertificateError & Alloc.String.t_String)
        #Sandwich.Error.t_Error
        #FStar.Tactics.Typeclasses.solve
        ((Sandwich_proto.Errors.CertificateError_CERTIFICATEERROR_UNSUPPORTED
            <:
            Sandwich_proto.Errors.t_CertificateError),
          res
          <:
          (Sandwich_proto.Errors.t_CertificateError & Alloc.String.t_String)))
    <:
    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error

let impl__SslContext__fill_certificate_trust_store_with_default_cas
      (self: t_SslContext)
      (x509_verifier: Core.Option.t_Option Sandwich_api_proto.Verifiers.t_X509Verifier)
     =
  Rust_primitives.Hax.Control_flow_monad.Mexception.run (match x509_verifier with
      | Core.Option.Option_Some x509 ->
        let! _:Prims.unit =
          if
            x509.Sandwich_api_proto.Verifiers.f_load_cas_from_default_verify_path &&
            (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
                "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 277);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs\n                                             \"fill_certificate_trust_store_with_default_cas\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"71\"; line = \"611\" };\n                                lo = { Types.col = \"67\"; line = \"611\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"277\", \"33\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"71\"; line = \"611\" };\n                            lo = { Types.col = \"67\"; line = \"611\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"277\", \"32\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"73\"; line = \"611\" };\n                        lo = { Types.col = \"67\"; line = \"611\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"82\"; line = \"611\" };\n                     lo = { Types.col = \"74\"; line = \"611\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"80\"; line = \"611\" };\n                       lo = { Types.col = \"74\"; line = \"611\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"277\", \"30\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"82\"; line = \"611\" };\n                   lo = { Types.col = \"67\"; line = \"611\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"83\"; line = \"611\" };\n                lo = { Types.col = \"24\"; line = \"611\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18675); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3437 };\n                      { Types.data =\n                        (Types.ValueNs \"SSL_CTX_set_default_verify_paths\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"66\"; line = \"611\" };\n                  lo = { Types.col = \"24\"; line = \"611\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true))\n                         ];\n                       output = (Types.Int Types.I32); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true))\n                       ];\n                     output = (Types.Int Types.I32); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"277\", \"26\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"83\"; line = \"611\" };\n              lo = { Types.col = \"24\"; line = \"611\" } };\n            ty = (Types.Int Types.I32) });\n    region_scope = { Types.data = Types.Node; id = \"35\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"85\"; line = \"611\" };\n      lo = { Types.col = \"15\"; line = \"611\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"277\", \"25\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"85\"; line = \"611\" };\n    lo = { Types.col = \"15\"; line = \"611\" } };\n  ty = (Types.Int Types.I32) }"

              <:
              i32) <>.
            1l
          then
            let res:Alloc.String.t_String =
              Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
                    (sz 1)
                    (let list =
                        [
                          "CAfile and CApath are NULL or the processing at one of the locations specified failed: "
                        ]
                      in
                      FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                      Rust_primitives.Hax.array_of_list 1 list)
                    (let list =
                        [
                          Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                            (Sandwich.Implementation.Openssl3.errstr () <: Alloc.String.t_String)
                          <:
                          Core.Fmt.Rt.t_Argument
                        ]
                      in
                      FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                      Rust_primitives.Hax.array_of_list 1 list)
                  <:
                  Core.Fmt.t_Arguments)
            in
            let! hoist3:Rust_primitives.Hax.t_Never =
              Core.Ops.Control_flow.ControlFlow_Break
              (Core.Result.Result_Err
                (Core.Convert.f_into #(Sandwich_proto.Errors.t_CertificateError &
                      Alloc.String.t_String)
                    #Sandwich.Error.t_Error
                    #FStar.Tactics.Typeclasses.solve
                    ((Sandwich_proto.Errors.CertificateError_CERTIFICATEERROR_UNKNOWN
                        <:
                        Sandwich_proto.Errors.t_CertificateError),
                      res
                      <:
                      (Sandwich_proto.Errors.t_CertificateError & Alloc.String.t_String)))
                <:
                Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
              <:
              Core.Ops.Control_flow.t_ControlFlow
                (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Rust_primitives.Hax.t_Never
            in
            Core.Ops.Control_flow.ControlFlow_Continue (Rust_primitives.Hax.never_to_any hoist3)
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
          else
            Core.Ops.Control_flow.ControlFlow_Continue ()
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
        in
        Core.Ops.Control_flow.ControlFlow_Continue
        (Core.Result.Result_Ok (() <: Prims.unit)
          <:
          Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
        <:
        Core.Ops.Control_flow.t_ControlFlow (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
      | _ ->
        let! _:Rust_primitives.Hax.t_Never =
          Core.Ops.Control_flow.ControlFlow_Break
          (Core.Result.Result_Ok (() <: Prims.unit)
            <:
            Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          <:
          Core.Ops.Control_flow.t_ControlFlow
            (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Rust_primitives.Hax.t_Never
        in
        Core.Ops.Control_flow.ControlFlow_Continue ()
        <:
        Core.Ops.Control_flow.t_ControlFlow (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          Prims.unit)

let impl__SslContext__initialize_trusted_cert_store (self: t_SslContext) =
  match
    Core.Option.impl__ok_or #(Core.Ptr.Non_null.t_NonNull Openssl3.t_x509_store_st)
      #(Sandwich_proto.Errors.t_SystemError & string)
      (Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
          "rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"core::ptr::non_null::impl_3__new\")::<openssl3::t_x509_store_st>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"rust_primitives::hax::failure(\\n        \\\"(AST import) Unsafe blocks are not allowed.\\\",\\n        \\\"{ Types.attributes = [];\\\\n  contents =\\\\n  Types.Block {\\\\n    expr =\\\\n    (Some { Types.attributes = [];\\\\n            contents =\\\\n            Types.Call {args = []; bounds_impls = [];\\\\n              fn_span =\\\\n              { Types.filename =\\\\n                (Types.Real\\\\n                   (Types.LocalPath\\\\n                      \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                hi = { Types.col = \\\\\\\"73\\\\\\\"; line = \\\\\\\"169\\\\\\\" };\\\\n                lo = { Types.col = \\\\\\\"47\\\\\\\"; line = \\\\\\\"169\\\\\\\" } };\\\\n              from_hir_call = true;\\\\n              fun' =\\\\n              { Types.attributes = [];\\\\n                contents =\\\\n                Types.GlobalName {\\\\n                  id =\\\\n                  { Types.index = (27, 15936); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                    path =\\\\n                    [{ Types.data = Types.ForeignMod; disambiguator = 2130 };\\\\n                      { Types.data = (Types.ValueNs \\\\\\\"X509_STORE_new\\\\\\\");\\\\n                        disambiguator = 0 }\\\\n                      ]\\\\n                    }};\\\\n                hir_id = None;\\\\n                span =\\\\n                { Types.filename =\\\\n                  (Types.Real\\\\n                     (Types.LocalPath\\\\n                        \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                  hi = { Types.col = \\\\\\\"71\\\\\\\"; line = \\\\\\\"169\\\\\\\" };\\\\n                  lo = { Types.col = \\\\\\\"47\\\\\\\"; line = \\\\\\\"169\\\\\\\" } };\\\\n                ty =\\\\n                (Types.Arrow\\\\n                   { Types.bound_vars = [];\\\\n                     value =\\\\n                     { Types.abi = Types.Abi {todo = \\\\\\\"C { unwind: false }\\\\\\\"};\\\\n                       c_variadic = false; inputs = [];\\\\n                       output =\\\\n                       (Types.RawPtr\\\\n                          (Types.Adt {\\\\n                             def_id =\\\\n                             { Types.index = (27, 21277); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                               path =\\\\n                               [{ Types.data = (Types.TypeNs \\\\\\\"x509_store_st\\\\\\\");\\\\n                                  disambiguator = 0 }\\\\n                                 ]\\\\n                               };\\\\n                             generic_args = []; trait_refs = []},\\\\n                           true));\\\\n                       safety = Types.Unsafe }\\\\n                     })\\\\n                };\\\\n              generic_args = []; trait = None;\\\\n              ty =\\\\n              (Types.Arrow\\\\n                 { Types.bound_vars = [];\\\\n                   value =\\\\n                   { Types.abi = Types.Abi {todo = \\\\\\\"C { unwind: false }\\\\\\\"};\\\\n                     c_variadic = false; inputs = [];\\\\n                     output =\\\\n                     (Types.RawPtr\\\\n                        (Types.Adt {\\\\n                           def_id =\\\\n                           { Types.index = (27, 21277); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                             path =\\\\n                             [{ Types.data = (Types.TypeNs \\\\\\\"x509_store_st\\\\\\\");\\\\n                                disambiguator = 0 }\\\\n                               ]\\\\n                             };\\\\n                           generic_args = []; trait_refs = []},\\\\n                         true));\\\\n                     safety = Types.Unsafe }\\\\n                   })};\\\\n            hir_id = (Some (\\\\\\\"245\\\\\\\", \\\\\\\"13\\\\\\\"));\\\\n            span =\\\\n            { Types.filename =\\\\n              (Types.Real\\\\n                 (Types.LocalPath\\\\n                    \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n              hi = { Types.col = \\\\\\\"73\\\\\\\"; line = \\\\\\\"169\\\\\\\" };\\\\n              lo = { Types.col = \\\\\\\"47\\\\\\\"; line = \\\\\\\"169\\\\\\\" } };\\\\n            ty =\\\\n            (Types.RawPtr\\\\n               (Types.Adt {\\\\n                  def_id =\\\\n                  { Types.index = (27, 21277); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                    path =\\\\n                    [{ Types.data = (Types.TypeNs \\\\\\\"x509_store_st\\\\\\\");\\\\n                       disambiguator = 0 }\\\\n                      ]\\\\n                    };\\\\n                  generic_args = []; trait_refs = []},\\\\n                true))\\\\n            });\\\\n    region_scope = { Types.data = Types.Node; id = \\\\\\\"17\\\\\\\" };\\\\n    safety_mode = Types.ExplicitUnsafe;\\\\n    span =\\\\n    { Types.filename =\\\\n      (Types.Real\\\\n         (Types.LocalPath \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n      hi = { Types.col = \\\\\\\"75\\\\\\\"; line = \\\\\\\"169\\\\\\\" };\\\\n      lo = { Types.col = \\\\\\\"38\\\\\\\"; line = \\\\\\\"169\\\\\\\" } };\\\\n    stmts = []; targeted_by_break = false};\\\\n  hir_id = (Some (\\\\\\\"245\\\\\\\", \\\\\\\"12\\\\\\\"));\\\\n  span =\\\\n  { Types.filename =\\\\n    (Types.Real\\\\n       (Types.LocalPath \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n    hi = { Types.col = \\\\\\\"75\\\\\\\"; line = \\\\\\\"169\\\\\\\" };\\\\n    lo = { Types.col = \\\\\\\"38\\\\\\\"; line = \\\\\\\"169\\\\\\\" } };\\\\n  ty =\\\\n  (Types.RawPtr\\\\n     (Types.Adt {\\\\n        def_id =\\\\n        { Types.index = (27, 21277); krate = \\\\\\\"openssl3\\\\\\\";\\\\n          path =\\\\n          [{ Types.data = (Types.TypeNs \\\\\\\"x509_store_st\\\\\\\"); disambiguator = 0 }\\\\n            ]\\\\n          };\\\\n        generic_args = []; trait_refs = []},\\\\n      true))\\\\n  }\\\",\\n    )\"))"

        <:
        Core.Option.t_Option (Core.Ptr.Non_null.t_NonNull Openssl3.t_x509_store_st))
      ((Sandwich_proto.Errors.SystemError_SYSTEMERROR_MEMORY <: Sandwich_proto.Errors.t_SystemError),
        "failed to instantiate an X509_STORE"
        <:
        (Sandwich_proto.Errors.t_SystemError & string))
  with
  | Core.Result.Result_Ok x509_store ->
    let _:Prims.unit =
      Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
        "{ Types.attributes = [];\n  contents =\n  Types.Block {expr = None;\n    region_scope = { Types.data = Types.Node; id = \"58\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"9\"; line = \"176\" };\n      lo = { Types.col = \"8\"; line = \"174\" } };\n    stmts =\n    [{ Types.kind =\n       Types.Expr {\n         expr =\n         { Types.attributes = [];\n           contents =\n           Types.Call {\n             args =\n             [{ Types.attributes = [];\n                contents =\n                Types.Call {\n                  args =\n                  [{ Types.attributes = [];\n                     contents =\n                     Types.Field {\n                       field =\n                       { Types.index = (0, 237); krate = \"sandwich\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"implementation\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"openssl3\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"tunnel\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"context\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"SslContext\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.ValueNs \"0\");\n                             disambiguator = 0 }\n                           ]\n                         };\n                       lhs =\n                       { Types.attributes = [];\n                         contents =\n                         Types.Deref {\n                           arg =\n                           { Types.attributes = [];\n                             contents =\n                             Types.VarRef {\n                               id =\n                               { Types.id =\n                                 { Types.local_id = \"2\";\n                                   owner =\n                                   { Types.index = (0, 245);\n                                     krate = \"sandwich\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"implementation\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"openssl3\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"tunnel\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"context\");\n                                         disambiguator = 0 };\n                                       { Types.data = Types.Impl;\n                                         disambiguator = 4 };\n                                       { Types.data =\n                                         (Types.ValueNs\n                                            \"initialize_trusted_cert_store\");\n                                         disambiguator = 0 }\n                                       ]\n                                     }\n                                   };\n                                 name = \"self\" }};\n                             hir_id = None;\n                             span =\n                             { Types.filename =\n                               (Types.Real\n                                  (Types.LocalPath\n                                     \"rust/implementation/openssl3/tunnel/context.rs\"));\n                               hi = { Types.col = \"49\"; line = \"175\" };\n                               lo = { Types.col = \"45\"; line = \"175\" } };\n                             ty =\n                             (Types.Ref\n                                ({ Types.kind = Types.ReErased },\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (0, 235);\n                                     krate = \"sandwich\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"implementation\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"openssl3\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"tunnel\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"context\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"SslContext\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []},\n                                 false))\n                             }};\n                         hir_id = (Some (\"245\", \"51\"));\n                         span =\n                         { Types.filename =\n                           (Types.Real\n                              (Types.LocalPath\n                                 \"rust/implementation/openssl3/tunnel/context.rs\"));\n                           hi = { Types.col = \"49\"; line = \"175\" };\n                           lo = { Types.col = \"45\"; line = \"175\" } };\n                         ty =\n                         Types.Adt {\n                           def_id =\n                           { Types.index = (0, 235); krate = \"sandwich\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"implementation\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"openssl3\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"tunnel\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"context\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"SslContext\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args = []; trait_refs = []}\n                         }};\n                     hir_id = (Some (\"245\", \"50\"));\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"51\"; line = \"175\" };\n                       lo = { Types.col = \"45\"; line = \"175\" } };\n                     ty =\n                     Types.Adt {\n                       def_id =\n                       { Types.index = (2, 2222); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"NonNull\");\n                             disambiguator = 0 }\n                           ]\n                         };\n                       generic_args =\n                       [(Types.Type\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (27, 21403); krate = \"openssl3\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                  disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []})\n                         ];\n                       trait_refs = []}\n                     }\n                    ];\n                  bounds_impls = [];\n                  fn_span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"60\"; line = \"175\" };\n                    lo = { Types.col = \"52\"; line = \"175\" } };\n                  from_hir_call = true;\n                  fun' =\n                  { Types.attributes = [];\n                    contents =\n                    Types.GlobalName {\n                      id =\n                      { Types.index = (2, 2245); krate = \"core\";\n                        path =\n                        [{ Types.data = (Types.TypeNs \"ptr\");\n                           disambiguator = 0 };\n                          { Types.data = (Types.TypeNs \"non_null\");\n                            disambiguator = 0 };\n                          { Types.data = Types.Impl; disambiguator = 3 };\n                          { Types.data = (Types.ValueNs \"as_ptr\");\n                            disambiguator = 0 }\n                          ]\n                        }};\n                    hir_id = None;\n                    span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"58\"; line = \"175\" };\n                      lo = { Types.col = \"52\"; line = \"175\" } };\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [Types.Adt {\n                              def_id =\n                              { Types.index = (2, 2222); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ptr\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"non_null\");\n                                    disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"NonNull\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21403);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"ssl_ctx_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []})\n                                ];\n                              trait_refs = []}\n                             ];\n                           output =\n                           (Types.RawPtr\n                              (Types.Adt {\n                                 def_id =\n                                 { Types.index = (27, 21403);\n                                   krate = \"openssl3\";\n                                   path =\n                                   [{ Types.data =\n                                      (Types.TypeNs \"ssl_ctx_st\");\n                                      disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []},\n                               true));\n                           safety = Types.Safe }\n                         })\n                    };\n                  generic_args =\n                  [(Types.Type\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (27, 21403); krate = \"openssl3\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        generic_args = []; trait_refs = []})\n                    ];\n                  trait = None;\n                  ty =\n                  (Types.Arrow\n                     { Types.bound_vars = [];\n                       value =\n                       { Types.abi = Types.Abi {todo = \"Rust\"};\n                         c_variadic = false;\n                         inputs =\n                         [Types.Adt {\n                            def_id =\n                            { Types.index = (2, 2222); krate = \"core\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ptr\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"non_null\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"NonNull\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args =\n                            [(Types.Type\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []})\n                              ];\n                            trait_refs = []}\n                           ];\n                         output =\n                         (Types.RawPtr\n                            (Types.Adt {\n                               def_id =\n                               { Types.index = (27, 21403);\n                                 krate = \"openssl3\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                    disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []},\n                             true));\n                         safety = Types.Safe }\n                       })};\n                hir_id = (Some (\"245\", \"48\"));\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"60\"; line = \"175\" };\n                  lo = { Types.col = \"45\"; line = \"175\" } };\n                ty =\n                (Types.RawPtr\n                   (Types.Adt {\n                      def_id =\n                      { Types.index = (27, 21403); krate = \"openssl3\";\n                        path =\n                        [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                           disambiguator = 0 }\n                          ]\n                        };\n                      generic_args = []; trait_refs = []},\n                    true))\n                };\n               { Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.VarRef {\n                        id =\n                        { Types.id =\n                          { Types.local_id = \"42\";\n                            owner =\n                            { Types.index = (0, 245); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = Types.Impl; disambiguator = 4\n                                  };\n                                { Types.data =\n                                  (Types.ValueNs\n                                     \"initialize_trusted_cert_store\");\n                                  disambiguator = 0 }\n                                ]\n                              }\n                            };\n                          name = \"x509_store\" }};\n                      hir_id = (Some (\"245\", \"55\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"72\"; line = \"175\" };\n                        lo = { Types.col = \"62\"; line = \"175\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21277);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data =\n                                   (Types.TypeNs \"x509_store_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"81\"; line = \"175\" };\n                     lo = { Types.col = \"73\"; line = \"175\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"79\"; line = \"175\" };\n                       lo = { Types.col = \"73\"; line = \"175\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21277);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"x509_store_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21277);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"x509_store_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21277); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"x509_store_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21277);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"x509_store_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21277);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data =\n                                     (Types.TypeNs \"x509_store_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"245\", \"53\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"81\"; line = \"175\" };\n                   lo = { Types.col = \"62\"; line = \"175\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21277); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"x509_store_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 }\n               ];\n             bounds_impls = [];\n             fn_span =\n             { Types.filename =\n               (Types.Real\n                  (Types.LocalPath\n                     \"rust/implementation/openssl3/tunnel/context.rs\"));\n               hi = { Types.col = \"82\"; line = \"175\" };\n               lo = { Types.col = \"12\"; line = \"175\" } };\n             from_hir_call = true;\n             fun' =\n             { Types.attributes = [];\n               contents =\n               Types.GlobalName {\n                 id =\n                 { Types.index = (27, 18154); krate = \"openssl3\";\n                   path =\n                   [{ Types.data = Types.ForeignMod; disambiguator = 3177 };\n                     { Types.data = (Types.ValueNs \"SSL_CTX_set_cert_store\");\n                       disambiguator = 0 }\n                     ]\n                   }};\n               hir_id = None;\n               span =\n               { Types.filename =\n                 (Types.Real\n                    (Types.LocalPath\n                       \"rust/implementation/openssl3/tunnel/context.rs\"));\n                 hi = { Types.col = \"44\"; line = \"175\" };\n                 lo = { Types.col = \"12\"; line = \"175\" } };\n               ty =\n               (Types.Arrow\n                  { Types.bound_vars = [];\n                    value =\n                    { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                      c_variadic = false;\n                      inputs =\n                      [(Types.RawPtr\n                          (Types.Adt {\n                             def_id =\n                             { Types.index = (27, 21403); krate = \"openssl3\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                  disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           true));\n                        (Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21277);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data =\n                                   (Types.TypeNs \"x509_store_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true))\n                        ];\n                      output = (Types.Tuple []); safety = Types.Unsafe }\n                    })\n               };\n             generic_args = []; trait = None;\n             ty =\n             (Types.Arrow\n                { Types.bound_vars = [];\n                  value =\n                  { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                    c_variadic = false;\n                    inputs =\n                    [(Types.RawPtr\n                        (Types.Adt {\n                           def_id =\n                           { Types.index = (27, 21403); krate = \"openssl3\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                disambiguator = 0 }\n                               ]\n                             };\n                           generic_args = []; trait_refs = []},\n                         true));\n                      (Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21277); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"x509_store_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true))\n                      ];\n                    output = (Types.Tuple []); safety = Types.Unsafe }\n                  })};\n           hir_id = (Some (\"245\", \"44\"));\n           span =\n           { Types.filename =\n             (Types.Real\n                (Types.LocalPath\n                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n             hi = { Types.col = \"82\"; line = \"175\" };\n             lo = { Types.col = \"12\"; line = \"175\" } };\n           ty = (Types.Tuple []) };\n         scope = { Types.data = Types.Node; id = \"57\" }}\n       }\n      ];\n    targeted_by_break = false};\n  hir_id = (Some (\"245\", \"43\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"9\"; line = \"176\" };\n    lo = { Types.col = \"8\"; line = \"174\" } };\n  ty = (Types.Tuple []) }"

    in
    Core.Result.Result_Ok (() <: Prims.unit)
    <:
    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
  | Core.Result.Result_Err err ->
    Core.Result.Result_Err (Core.Convert.f_from #FStar.Tactics.Typeclasses.solve err)
    <:
    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error

let impl__SslContext__set_alpn_protocols
      (#v_S #impl_995885649_: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i6: Core.Convert.t_AsRef v_S string)
      (#[FStar.Tactics.Typeclasses.tcresolve ()]
          i6:
          Core.Iter.Traits.Collect.t_IntoIterator impl_995885649_)
      (self: t_SslContext)
      (protocols: impl_995885649_)
     =
  let protos:Alloc.String.t_String = Alloc.String.impl__String__new () in
  let protos:Alloc.String.t_String =
    Core.Iter.Traits.Iterator.f_fold (Core.Iter.Traits.Collect.f_into_iter #i3.f_IntoIter
          #FStar.Tactics.Typeclasses.solve
          (Core.Iter.Traits.Collect.f_into_iter #impl_995885649_
              #FStar.Tactics.Typeclasses.solve
              protocols
            <:
            i3.f_IntoIter)
        <:
        i3.f_IntoIter)
      protos
      (fun protos proto ->
          let protos:Alloc.String.t_String = protos in
          let proto:v_S = proto in
          let proto:string =
            Core.Convert.f_as_ref #v_S #string #FStar.Tactics.Typeclasses.solve proto
          in
          match
            Core.Result.impl__map_err #u8
              #Core.Num.Error.t_TryFromIntError
              #(Sandwich_proto.Errors.t_ALPNError & string)
              (Core.Convert.f_try_into #usize
                  #u8
                  #FStar.Tactics.Typeclasses.solve
                  (Core.Str.impl__str__len proto <: usize)
                <:
                Core.Result.t_Result u8 Core.Num.Error.t_TryFromIntError)
              (fun temp_0_ ->
                  let _:Core.Num.Error.t_TryFromIntError = temp_0_ in
                  (Sandwich_proto.Errors.ALPNError_ALPNERROR_LENGTH_ERROR
                    <:
                    Sandwich_proto.Errors.t_ALPNError),
                  "ALPN length overflow"
                  <:
                  (Sandwich_proto.Errors.t_ALPNError & string))
          with
          | Core.Result.Result_Ok (x: u8) ->
            let! _:Prims.unit =
              if x =. 0uy
              then
                let! hoist4:Rust_primitives.Hax.t_Never =
                  Core.Ops.Control_flow.ControlFlow_Break
                  (Core.Result.Result_Err
                    (Core.Convert.f_into #(Sandwich_proto.Errors.t_ALPNError & string)
                        #Sandwich.Error.t_Error
                        #FStar.Tactics.Typeclasses.solve
                        ((Sandwich_proto.Errors.ALPNError_ALPNERROR_LENGTH_ERROR
                            <:
                            Sandwich_proto.Errors.t_ALPNError),
                          "ALPN length erro: empty"
                          <:
                          (Sandwich_proto.Errors.t_ALPNError & string)))
                    <:
                    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
                  <:
                  Core.Ops.Control_flow.t_ControlFlow
                    (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
                    Rust_primitives.Hax.t_Never
                in
                Core.Ops.Control_flow.ControlFlow_Continue (Rust_primitives.Hax.never_to_any hoist4)
                <:
                Core.Ops.Control_flow.t_ControlFlow
                  (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
              else
                Core.Ops.Control_flow.ControlFlow_Continue ()
                <:
                Core.Ops.Control_flow.t_ControlFlow
                  (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
            in
            let! _:Prims.unit =
              if Core.Str.impl__str__contains #char proto (cast (0uy <: u8) <: char)
              then
                let! hoist5:Rust_primitives.Hax.t_Never =
                  Core.Ops.Control_flow.ControlFlow_Break
                  (Core.Result.Result_Err
                    (Core.Convert.f_into #(Sandwich_proto.Errors.t_ALPNError & string)
                        #Sandwich.Error.t_Error
                        #FStar.Tactics.Typeclasses.solve
                        ((Sandwich_proto.Errors.ALPNError_ALPNERROR_INVALID_STRING
                            <:
                            Sandwich_proto.Errors.t_ALPNError),
                          "string cannot contain null bytes"
                          <:
                          (Sandwich_proto.Errors.t_ALPNError & string)))
                    <:
                    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
                  <:
                  Core.Ops.Control_flow.t_ControlFlow
                    (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
                    Rust_primitives.Hax.t_Never
                in
                Core.Ops.Control_flow.ControlFlow_Continue (Rust_primitives.Hax.never_to_any hoist5)
                <:
                Core.Ops.Control_flow.t_ControlFlow
                  (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
              else
                Core.Ops.Control_flow.ControlFlow_Continue ()
                <:
                Core.Ops.Control_flow.t_ControlFlow
                  (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
            in
            Core.Ops.Control_flow.ControlFlow_Continue
            (let protos:Alloc.String.t_String =
                Alloc.String.impl__String__push protos (cast (x <: u8) <: char)
              in
              let protos:Alloc.String.t_String = Alloc.String.impl__String__push_str protos proto in
              protos)
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Alloc.String.t_String
          | Core.Result.Result_Err err ->
            let! _:Prims.unit =
              Core.Ops.Control_flow.ControlFlow_Break
              (Core.Result.Result_Err (Core.Convert.f_from #FStar.Tactics.Typeclasses.solve err)
                <:
                Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
              <:
              Core.Ops.Control_flow.t_ControlFlow
                (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
            in
            Core.Ops.Control_flow.ControlFlow_Continue protos
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Alloc.String.t_String)
  in
  match
    Core.Result.impl__map_err #u32
      #Core.Num.Error.t_TryFromIntError
      #(Sandwich_proto.Errors.t_SystemError & string)
      (Core.Convert.f_try_into #usize
          #u32
          #FStar.Tactics.Typeclasses.solve
          (Alloc.String.impl__String__len protos <: usize)
        <:
        Core.Result.t_Result u32 Core.Num.Error.t_TryFromIntError)
      (fun temp_0_ ->
          let _:Core.Num.Error.t_TryFromIntError = temp_0_ in
          (Sandwich_proto.Errors.SystemError_SYSTEMERROR_INTEGER_OVERFLOW
            <:
            Sandwich_proto.Errors.t_SystemError),
          "protos string is too large"
          <:
          (Sandwich_proto.Errors.t_SystemError & string))
  with
  | Core.Result.Result_Ok (len: u32) ->
    (match
        Core.Result.impl__map_err #Alloc.Ffi.C_str.t_CString
          #Alloc.Ffi.C_str.t_NulError
          #(Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String)
          (Alloc.Ffi.C_str.impl__CString__new #(t_Slice u8)
              (Alloc.String.impl__String__as_bytes protos <: t_Slice u8)
            <:
            Core.Result.t_Result Alloc.Ffi.C_str.t_CString Alloc.Ffi.C_str.t_NulError)
          (fun e ->
              let e:Alloc.Ffi.C_str.t_NulError = e in
              let res:Alloc.String.t_String =
                Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
                      (sz 1)
                      (let list = ["failed to create a CString: "] in
                        FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                        Rust_primitives.Hax.array_of_list 1 list)
                      (let list =
                          [
                            Core.Fmt.Rt.impl_1__new_display #Alloc.Ffi.C_str.t_NulError e
                            <:
                            Core.Fmt.Rt.t_Argument
                          ]
                        in
                        FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                        Rust_primitives.Hax.array_of_list 1 list)
                    <:
                    Core.Fmt.t_Arguments)
              in
              (Sandwich_proto.Errors.SystemError_SYSTEMERROR_MEMORY
                <:
                Sandwich_proto.Errors.t_SystemError),
              res
              <:
              (Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String))
      with
      | Core.Result.Result_Ok cstr ->
        if
          (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
              "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 263);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs \"set_alpn_protocols\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"58\"; line = \"430\" };\n                                lo = { Types.col = \"54\"; line = \"430\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"263\", \"283\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"58\"; line = \"430\" };\n                            lo = { Types.col = \"54\"; line = \"430\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"263\", \"282\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"60\"; line = \"430\" };\n                        lo = { Types.col = \"54\"; line = \"430\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"69\"; line = \"430\" };\n                     lo = { Types.col = \"61\"; line = \"430\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"67\"; line = \"430\" };\n                       lo = { Types.col = \"61\"; line = \"430\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"263\", \"280\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"69\"; line = \"430\" };\n                   lo = { Types.col = \"54\"; line = \"430\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {\n                    args =\n                    [{ Types.attributes = [];\n                       contents =\n                       Types.Call {\n                         args =\n                         [{ Types.attributes = [];\n                            contents =\n                            Types.Borrow {\n                              arg =\n                              { Types.attributes = [];\n                                contents =\n                                Types.Deref {\n                                  arg =\n                                  { Types.attributes = [];\n                                    contents =\n                                    Types.Call {\n                                      args =\n                                      [{ Types.attributes = [];\n                                         contents =\n                                         Types.Borrow {\n                                           arg =\n                                           { Types.attributes = [];\n                                             contents =\n                                             Types.VarRef {\n                                               id =\n                                               { Types.id =\n                                                 { Types.local_id = \"272\";\n                                                   owner =\n                                                   { Types.index = (0, 263);\n                                                     krate = \"sandwich\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"implementation\");\n                                                        disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"openssl3\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"tunnel\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"context\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         Types.Impl;\n                                                         disambiguator = 4 };\n                                                       { Types.data =\n                                                         (Types.ValueNs\n                                                            \"set_alpn_protocols\");\n                                                         disambiguator = 0 }\n                                                       ]\n                                                     }\n                                                   };\n                                                 name = \"cstr\" }};\n                                             hir_id = None;\n                                             span =\n                                             { Types.filename =\n                                               (Types.Real\n                                                  (Types.LocalPath\n                                                     \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                               hi =\n                                               { Types.col = \"75\";\n                                                 line = \"430\" };\n                                               lo =\n                                               { Types.col = \"71\";\n                                                 line = \"430\" }\n                                               };\n                                             ty =\n                                             Types.Adt {\n                                               def_id =\n                                               { Types.index = (5, 7722);\n                                                 krate = \"alloc\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"ffi\");\n                                                    disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"c_str\");\n                                                     disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"CString\");\n                                                     disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []}\n                                             };\n                                           borrow_kind = Types.Shared};\n                                         hir_id = None;\n                                         span =\n                                         { Types.filename =\n                                           (Types.Real\n                                              (Types.LocalPath\n                                                 \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                           hi =\n                                           { Types.col = \"75\"; line = \"430\" };\n                                           lo =\n                                           { Types.col = \"71\"; line = \"430\" }\n                                           };\n                                         ty =\n                                         (Types.Ref\n                                            ({ Types.kind = Types.ReErased },\n                                             Types.Adt {\n                                               def_id =\n                                               { Types.index = (5, 7722);\n                                                 krate = \"alloc\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"ffi\");\n                                                    disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"c_str\");\n                                                     disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"CString\");\n                                                     disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []},\n                                             false))\n                                         }\n                                        ];\n                                      bounds_impls = [];\n                                      fn_span =\n                                      { Types.filename =\n                                        (Types.Real\n                                           (Types.LocalPath\n                                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                        hi =\n                                        { Types.col = \"84\"; line = \"430\" };\n                                        lo =\n                                        { Types.col = \"71\"; line = \"430\" } };\n                                      from_hir_call = false;\n                                      fun' =\n                                      { Types.attributes = [];\n                                        contents =\n                                        Types.GlobalName {\n                                          id =\n                                          { Types.index = (2, 3455);\n                                            krate = \"core\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"ops\");\n                                               disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"deref\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"Deref\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.ValueNs \"deref\");\n                                                disambiguator = 0 }\n                                              ]\n                                            }};\n                                        hir_id = None;\n                                        span =\n                                        { Types.filename =\n                                          (Types.Real\n                                             (Types.LocalPath\n                                                \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                          hi =\n                                          { Types.col = \"84\"; line = \"430\" };\n                                          lo =\n                                          { Types.col = \"71\"; line = \"430\" }\n                                          };\n                                        ty =\n                                        (Types.Arrow\n                                           { Types.bound_vars =\n                                             [(Types.Region\n                                                 (Types.BrNamed\n                                                    ({ Types.index =\n                                                       (2, 55519);\n                                                       krate = \"core\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs \"ops\");\n                                                          disambiguator = 0 };\n                                                         { Types.data =\n                                                           (Types.TypeNs\n                                                              \"deref\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.TypeNs\n                                                              \"Deref\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.ValueNs\n                                                              \"deref\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.LifetimeNs\n                                                              \"'_\");\n                                                           disambiguator = 0\n                                                           }\n                                                         ]\n                                                       },\n                                                     \"'_\")))\n                                               ];\n                                             value =\n                                             { Types.abi =\n                                               Types.Abi {todo = \"Rust\"};\n                                               c_variadic = false;\n                                               inputs =\n                                               [(Types.Ref\n                                                   ({ Types.kind =\n                                                      (Types.ReBound\n                                                         (\"0\",\n                                                          { Types.kind =\n                                                            (Types.BrNamed\n                                                               ({ Types.index =\n                                                                  (2, 55519);\n                                                                  krate =\n                                                                  \"core\";\n                                                                  path =\n                                                                  [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ops\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"Deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.ValueNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.LifetimeNs\n                                                                    \"'_\");\n                                                                    disambiguator =\n                                                                    0 }]\n                                                                  },\n                                                                \"'_\"));\n                                                            var = \"0\" }))\n                                                      },\n                                                    Types.Adt {\n                                                      def_id =\n                                                      { Types.index =\n                                                        (5, 7722);\n                                                        krate = \"alloc\";\n                                                        path =\n                                                        [{ Types.data =\n                                                           (Types.TypeNs\n                                                              \"ffi\");\n                                                           disambiguator = 0\n                                                           };\n                                                          { Types.data =\n                                                            (Types.TypeNs\n                                                               \"c_str\");\n                                                            disambiguator = 0\n                                                            };\n                                                          { Types.data =\n                                                            (Types.TypeNs\n                                                               \"CString\");\n                                                            disambiguator = 0\n                                                            }\n                                                          ]\n                                                        };\n                                                      generic_args = [];\n                                                      trait_refs = []},\n                                                    false))\n                                                 ];\n                                               output =\n                                               (Types.Ref\n                                                  ({ Types.kind =\n                                                     (Types.ReBound\n                                                        (\"0\",\n                                                         { Types.kind =\n                                                           (Types.BrNamed\n                                                              ({ Types.index =\n                                                                 (2, 55519);\n                                                                 krate =\n                                                                 \"core\";\n                                                                 path =\n                                                                 [{ Types.data =\n                                                                    (\n                                                                    Types.TypeNs\n                                                                    \"ops\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                   { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                   { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"Deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                   { Types.data =\n                                                                    (Types.ValueNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                   { Types.data =\n                                                                    (Types.LifetimeNs\n                                                                    \"'_\");\n                                                                    disambiguator =\n                                                                    0 }\n                                                                   ]\n                                                                 },\n                                                               \"'_\"));\n                                                           var = \"0\" }))\n                                                     },\n                                                   (Types.Alias\n                                                      { Types.args =\n                                                        [(Types.Type\n                                                            Types.Adt {\n                                                              def_id =\n                                                              { Types.index =\n                                                                (5, 7722);\n                                                                krate =\n                                                                \"alloc\";\n                                                                path =\n                                                                [{ Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"ffi\");\n                                                                   disambiguator =\n                                                                   0 };\n                                                                  { Types.data =\n                                                                    (\n                                                                    Types.TypeNs\n                                                                    \"c_str\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                  { Types.data =\n                                                                    (\n                                                                    Types.TypeNs\n                                                                    \"CString\");\n                                                                    disambiguator =\n                                                                    0 }\n                                                                  ]\n                                                                };\n                                                              generic_args =\n                                                              [];\n                                                              trait_refs = []})\n                                                          ];\n                                                        def_id =\n                                                        { Types.index =\n                                                          (2, 3454);\n                                                          krate = \"core\";\n                                                          path =\n                                                          [{ Types.data =\n                                                             (Types.TypeNs\n                                                                \"ops\");\n                                                             disambiguator =\n                                                             0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"deref\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"Deref\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"Target\");\n                                                              disambiguator =\n                                                              0 }\n                                                            ]\n                                                          };\n                                                        kind =\n                                                        Types.Projection {\n                                                          assoc_item =\n                                                          { Types.container =\n                                                            Types.TraitContainer;\n                                                            def_id =\n                                                            { Types.index =\n                                                              (2, 3454);\n                                                              krate = \"core\";\n                                                              path =\n                                                              [{ Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"ops\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"deref\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"Deref\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"Target\");\n                                                                  disambiguator =\n                                                                  0 }\n                                                                ]\n                                                              };\n                                                            fn_has_self_parameter =\n                                                            false;\n                                                            kind = Types.Type;\n                                                            name = \"Target\";\n                                                            opt_rpitit_info =\n                                                            None;\n                                                            trait_item_def_id =\n                                                            None };\n                                                          impl_expr =\n                                                          { Types.args = [];\n                                                            impl =\n                                                            Types.Concrete {\n                                                              generics = [];\n                                                              id =\n                                                              { Types.index =\n                                                                (5, 4829);\n                                                                krate =\n                                                                \"alloc\";\n                                                                path =\n                                                                [{ Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"ffi\");\n                                                                   disambiguator =\n                                                                   0 };\n                                                                  { Types.data =\n                                                                    (\n                                                                    Types.TypeNs\n                                                                    \"c_str\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                  { Types.data =\n                                                                    Types.Impl;\n                                                                    disambiguator =\n                                                                    3 }\n                                                                  ]\n                                                                }};\n                                                            trait =\n                                                            { Types.def_id =\n                                                              { Types.index =\n                                                                (2, 3453);\n                                                                krate =\n                                                                \"core\";\n                                                                path =\n                                                                [{ Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"ops\");\n                                                                   disambiguator =\n                                                                   0 };\n                                                                  { Types.data =\n                                                                    (\n                                                                    Types.TypeNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                  { Types.data =\n                                                                    (\n                                                                    Types.TypeNs\n                                                                    \"Deref\");\n                                                                    disambiguator =\n                                                                    0 }\n                                                                  ]\n                                                                };\n                                                              generic_args =\n                                                              [(Types.Type\n                                                                  Types.Adt {\n                                                                    def_id =\n                                                                    { Types.index =\n                                                                    (5, 7722);\n                                                                    krate =\n                                                                    \"alloc\";\n                                                                    path =\n                                                                    [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ffi\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"c_str\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"CString\");\n                                                                    disambiguator =\n                                                                    0 }] };\n                                                                    generic_args =\n                                                                    [];\n                                                                    trait_refs =\n                                                                    []})\n                                                                ]\n                                                              }\n                                                            }}\n                                                        }),\n                                                   false));\n                                               safety = Types.Safe }\n                                             })\n                                        };\n                                      generic_args = [];\n                                      trait =\n                                      (Some ({ Types.args = [];\n                                               impl =\n                                               Types.Concrete {generics = [];\n                                                 id =\n                                                 { Types.index = (5, 4829);\n                                                   krate = \"alloc\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs \"ffi\");\n                                                      disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs \"c_str\");\n                                                       disambiguator = 0 };\n                                                     { Types.data =\n                                                       Types.Impl;\n                                                       disambiguator = 3 }\n                                                     ]\n                                                   }};\n                                               trait =\n                                               { Types.def_id =\n                                                 { Types.index = (2, 3453);\n                                                   krate = \"core\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs \"ops\");\n                                                      disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs \"deref\");\n                                                       disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs \"Deref\");\n                                                       disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 generic_args =\n                                                 [(Types.Type\n                                                     Types.Adt {\n                                                       def_id =\n                                                       { Types.index =\n                                                         (5, 7722);\n                                                         krate = \"alloc\";\n                                                         path =\n                                                         [{ Types.data =\n                                                            (Types.TypeNs\n                                                               \"ffi\");\n                                                            disambiguator = 0\n                                                            };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"c_str\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"CString\");\n                                                             disambiguator =\n                                                             0 }\n                                                           ]\n                                                         };\n                                                       generic_args = [];\n                                                       trait_refs = []})\n                                                   ]\n                                                 }\n                                               },\n                                             [(Types.Type\n                                                 Types.Adt {\n                                                   def_id =\n                                                   { Types.index = (5, 7722);\n                                                     krate = \"alloc\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs \"ffi\");\n                                                        disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"c_str\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"CString\");\n                                                         disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args = [];\n                                                   trait_refs = []})\n                                               ]));\n                                      ty =\n                                      (Types.Arrow\n                                         { Types.bound_vars =\n                                           [(Types.Region\n                                               (Types.BrNamed\n                                                  ({ Types.index = (2, 55519);\n                                                     krate = \"core\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs \"ops\");\n                                                        disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"deref\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"Deref\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.ValueNs\n                                                            \"deref\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.LifetimeNs\n                                                            \"'_\");\n                                                         disambiguator = 0 }\n                                                       ]\n                                                     },\n                                                   \"'_\")))\n                                             ];\n                                           value =\n                                           { Types.abi =\n                                             Types.Abi {todo = \"Rust\"};\n                                             c_variadic = false;\n                                             inputs =\n                                             [(Types.Ref\n                                                 ({ Types.kind =\n                                                    (Types.ReBound\n                                                       (\"0\",\n                                                        { Types.kind =\n                                                          (Types.BrNamed\n                                                             ({ Types.index =\n                                                                (2, 55519);\n                                                                krate =\n                                                                \"core\";\n                                                                path =\n                                                                [{ Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"ops\");\n                                                                   disambiguator =\n                                                                   0 };\n                                                                  { Types.data =\n                                                                    (\n                                                                    Types.TypeNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                  { Types.data =\n                                                                    (\n                                                                    Types.TypeNs\n                                                                    \"Deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                  { Types.data =\n                                                                    (\n                                                                    Types.ValueNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                  { Types.data =\n                                                                    (\n                                                                    Types.LifetimeNs\n                                                                    \"'_\");\n                                                                    disambiguator =\n                                                                    0 }\n                                                                  ]\n                                                                },\n                                                              \"'_\"));\n                                                          var = \"0\" }))\n                                                    },\n                                                  Types.Adt {\n                                                    def_id =\n                                                    { Types.index = (5, 7722);\n                                                      krate = \"alloc\";\n                                                      path =\n                                                      [{ Types.data =\n                                                         (Types.TypeNs \"ffi\");\n                                                         disambiguator = 0 };\n                                                        { Types.data =\n                                                          (Types.TypeNs\n                                                             \"c_str\");\n                                                          disambiguator = 0 };\n                                                        { Types.data =\n                                                          (Types.TypeNs\n                                                             \"CString\");\n                                                          disambiguator = 0 }\n                                                        ]\n                                                      };\n                                                    generic_args = [];\n                                                    trait_refs = []},\n                                                  false))\n                                               ];\n                                             output =\n                                             (Types.Ref\n                                                ({ Types.kind =\n                                                   (Types.ReBound\n                                                      (\"0\",\n                                                       { Types.kind =\n                                                         (Types.BrNamed\n                                                            ({ Types.index =\n                                                               (2, 55519);\n                                                               krate = \"core\";\n                                                               path =\n                                                               [{ Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"ops\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                 { Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"deref\");\n                                                                   disambiguator =\n                                                                   0 };\n                                                                 { Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"Deref\");\n                                                                   disambiguator =\n                                                                   0 };\n                                                                 { Types.data =\n                                                                   (Types.ValueNs\n                                                                    \"deref\");\n                                                                   disambiguator =\n                                                                   0 };\n                                                                 { Types.data =\n                                                                   (Types.LifetimeNs\n                                                                    \"'_\");\n                                                                   disambiguator =\n                                                                   0 }\n                                                                 ]\n                                                               },\n                                                             \"'_\"));\n                                                         var = \"0\" }))\n                                                   },\n                                                 (Types.Alias\n                                                    { Types.args =\n                                                      [(Types.Type\n                                                          Types.Adt {\n                                                            def_id =\n                                                            { Types.index =\n                                                              (5, 7722);\n                                                              krate = \"alloc\";\n                                                              path =\n                                                              [{ Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"ffi\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"c_str\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"CString\");\n                                                                  disambiguator =\n                                                                  0 }\n                                                                ]\n                                                              };\n                                                            generic_args = [];\n                                                            trait_refs = []})\n                                                        ];\n                                                      def_id =\n                                                      { Types.index =\n                                                        (2, 3454);\n                                                        krate = \"core\";\n                                                        path =\n                                                        [{ Types.data =\n                                                           (Types.TypeNs\n                                                              \"ops\");\n                                                           disambiguator = 0\n                                                           };\n                                                          { Types.data =\n                                                            (Types.TypeNs\n                                                               \"deref\");\n                                                            disambiguator = 0\n                                                            };\n                                                          { Types.data =\n                                                            (Types.TypeNs\n                                                               \"Deref\");\n                                                            disambiguator = 0\n                                                            };\n                                                          { Types.data =\n                                                            (Types.TypeNs\n                                                               \"Target\");\n                                                            disambiguator = 0\n                                                            }\n                                                          ]\n                                                        };\n                                                      kind =\n                                                      Types.Projection {\n                                                        assoc_item =\n                                                        { Types.container =\n                                                          Types.TraitContainer;\n                                                          def_id =\n                                                          { Types.index =\n                                                            (2, 3454);\n                                                            krate = \"core\";\n                                                            path =\n                                                            [{ Types.data =\n                                                               (Types.TypeNs\n                                                                  \"ops\");\n                                                               disambiguator =\n                                                               0 };\n                                                              { Types.data =\n                                                                (Types.TypeNs\n                                                                   \"deref\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                (Types.TypeNs\n                                                                   \"Deref\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                (Types.TypeNs\n                                                                   \"Target\");\n                                                                disambiguator =\n                                                                0 }\n                                                              ]\n                                                            };\n                                                          fn_has_self_parameter =\n                                                          false;\n                                                          kind = Types.Type;\n                                                          name = \"Target\";\n                                                          opt_rpitit_info =\n                                                          None;\n                                                          trait_item_def_id =\n                                                          None };\n                                                        impl_expr =\n                                                        { Types.args = [];\n                                                          impl =\n                                                          Types.Concrete {\n                                                            generics = [];\n                                                            id =\n                                                            { Types.index =\n                                                              (5, 4829);\n                                                              krate = \"alloc\";\n                                                              path =\n                                                              [{ Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"ffi\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"c_str\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                { Types.data =\n                                                                  Types.Impl;\n                                                                  disambiguator =\n                                                                  3 }\n                                                                ]\n                                                              }};\n                                                          trait =\n                                                          { Types.def_id =\n                                                            { Types.index =\n                                                              (2, 3453);\n                                                              krate = \"core\";\n                                                              path =\n                                                              [{ Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"ops\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"deref\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"Deref\");\n                                                                  disambiguator =\n                                                                  0 }\n                                                                ]\n                                                              };\n                                                            generic_args =\n                                                            [(Types.Type\n                                                                Types.Adt {\n                                                                  def_id =\n                                                                  { Types.index =\n                                                                    (\n                                                                    5, 7722);\n                                                                    krate =\n                                                                    \"alloc\";\n                                                                    path =\n                                                                    [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ffi\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"c_str\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"CString\");\n                                                                    disambiguator =\n                                                                    0 }] };\n                                                                  generic_args =\n                                                                  [];\n                                                                  trait_refs =\n                                                                  []})\n                                                              ]\n                                                            }\n                                                          }}\n                                                      }),\n                                                 false));\n                                             safety = Types.Safe }\n                                           })};\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath\n                                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                      hi = { Types.col = \"84\"; line = \"430\" };\n                                      lo = { Types.col = \"71\"; line = \"430\" }\n                                      };\n                                    ty =\n                                    (Types.Ref\n                                       ({ Types.kind = Types.ReErased },\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (2, 34717);\n                                            krate = \"core\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"ffi\");\n                                               disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"c_str\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"CStr\");\n                                                disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []},\n                                        false))\n                                    }};\n                                hir_id = None;\n                                span =\n                                { Types.filename =\n                                  (Types.Real\n                                     (Types.LocalPath\n                                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                  hi = { Types.col = \"75\"; line = \"430\" };\n                                  lo = { Types.col = \"71\"; line = \"430\" } };\n                                ty =\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (2, 34717); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ffi\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"c_str\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"CStr\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []}\n                                };\n                              borrow_kind = Types.Shared};\n                            hir_id = (Some (\"263\", \"289\"));\n                            span =\n                            { Types.filename =\n                              (Types.Real\n                                 (Types.LocalPath\n                                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n                              hi = { Types.col = \"75\"; line = \"430\" };\n                              lo = { Types.col = \"71\"; line = \"430\" } };\n                            ty =\n                            (Types.Ref\n                               ({ Types.kind = Types.ReErased },\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (2, 34717); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ffi\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"c_str\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"CStr\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                false))\n                            }\n                           ];\n                         bounds_impls = [];\n                         fn_span =\n                         { Types.filename =\n                           (Types.Real\n                              (Types.LocalPath\n                                 \"rust/implementation/openssl3/tunnel/context.rs\"));\n                           hi = { Types.col = \"84\"; line = \"430\" };\n                           lo = { Types.col = \"76\"; line = \"430\" } };\n                         from_hir_call = true;\n                         fun' =\n                         { Types.attributes = [];\n                           contents =\n                           Types.GlobalName {\n                             id =\n                             { Types.index = (2, 5266); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ffi\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"c_str\");\n                                   disambiguator = 0 };\n                                 { Types.data = Types.Impl; disambiguator = 6\n                                   };\n                                 { Types.data = (Types.ValueNs \"as_ptr\");\n                                   disambiguator = 0 }\n                                 ]\n                               }};\n                           hir_id = None;\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"82\"; line = \"430\" };\n                             lo = { Types.col = \"76\"; line = \"430\" } };\n                           ty =\n                           (Types.Arrow\n                              { Types.bound_vars =\n                                [(Types.Region\n                                    (Types.BrNamed\n                                       ({ Types.index = (2, 56097);\n                                          krate = \"core\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"ffi\");\n                                             disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"c_str\");\n                                              disambiguator = 0 };\n                                            { Types.data = Types.Impl;\n                                              disambiguator = 6 };\n                                            { Types.data =\n                                              (Types.ValueNs \"as_ptr\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.LifetimeNs \"'_\");\n                                              disambiguator = 0 }\n                                            ]\n                                          },\n                                        \"'_\")))\n                                  ];\n                                value =\n                                { Types.abi = Types.Abi {todo = \"Rust\"};\n                                  c_variadic = false;\n                                  inputs =\n                                  [(Types.Ref\n                                      ({ Types.kind =\n                                         (Types.ReBound\n                                            (\"0\",\n                                             { Types.kind =\n                                               (Types.BrNamed\n                                                  ({ Types.index = (2, 56097);\n                                                     krate = \"core\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs \"ffi\");\n                                                        disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"c_str\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         Types.Impl;\n                                                         disambiguator = 6 };\n                                                       { Types.data =\n                                                         (Types.ValueNs\n                                                            \"as_ptr\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.LifetimeNs\n                                                            \"'_\");\n                                                         disambiguator = 0 }\n                                                       ]\n                                                     },\n                                                   \"'_\"));\n                                               var = \"0\" }))\n                                         },\n                                       Types.Adt {\n                                         def_id =\n                                         { Types.index = (2, 34717);\n                                           krate = \"core\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"ffi\");\n                                              disambiguator = 0 };\n                                             { Types.data =\n                                               (Types.TypeNs \"c_str\");\n                                               disambiguator = 0 };\n                                             { Types.data =\n                                               (Types.TypeNs \"CStr\");\n                                               disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args = []; trait_refs = []},\n                                       false))\n                                    ];\n                                  output =\n                                  (Types.RawPtr ((Types.Int Types.I8), false));\n                                  safety = Types.Safe }\n                                })\n                           };\n                         generic_args = []; trait = None;\n                         ty =\n                         (Types.Arrow\n                            { Types.bound_vars =\n                              [(Types.Region\n                                  (Types.BrNamed\n                                     ({ Types.index = (2, 56097);\n                                        krate = \"core\";\n                                        path =\n                                        [{ Types.data = (Types.TypeNs \"ffi\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"c_str\");\n                                            disambiguator = 0 };\n                                          { Types.data = Types.Impl;\n                                            disambiguator = 6 };\n                                          { Types.data =\n                                            (Types.ValueNs \"as_ptr\");\n                                            disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.LifetimeNs \"'_\");\n                                            disambiguator = 0 }\n                                          ]\n                                        },\n                                      \"'_\")))\n                                ];\n                              value =\n                              { Types.abi = Types.Abi {todo = \"Rust\"};\n                                c_variadic = false;\n                                inputs =\n                                [(Types.Ref\n                                    ({ Types.kind =\n                                       (Types.ReBound\n                                          (\"0\",\n                                           { Types.kind =\n                                             (Types.BrNamed\n                                                ({ Types.index = (2, 56097);\n                                                   krate = \"core\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs \"ffi\");\n                                                      disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs \"c_str\");\n                                                       disambiguator = 0 };\n                                                     { Types.data =\n                                                       Types.Impl;\n                                                       disambiguator = 6 };\n                                                     { Types.data =\n                                                       (Types.ValueNs\n                                                          \"as_ptr\");\n                                                       disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.LifetimeNs \"'_\");\n                                                       disambiguator = 0 }\n                                                     ]\n                                                   },\n                                                 \"'_\"));\n                                             var = \"0\" }))\n                                       },\n                                     Types.Adt {\n                                       def_id =\n                                       { Types.index = (2, 34717);\n                                         krate = \"core\";\n                                         path =\n                                         [{ Types.data = (Types.TypeNs \"ffi\");\n                                            disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"c_str\");\n                                             disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"CStr\");\n                                             disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args = []; trait_refs = []},\n                                     false))\n                                  ];\n                                output =\n                                (Types.RawPtr ((Types.Int Types.I8), false));\n                                safety = Types.Safe }\n                              })};\n                       hir_id = (Some (\"263\", \"287\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3/tunnel/context.rs\"));\n                         hi = { Types.col = \"84\"; line = \"430\" };\n                         lo = { Types.col = \"71\"; line = \"430\" } };\n                       ty = (Types.RawPtr ((Types.Int Types.I8), false)) }\n                      ];\n                    bounds_impls =\n                    [{ Types.args = [];\n                       impl =\n                       Types.Builtin {\n                         trait =\n                         { Types.def_id =\n                           { Types.index = (2, 26413); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"marker\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"Sized\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args =\n                           [(Types.Type (Types.Uint Types.U8))] }};\n                       trait =\n                       { Types.def_id =\n                         { Types.index = (2, 26413); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"marker\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Sized\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = [(Types.Type (Types.Uint Types.U8))]\n                         }\n                       }\n                      ];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"91\"; line = \"430\" };\n                      lo = { Types.col = \"85\"; line = \"430\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2404); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"const_ptr\");\n                              disambiguator = 0 };\n                            { Types.data = Types.Impl; disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"cast\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"89\"; line = \"430\" };\n                        lo = { Types.col = \"85\"; line = \"430\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [(Types.RawPtr ((Types.Int Types.I8), false))];\n                             output =\n                             (Types.RawPtr ((Types.Uint Types.U8), false));\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args =\n                    [(Types.Type (Types.Int Types.I8));\n                      (Types.Type (Types.Uint Types.U8))];\n                    trait = None;\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [(Types.RawPtr ((Types.Int Types.I8), false))];\n                           output =\n                           (Types.RawPtr ((Types.Uint Types.U8), false));\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"263\", \"285\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"91\"; line = \"430\" };\n                    lo = { Types.col = \"71\"; line = \"430\" } };\n                  ty = (Types.RawPtr ((Types.Uint Types.U8), false)) };\n                { Types.attributes = [];\n                  contents =\n                  Types.VarRef {\n                    id =\n                    { Types.id =\n                      { Types.local_id = \"199\";\n                        owner =\n                        { Types.index = (0, 263); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = Types.Impl; disambiguator = 4 };\n                            { Types.data =\n                              (Types.ValueNs \"set_alpn_protocols\");\n                              disambiguator = 0 }\n                            ]\n                          }\n                        };\n                      name = \"len\" }};\n                  hir_id = (Some (\"263\", \"291\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"96\"; line = \"430\" };\n                    lo = { Types.col = \"93\"; line = \"430\" } };\n                  ty = (Types.Uint Types.U32) }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"97\"; line = \"430\" };\n                lo = { Types.col = \"20\"; line = \"430\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 17939); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3103 };\n                      { Types.data =\n                        (Types.ValueNs \"SSL_CTX_set_alpn_protos\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"53\"; line = \"430\" };\n                  lo = { Types.col = \"20\"; line = \"430\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.RawPtr ((Types.Uint Types.U8), false));\n                         (Types.Uint Types.U32)];\n                       output = (Types.Int Types.I32); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.RawPtr ((Types.Uint Types.U8), false));\n                       (Types.Uint Types.U32)];\n                     output = (Types.Int Types.I32); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"263\", \"276\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"97\"; line = \"430\" };\n              lo = { Types.col = \"20\"; line = \"430\" } };\n            ty = (Types.Int Types.I32) });\n    region_scope = { Types.data = Types.Node; id = \"293\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"99\"; line = \"430\" };\n      lo = { Types.col = \"11\"; line = \"430\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"263\", \"275\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"99\"; line = \"430\" };\n    lo = { Types.col = \"11\"; line = \"430\" } };\n  ty = (Types.Int Types.I32) }"

            <:
            i32) =.
          0l
        then
          Core.Result.Result_Ok (() <: Prims.unit)
          <:
          Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
        else
          Core.Result.Result_Err
          (Core.Convert.f_into #Sandwich_proto.Errors.t_ALPNError
              #Sandwich.Error.t_Error
              #FStar.Tactics.Typeclasses.solve
              (Sandwich_proto.Errors.ALPNError_ALPNERROR_INVALID_STRING
                <:
                Sandwich_proto.Errors.t_ALPNError))
          <:
          Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
      | Core.Result.Result_Err err ->
        Core.Result.Result_Err (Core.Convert.f_from #FStar.Tactics.Typeclasses.solve err)
        <:
        Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
  | Core.Result.Result_Err err ->
    Core.Result.Result_Err (Core.Convert.f_from #FStar.Tactics.Typeclasses.solve err)
    <:
    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error

let impl__SslContext__set_certificate
      (self: t_SslContext)
      (certificate: Core.Ptr.Non_null.t_NonNull Openssl3.t_x509_st)
     =
  if
    (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
        "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 268);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs \"set_certificate\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"58\"; line = \"442\" };\n                                lo = { Types.col = \"54\"; line = \"442\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"268\", \"15\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"58\"; line = \"442\" };\n                            lo = { Types.col = \"54\"; line = \"442\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"268\", \"14\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"60\"; line = \"442\" };\n                        lo = { Types.col = \"54\"; line = \"442\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"69\"; line = \"442\" };\n                     lo = { Types.col = \"61\"; line = \"442\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"67\"; line = \"442\" };\n                       lo = { Types.col = \"61\"; line = \"442\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"268\", \"12\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"69\"; line = \"442\" };\n                   lo = { Types.col = \"54\"; line = \"442\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {\n                    args =\n                    [{ Types.attributes = [];\n                       contents =\n                       Types.VarRef {\n                         id =\n                         { Types.id =\n                           { Types.local_id = \"4\";\n                             owner =\n                             { Types.index = (0, 268); krate = \"sandwich\";\n                               path =\n                               [{ Types.data =\n                                  (Types.TypeNs \"implementation\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"openssl3\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"tunnel\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"context\");\n                                   disambiguator = 0 };\n                                 { Types.data = Types.Impl; disambiguator = 4\n                                   };\n                                 { Types.data =\n                                   (Types.ValueNs \"set_certificate\");\n                                   disambiguator = 0 }\n                                 ]\n                               }\n                             };\n                           name = \"certificate\" }};\n                       hir_id = (Some (\"268\", \"19\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3/tunnel/context.rs\"));\n                         hi = { Types.col = \"82\"; line = \"442\" };\n                         lo = { Types.col = \"71\"; line = \"442\" } };\n                       ty =\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (2, 2222); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ptr\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"non_null\");\n                               disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"NonNull\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (27, 21223);\n                                 krate = \"openssl3\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"x509_st\");\n                                    disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []})\n                           ];\n                         trait_refs = []}\n                       }\n                      ];\n                    bounds_impls = [];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"91\"; line = \"442\" };\n                      lo = { Types.col = \"83\"; line = \"442\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2245); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = Types.Impl; disambiguator = 3 };\n                            { Types.data = (Types.ValueNs \"as_ptr\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"89\"; line = \"442\" };\n                        lo = { Types.col = \"83\"; line = \"442\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [Types.Adt {\n                                def_id =\n                                { Types.index = (2, 2222); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ptr\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"non_null\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"NonNull\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args =\n                                [(Types.Type\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (27, 21223);\n                                        krate = \"openssl3\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"x509_st\");\n                                           disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args = []; trait_refs = []})\n                                  ];\n                                trait_refs = []}\n                               ];\n                             output =\n                             (Types.RawPtr\n                                (Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21223);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"x509_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []},\n                                 true));\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args =\n                    [(Types.Type\n                        Types.Adt {\n                          def_id =\n                          { Types.index = (27, 21223); krate = \"openssl3\";\n                            path =\n                            [{ Types.data = (Types.TypeNs \"x509_st\");\n                               disambiguator = 0 }\n                              ]\n                            };\n                          generic_args = []; trait_refs = []})\n                      ];\n                    trait = None;\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [Types.Adt {\n                              def_id =\n                              { Types.index = (2, 2222); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ptr\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"non_null\");\n                                    disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"NonNull\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21223);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"x509_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []})\n                                ];\n                              trait_refs = []}\n                             ];\n                           output =\n                           (Types.RawPtr\n                              (Types.Adt {\n                                 def_id =\n                                 { Types.index = (27, 21223);\n                                   krate = \"openssl3\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"x509_st\");\n                                      disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []},\n                               true));\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"268\", \"17\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"91\"; line = \"442\" };\n                    lo = { Types.col = \"71\"; line = \"442\" } };\n                  ty =\n                  (Types.RawPtr\n                     (Types.Adt {\n                        def_id =\n                        { Types.index = (27, 21223); krate = \"openssl3\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"x509_st\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        generic_args = []; trait_refs = []},\n                      true))\n                  }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"92\"; line = \"442\" };\n                lo = { Types.col = \"20\"; line = \"442\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18388); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3294 };\n                      { Types.data =\n                        (Types.ValueNs \"SSL_CTX_use_certificate\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"53\"; line = \"442\" };\n                  lo = { Types.col = \"20\"; line = \"442\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.RawPtr\n                            (Types.Adt {\n                               def_id =\n                               { Types.index = (27, 21223);\n                                 krate = \"openssl3\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"x509_st\");\n                                    disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []},\n                             true))\n                         ];\n                       output = (Types.Int Types.I32); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.RawPtr\n                          (Types.Adt {\n                             def_id =\n                             { Types.index = (27, 21223); krate = \"openssl3\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"x509_st\");\n                                  disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           true))\n                       ];\n                     output = (Types.Int Types.I32); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"268\", \"8\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"92\"; line = \"442\" };\n              lo = { Types.col = \"20\"; line = \"442\" } };\n            ty = (Types.Int Types.I32) });\n    region_scope = { Types.data = Types.Node; id = \"21\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"94\"; line = \"442\" };\n      lo = { Types.col = \"11\"; line = \"442\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"268\", \"7\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"94\"; line = \"442\" };\n    lo = { Types.col = \"11\"; line = \"442\" } };\n  ty = (Types.Int Types.I32) }"

      <:
      i32) =.
    1l
  then
    Core.Result.Result_Ok (() <: Prims.unit)
    <:
    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
  else
    let res:Alloc.String.t_String =
      Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
            (sz 1)
            (let list = ["failed to use certificate for authentication: "] in
              FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
              Rust_primitives.Hax.array_of_list 1 list)
            (let list =
                [
                  Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                    (Sandwich.Implementation.Openssl3.errstr () <: Alloc.String.t_String)
                  <:
                  Core.Fmt.Rt.t_Argument
                ]
              in
              FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
              Rust_primitives.Hax.array_of_list 1 list)
          <:
          Core.Fmt.t_Arguments)
    in
    Core.Result.Result_Err
    (Core.Convert.f_into #(Sandwich_proto.Errors.t_CertificateError & Alloc.String.t_String)
        #Sandwich.Error.t_Error
        #FStar.Tactics.Typeclasses.solve
        ((Sandwich_proto.Errors.CertificateError_CERTIFICATEERROR_UNSUPPORTED
            <:
            Sandwich_proto.Errors.t_CertificateError),
          res
          <:
          (Sandwich_proto.Errors.t_CertificateError & Alloc.String.t_String)))
    <:
    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error

let impl__SslContext__set_default_cipher_list (self: t_SslContext) =
  match
    Core.Option.impl__ok_or #(Core.Ptr.Non_null.t_NonNull i8)
      #(Sandwich_proto.Errors.t_SystemError & string)
      (Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
          "rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"core::ptr::non_null::impl_3__new\")::<int>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"core::ptr::const_ptr::impl__cast_mut::<\\n        int,\\n    >(\\n        rust_primitives::hax::failure(\\n            \\\"(AST import) Unsafe blocks are not allowed.\\\",\\n            \\\"{ Types.attributes = [];\\\\n  contents =\\\\n  Types.Block {\\\\n    expr =\\\\n    (Some { Types.attributes = [];\\\\n            contents =\\\\n            Types.Call {args = []; bounds_impls = [];\\\\n              fn_span =\\\\n              { Types.filename =\\\\n                (Types.Real\\\\n                   (Types.LocalPath\\\\n                      \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                hi = { Types.col = \\\\\\\"70\\\\\\\"; line = \\\\\\\"266\\\\\\\" };\\\\n                lo = { Types.col = \\\\\\\"34\\\\\\\"; line = \\\\\\\"266\\\\\\\" } };\\\\n              from_hir_call = true;\\\\n              fun' =\\\\n              { Types.attributes = [];\\\\n                contents =\\\\n                Types.GlobalName {\\\\n                  id =\\\\n                  { Types.index = (27, 18934); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                    path =\\\\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3562 };\\\\n                      { Types.data =\\\\n                        (Types.ValueNs \\\\\\\"OSSL_default_cipher_list\\\\\\\");\\\\n                        disambiguator = 0 }\\\\n                      ]\\\\n                    }};\\\\n                hir_id = None;\\\\n                span =\\\\n                { Types.filename =\\\\n                  (Types.Real\\\\n                     (Types.LocalPath\\\\n                        \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                  hi = { Types.col = \\\\\\\"68\\\\\\\"; line = \\\\\\\"266\\\\\\\" };\\\\n                  lo = { Types.col = \\\\\\\"34\\\\\\\"; line = \\\\\\\"266\\\\\\\" } };\\\\n                ty =\\\\n                (Types.Arrow\\\\n                   { Types.bound_vars = [];\\\\n                     value =\\\\n                     { Types.abi = Types.Abi {todo = \\\\\\\"C { unwind: false }\\\\\\\"};\\\\n                       c_variadic = false; inputs = [];\\\\n                       output = (Types.RawPtr ((Types.Int Types.I8), false));\\\\n                       safety = Types.Unsafe }\\\\n                     })\\\\n                };\\\\n              generic_args = []; trait = None;\\\\n              ty =\\\\n              (Types.Arrow\\\\n                 { Types.bound_vars = [];\\\\n                   value =\\\\n                   { Types.abi = Types.Abi {todo = \\\\\\\"C { unwind: false }\\\\\\\"};\\\\n                     c_variadic = false; inputs = [];\\\\n                     output = (Types.RawPtr ((Types.Int Types.I8), false));\\\\n                     safety = Types.Unsafe }\\\\n                   })};\\\\n            hir_id = (Some (\\\\\\\"253\\\\\\\", \\\\\\\"15\\\\\\\"));\\\\n            span =\\\\n            { Types.filename =\\\\n              (Types.Real\\\\n                 (Types.LocalPath\\\\n                    \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n              hi = { Types.col = \\\\\\\"70\\\\\\\"; line = \\\\\\\"266\\\\\\\" };\\\\n              lo = { Types.col = \\\\\\\"34\\\\\\\"; line = \\\\\\\"266\\\\\\\" } };\\\\n            ty = (Types.RawPtr ((Types.Int Types.I8), false)) });\\\\n    region_scope = { Types.data = Types.Node; id = \\\\\\\"19\\\\\\\" };\\\\n    safety_mode = Types.ExplicitUnsafe;\\\\n    span =\\\\n    { Types.filename =\\\\n      (Types.Real\\\\n         (Types.LocalPath \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n      hi = { Types.col = \\\\\\\"72\\\\\\\"; line = \\\\\\\"266\\\\\\\" };\\\\n      lo = { Types.col = \\\\\\\"25\\\\\\\"; line = \\\\\\\"266\\\\\\\" } };\\\\n    stmts = []; targeted_by_break = false};\\\\n  hir_id = (Some (\\\\\\\"253\\\\\\\", \\\\\\\"14\\\\\\\"));\\\\n  span =\\\\n  { Types.filename =\\\\n    (Types.Real\\\\n       (Types.LocalPath \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n    hi = { Types.col = \\\\\\\"72\\\\\\\"; line = \\\\\\\"266\\\\\\\" };\\\\n    lo = { Types.col = \\\\\\\"25\\\\\\\"; line = \\\\\\\"266\\\\\\\" } };\\\\n  ty = (Types.RawPtr ((Types.Int Types.I8), false)) }\\\",\\n        ),\\n    )\"))"

        <:
        Core.Option.t_Option (Core.Ptr.Non_null.t_NonNull i8))
      ((Sandwich_proto.Errors.SystemError_SYSTEMERROR_BACKEND <: Sandwich_proto.Errors.t_SystemError
        ),
        "`OSSL_default_cipher_list` returned NULL"
        <:
        (Sandwich_proto.Errors.t_SystemError & string))
  with
  | Core.Result.Result_Ok cstr ->
    if
      (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
          "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 253);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs\n                                             \"set_default_cipher_list\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"58\"; line = \"270\" };\n                                lo = { Types.col = \"54\"; line = \"270\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"253\", \"55\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"58\"; line = \"270\" };\n                            lo = { Types.col = \"54\"; line = \"270\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"253\", \"54\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"60\"; line = \"270\" };\n                        lo = { Types.col = \"54\"; line = \"270\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"69\"; line = \"270\" };\n                     lo = { Types.col = \"61\"; line = \"270\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"67\"; line = \"270\" };\n                       lo = { Types.col = \"61\"; line = \"270\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"253\", \"52\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"69\"; line = \"270\" };\n                   lo = { Types.col = \"54\"; line = \"270\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.PointerCoercion {cast = Types.MutToConstPointer;\n                    source =\n                    { Types.attributes = [];\n                      contents =\n                      Types.Call {\n                        args =\n                        [{ Types.attributes = [];\n                           contents =\n                           Types.VarRef {\n                             id =\n                             { Types.id =\n                               { Types.local_id = \"44\";\n                                 owner =\n                                 { Types.index = (0, 253);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data =\n                                      (Types.TypeNs \"implementation\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"openssl3\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"tunnel\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"context\");\n                                       disambiguator = 0 };\n                                     { Types.data = Types.Impl;\n                                       disambiguator = 4 };\n                                     { Types.data =\n                                       (Types.ValueNs\n                                          \"set_default_cipher_list\");\n                                       disambiguator = 0 }\n                                     ]\n                                   }\n                                 };\n                               name = \"cstr\" }};\n                           hir_id = (Some (\"253\", \"59\"));\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"75\"; line = \"270\" };\n                             lo = { Types.col = \"71\"; line = \"270\" } };\n                           ty =\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type (Types.Int Types.I8))];\n                             trait_refs = []}\n                           }\n                          ];\n                        bounds_impls = [];\n                        fn_span =\n                        { Types.filename =\n                          (Types.Real\n                             (Types.LocalPath\n                                \"rust/implementation/openssl3/tunnel/context.rs\"));\n                          hi = { Types.col = \"84\"; line = \"270\" };\n                          lo = { Types.col = \"76\"; line = \"270\" } };\n                        from_hir_call = true;\n                        fun' =\n                        { Types.attributes = [];\n                          contents =\n                          Types.GlobalName {\n                            id =\n                            { Types.index = (2, 2245); krate = \"core\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ptr\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"non_null\");\n                                  disambiguator = 0 };\n                                { Types.data = Types.Impl; disambiguator = 3\n                                  };\n                                { Types.data = (Types.ValueNs \"as_ptr\");\n                                  disambiguator = 0 }\n                                ]\n                              }};\n                          hir_id = None;\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"82\"; line = \"270\" };\n                            lo = { Types.col = \"76\"; line = \"270\" } };\n                          ty =\n                          (Types.Arrow\n                             { Types.bound_vars = [];\n                               value =\n                               { Types.abi = Types.Abi {todo = \"Rust\"};\n                                 c_variadic = false;\n                                 inputs =\n                                 [Types.Adt {\n                                    def_id =\n                                    { Types.index = (2, 2222);\n                                      krate = \"core\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"ptr\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"non_null\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"NonNull\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Type (Types.Int Types.I8))];\n                                    trait_refs = []}\n                                   ];\n                                 output =\n                                 (Types.RawPtr ((Types.Int Types.I8), true));\n                                 safety = Types.Safe }\n                               })\n                          };\n                        generic_args = [(Types.Type (Types.Int Types.I8))];\n                        trait = None;\n                        ty =\n                        (Types.Arrow\n                           { Types.bound_vars = [];\n                             value =\n                             { Types.abi = Types.Abi {todo = \"Rust\"};\n                               c_variadic = false;\n                               inputs =\n                               [Types.Adt {\n                                  def_id =\n                                  { Types.index = (2, 2222); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ptr\");\n                                       disambiguator = 0 };\n                                      { Types.data =\n                                        (Types.TypeNs \"non_null\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"NonNull\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Type (Types.Int Types.I8))];\n                                  trait_refs = []}\n                                 ];\n                               output =\n                               (Types.RawPtr ((Types.Int Types.I8), true));\n                               safety = Types.Safe }\n                             })};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"84\"; line = \"270\" };\n                        lo = { Types.col = \"71\"; line = \"270\" } };\n                      ty = (Types.RawPtr ((Types.Int Types.I8), true)) }};\n                  hir_id = (Some (\"253\", \"57\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"84\"; line = \"270\" };\n                    lo = { Types.col = \"71\"; line = \"270\" } };\n                  ty = (Types.RawPtr ((Types.Int Types.I8), false)) }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"85\"; line = \"270\" };\n                lo = { Types.col = \"20\"; line = \"270\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18138); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3169 };\n                      { Types.data =\n                        (Types.ValueNs \"SSL_CTX_set_cipher_list\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"53\"; line = \"270\" };\n                  lo = { Types.col = \"20\"; line = \"270\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.RawPtr ((Types.Int Types.I8), false))];\n                       output = (Types.Int Types.I32); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.RawPtr ((Types.Int Types.I8), false))];\n                     output = (Types.Int Types.I32); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"253\", \"48\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"85\"; line = \"270\" };\n              lo = { Types.col = \"20\"; line = \"270\" } };\n            ty = (Types.Int Types.I32) });\n    region_scope = { Types.data = Types.Node; id = \"61\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"87\"; line = \"270\" };\n      lo = { Types.col = \"11\"; line = \"270\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"253\", \"47\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"87\"; line = \"270\" };\n    lo = { Types.col = \"11\"; line = \"270\" } };\n  ty = (Types.Int Types.I32) }"

        <:
        i32) =.
      1l
    then
      Core.Result.Result_Ok (() <: Prims.unit)
      <:
      Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
    else
      let res:Alloc.String.t_String =
        Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
              (sz 1)
              (let list = ["failed to set the cipher list: "] in
                FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                Rust_primitives.Hax.array_of_list 1 list)
              (let list =
                  [
                    Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                      (Sandwich.Implementation.Openssl3.errstr () <: Alloc.String.t_String)
                    <:
                    Core.Fmt.Rt.t_Argument
                  ]
                in
                FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                Rust_primitives.Hax.array_of_list 1 list)
            <:
            Core.Fmt.t_Arguments)
      in
      Core.Result.Result_Err
      (Core.Convert.f_into #(Sandwich_proto.Errors.t_TLSConfigurationError & Alloc.String.t_String)
          #Sandwich.Error.t_Error
          #FStar.Tactics.Typeclasses.solve
          ((Sandwich_proto.Errors.TLSConfigurationError_TLSCONFIGURATIONERROR_UNSUPPORTED_CIPHERSUITE
              <:
              Sandwich_proto.Errors.t_TLSConfigurationError),
            res
            <:
            (Sandwich_proto.Errors.t_TLSConfigurationError & Alloc.String.t_String)))
      <:
      Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
  | Core.Result.Result_Err err ->
    Core.Result.Result_Err (Core.Convert.f_from #FStar.Tactics.Typeclasses.solve err)
    <:
    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error

let impl__SslContext__set_default_ciphersuites (self: t_SslContext) =
  match
    Core.Option.impl__ok_or #(Core.Ptr.Non_null.t_NonNull i8)
      #(Sandwich_proto.Errors.t_SystemError & string)
      (Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
          "rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"core::ptr::non_null::impl_3__new\")::<int>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"core::ptr::const_ptr::impl__cast_mut::<\\n        int,\\n    >(\\n        rust_primitives::hax::failure(\\n            \\\"(AST import) Unsafe blocks are not allowed.\\\",\\n            \\\"{ Types.attributes = [];\\\\n  contents =\\\\n  Types.Block {\\\\n    expr =\\\\n    (Some { Types.attributes = [];\\\\n            contents =\\\\n            Types.Call {args = []; bounds_impls = [];\\\\n              fn_span =\\\\n              { Types.filename =\\\\n                (Types.Real\\\\n                   (Types.LocalPath\\\\n                      \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                hi = { Types.col = \\\\\\\"78\\\\\\\"; line = \\\\\\\"309\\\\\\\" };\\\\n                lo = { Types.col = \\\\\\\"41\\\\\\\"; line = \\\\\\\"309\\\\\\\" } };\\\\n              from_hir_call = true;\\\\n              fun' =\\\\n              { Types.attributes = [];\\\\n                contents =\\\\n                Types.GlobalName {\\\\n                  id =\\\\n                  { Types.index = (27, 18936); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                    path =\\\\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3563 };\\\\n                      { Types.data =\\\\n                        (Types.ValueNs \\\\\\\"OSSL_default_ciphersuites\\\\\\\");\\\\n                        disambiguator = 0 }\\\\n                      ]\\\\n                    }};\\\\n                hir_id = None;\\\\n                span =\\\\n                { Types.filename =\\\\n                  (Types.Real\\\\n                     (Types.LocalPath\\\\n                        \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                  hi = { Types.col = \\\\\\\"76\\\\\\\"; line = \\\\\\\"309\\\\\\\" };\\\\n                  lo = { Types.col = \\\\\\\"41\\\\\\\"; line = \\\\\\\"309\\\\\\\" } };\\\\n                ty =\\\\n                (Types.Arrow\\\\n                   { Types.bound_vars = [];\\\\n                     value =\\\\n                     { Types.abi = Types.Abi {todo = \\\\\\\"C { unwind: false }\\\\\\\"};\\\\n                       c_variadic = false; inputs = [];\\\\n                       output = (Types.RawPtr ((Types.Int Types.I8), false));\\\\n                       safety = Types.Unsafe }\\\\n                     })\\\\n                };\\\\n              generic_args = []; trait = None;\\\\n              ty =\\\\n              (Types.Arrow\\\\n                 { Types.bound_vars = [];\\\\n                   value =\\\\n                   { Types.abi = Types.Abi {todo = \\\\\\\"C { unwind: false }\\\\\\\"};\\\\n                     c_variadic = false; inputs = [];\\\\n                     output = (Types.RawPtr ((Types.Int Types.I8), false));\\\\n                     safety = Types.Unsafe }\\\\n                   })};\\\\n            hir_id = (Some (\\\\\\\"257\\\\\\\", \\\\\\\"15\\\\\\\"));\\\\n            span =\\\\n            { Types.filename =\\\\n              (Types.Real\\\\n                 (Types.LocalPath\\\\n                    \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n              hi = { Types.col = \\\\\\\"78\\\\\\\"; line = \\\\\\\"309\\\\\\\" };\\\\n              lo = { Types.col = \\\\\\\"41\\\\\\\"; line = \\\\\\\"309\\\\\\\" } };\\\\n            ty = (Types.RawPtr ((Types.Int Types.I8), false)) });\\\\n    region_scope = { Types.data = Types.Node; id = \\\\\\\"19\\\\\\\" };\\\\n    safety_mode = Types.ExplicitUnsafe;\\\\n    span =\\\\n    { Types.filename =\\\\n      (Types.Real\\\\n         (Types.LocalPath \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n      hi = { Types.col = \\\\\\\"80\\\\\\\"; line = \\\\\\\"309\\\\\\\" };\\\\n      lo = { Types.col = \\\\\\\"32\\\\\\\"; line = \\\\\\\"309\\\\\\\" } };\\\\n    stmts = []; targeted_by_break = false};\\\\n  hir_id = (Some (\\\\\\\"257\\\\\\\", \\\\\\\"14\\\\\\\"));\\\\n  span =\\\\n  { Types.filename =\\\\n    (Types.Real\\\\n       (Types.LocalPath \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n    hi = { Types.col = \\\\\\\"80\\\\\\\"; line = \\\\\\\"309\\\\\\\" };\\\\n    lo = { Types.col = \\\\\\\"32\\\\\\\"; line = \\\\\\\"309\\\\\\\" } };\\\\n  ty = (Types.RawPtr ((Types.Int Types.I8), false)) }\\\",\\n        ),\\n    )\"))"

        <:
        Core.Option.t_Option (Core.Ptr.Non_null.t_NonNull i8))
      ((Sandwich_proto.Errors.SystemError_SYSTEMERROR_BACKEND <: Sandwich_proto.Errors.t_SystemError
        ),
        "`OSSL_default_ciphersuites` returned NULL"
        <:
        (Sandwich_proto.Errors.t_SystemError & string))
  with
  | Core.Result.Result_Ok cstr ->
    if
      (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
          "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 257);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs\n                                             \"set_default_ciphersuites\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"59\"; line = \"314\" };\n                                lo = { Types.col = \"55\"; line = \"314\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"257\", \"55\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"59\"; line = \"314\" };\n                            lo = { Types.col = \"55\"; line = \"314\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"257\", \"54\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"61\"; line = \"314\" };\n                        lo = { Types.col = \"55\"; line = \"314\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"70\"; line = \"314\" };\n                     lo = { Types.col = \"62\"; line = \"314\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"68\"; line = \"314\" };\n                       lo = { Types.col = \"62\"; line = \"314\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"257\", \"52\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"70\"; line = \"314\" };\n                   lo = { Types.col = \"55\"; line = \"314\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.PointerCoercion {cast = Types.MutToConstPointer;\n                    source =\n                    { Types.attributes = [];\n                      contents =\n                      Types.Call {\n                        args =\n                        [{ Types.attributes = [];\n                           contents =\n                           Types.VarRef {\n                             id =\n                             { Types.id =\n                               { Types.local_id = \"44\";\n                                 owner =\n                                 { Types.index = (0, 257);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data =\n                                      (Types.TypeNs \"implementation\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"openssl3\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"tunnel\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"context\");\n                                       disambiguator = 0 };\n                                     { Types.data = Types.Impl;\n                                       disambiguator = 4 };\n                                     { Types.data =\n                                       (Types.ValueNs\n                                          \"set_default_ciphersuites\");\n                                       disambiguator = 0 }\n                                     ]\n                                   }\n                                 };\n                               name = \"cstr\" }};\n                           hir_id = (Some (\"257\", \"59\"));\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"76\"; line = \"314\" };\n                             lo = { Types.col = \"72\"; line = \"314\" } };\n                           ty =\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type (Types.Int Types.I8))];\n                             trait_refs = []}\n                           }\n                          ];\n                        bounds_impls = [];\n                        fn_span =\n                        { Types.filename =\n                          (Types.Real\n                             (Types.LocalPath\n                                \"rust/implementation/openssl3/tunnel/context.rs\"));\n                          hi = { Types.col = \"85\"; line = \"314\" };\n                          lo = { Types.col = \"77\"; line = \"314\" } };\n                        from_hir_call = true;\n                        fun' =\n                        { Types.attributes = [];\n                          contents =\n                          Types.GlobalName {\n                            id =\n                            { Types.index = (2, 2245); krate = \"core\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ptr\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"non_null\");\n                                  disambiguator = 0 };\n                                { Types.data = Types.Impl; disambiguator = 3\n                                  };\n                                { Types.data = (Types.ValueNs \"as_ptr\");\n                                  disambiguator = 0 }\n                                ]\n                              }};\n                          hir_id = None;\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"83\"; line = \"314\" };\n                            lo = { Types.col = \"77\"; line = \"314\" } };\n                          ty =\n                          (Types.Arrow\n                             { Types.bound_vars = [];\n                               value =\n                               { Types.abi = Types.Abi {todo = \"Rust\"};\n                                 c_variadic = false;\n                                 inputs =\n                                 [Types.Adt {\n                                    def_id =\n                                    { Types.index = (2, 2222);\n                                      krate = \"core\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"ptr\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"non_null\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"NonNull\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Type (Types.Int Types.I8))];\n                                    trait_refs = []}\n                                   ];\n                                 output =\n                                 (Types.RawPtr ((Types.Int Types.I8), true));\n                                 safety = Types.Safe }\n                               })\n                          };\n                        generic_args = [(Types.Type (Types.Int Types.I8))];\n                        trait = None;\n                        ty =\n                        (Types.Arrow\n                           { Types.bound_vars = [];\n                             value =\n                             { Types.abi = Types.Abi {todo = \"Rust\"};\n                               c_variadic = false;\n                               inputs =\n                               [Types.Adt {\n                                  def_id =\n                                  { Types.index = (2, 2222); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ptr\");\n                                       disambiguator = 0 };\n                                      { Types.data =\n                                        (Types.TypeNs \"non_null\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"NonNull\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Type (Types.Int Types.I8))];\n                                  trait_refs = []}\n                                 ];\n                               output =\n                               (Types.RawPtr ((Types.Int Types.I8), true));\n                               safety = Types.Safe }\n                             })};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"85\"; line = \"314\" };\n                        lo = { Types.col = \"72\"; line = \"314\" } };\n                      ty = (Types.RawPtr ((Types.Int Types.I8), true)) }};\n                  hir_id = (Some (\"257\", \"57\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"85\"; line = \"314\" };\n                    lo = { Types.col = \"72\"; line = \"314\" } };\n                  ty = (Types.RawPtr ((Types.Int Types.I8), false)) }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"86\"; line = \"314\" };\n                lo = { Types.col = \"20\"; line = \"314\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18218); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3209 };\n                      { Types.data =\n                        (Types.ValueNs \"SSL_CTX_set_ciphersuites\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"54\"; line = \"314\" };\n                  lo = { Types.col = \"20\"; line = \"314\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.RawPtr ((Types.Int Types.I8), false))];\n                       output = (Types.Int Types.I32); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.RawPtr ((Types.Int Types.I8), false))];\n                     output = (Types.Int Types.I32); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"257\", \"48\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"86\"; line = \"314\" };\n              lo = { Types.col = \"20\"; line = \"314\" } };\n            ty = (Types.Int Types.I32) });\n    region_scope = { Types.data = Types.Node; id = \"61\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"88\"; line = \"314\" };\n      lo = { Types.col = \"11\"; line = \"314\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"257\", \"47\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"88\"; line = \"314\" };\n    lo = { Types.col = \"11\"; line = \"314\" } };\n  ty = (Types.Int Types.I32) }"

        <:
        i32) =.
      1l
    then
      Core.Result.Result_Ok (() <: Prims.unit)
      <:
      Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
    else
      let res:Alloc.String.t_String =
        Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
              (sz 1)
              (let list = ["failed to set the ciphersuites: "] in
                FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                Rust_primitives.Hax.array_of_list 1 list)
              (let list =
                  [
                    Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                      (Sandwich.Implementation.Openssl3.errstr () <: Alloc.String.t_String)
                    <:
                    Core.Fmt.Rt.t_Argument
                  ]
                in
                FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                Rust_primitives.Hax.array_of_list 1 list)
            <:
            Core.Fmt.t_Arguments)
      in
      Core.Result.Result_Err
      (Core.Convert.f_into #(Sandwich_proto.Errors.t_TLSConfigurationError & Alloc.String.t_String)
          #Sandwich.Error.t_Error
          #FStar.Tactics.Typeclasses.solve
          ((Sandwich_proto.Errors.TLSConfigurationError_TLSCONFIGURATIONERROR_UNSUPPORTED_CIPHERSUITE
              <:
              Sandwich_proto.Errors.t_TLSConfigurationError),
            res
            <:
            (Sandwich_proto.Errors.t_TLSConfigurationError & Alloc.String.t_String)))
      <:
      Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
  | Core.Result.Result_Err err ->
    Core.Result.Result_Err (Core.Convert.f_from #FStar.Tactics.Typeclasses.solve err)
    <:
    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error

let impl__SslContext__set_default_parameters (self: t_SslContext) =
  let _:Prims.unit =
    Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
      "{ Types.attributes = [];\n  contents =\n  Types.Block {expr = None;\n    region_scope = { Types.data = Types.Node; id = \"17\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"9\"; line = \"226\" };\n      lo = { Types.col = \"8\"; line = \"224\" } };\n    stmts =\n    [{ Types.kind =\n       Types.Expr {\n         expr =\n         { Types.attributes = [];\n           contents =\n           Types.Call {\n             args =\n             [{ Types.attributes = [];\n                contents =\n                Types.Call {\n                  args =\n                  [{ Types.attributes = [];\n                     contents =\n                     Types.Field {\n                       field =\n                       { Types.index = (0, 237); krate = \"sandwich\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"implementation\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"openssl3\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"tunnel\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"context\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"SslContext\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.ValueNs \"0\");\n                             disambiguator = 0 }\n                           ]\n                         };\n                       lhs =\n                       { Types.attributes = [];\n                         contents =\n                         Types.Deref {\n                           arg =\n                           { Types.attributes = [];\n                             contents =\n                             Types.VarRef {\n                               id =\n                               { Types.id =\n                                 { Types.local_id = \"2\";\n                                   owner =\n                                   { Types.index = (0, 248);\n                                     krate = \"sandwich\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"implementation\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"openssl3\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"tunnel\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"context\");\n                                         disambiguator = 0 };\n                                       { Types.data = Types.Impl;\n                                         disambiguator = 4 };\n                                       { Types.data =\n                                         (Types.ValueNs\n                                            \"set_default_parameters\");\n                                         disambiguator = 0 }\n                                       ]\n                                     }\n                                   };\n                                 name = \"self\" }};\n                             hir_id = None;\n                             span =\n                             { Types.filename =\n                               (Types.Real\n                                  (Types.LocalPath\n                                     \"rust/implementation/openssl3/tunnel/context.rs\"));\n                               hi = { Types.col = \"53\"; line = \"225\" };\n                               lo = { Types.col = \"49\"; line = \"225\" } };\n                             ty =\n                             (Types.Ref\n                                ({ Types.kind = Types.ReErased },\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (0, 235);\n                                     krate = \"sandwich\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"implementation\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"openssl3\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"tunnel\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"context\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"SslContext\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []},\n                                 false))\n                             }};\n                         hir_id = (Some (\"248\", \"12\"));\n                         span =\n                         { Types.filename =\n                           (Types.Real\n                              (Types.LocalPath\n                                 \"rust/implementation/openssl3/tunnel/context.rs\"));\n                           hi = { Types.col = \"53\"; line = \"225\" };\n                           lo = { Types.col = \"49\"; line = \"225\" } };\n                         ty =\n                         Types.Adt {\n                           def_id =\n                           { Types.index = (0, 235); krate = \"sandwich\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"implementation\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"openssl3\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"tunnel\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"context\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"SslContext\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args = []; trait_refs = []}\n                         }};\n                     hir_id = (Some (\"248\", \"11\"));\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"55\"; line = \"225\" };\n                       lo = { Types.col = \"49\"; line = \"225\" } };\n                     ty =\n                     Types.Adt {\n                       def_id =\n                       { Types.index = (2, 2222); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"NonNull\");\n                             disambiguator = 0 }\n                           ]\n                         };\n                       generic_args =\n                       [(Types.Type\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (27, 21403); krate = \"openssl3\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                  disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []})\n                         ];\n                       trait_refs = []}\n                     }\n                    ];\n                  bounds_impls = [];\n                  fn_span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"64\"; line = \"225\" };\n                    lo = { Types.col = \"56\"; line = \"225\" } };\n                  from_hir_call = true;\n                  fun' =\n                  { Types.attributes = [];\n                    contents =\n                    Types.GlobalName {\n                      id =\n                      { Types.index = (2, 2245); krate = \"core\";\n                        path =\n                        [{ Types.data = (Types.TypeNs \"ptr\");\n                           disambiguator = 0 };\n                          { Types.data = (Types.TypeNs \"non_null\");\n                            disambiguator = 0 };\n                          { Types.data = Types.Impl; disambiguator = 3 };\n                          { Types.data = (Types.ValueNs \"as_ptr\");\n                            disambiguator = 0 }\n                          ]\n                        }};\n                    hir_id = None;\n                    span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"62\"; line = \"225\" };\n                      lo = { Types.col = \"56\"; line = \"225\" } };\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [Types.Adt {\n                              def_id =\n                              { Types.index = (2, 2222); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ptr\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"non_null\");\n                                    disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"NonNull\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21403);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"ssl_ctx_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []})\n                                ];\n                              trait_refs = []}\n                             ];\n                           output =\n                           (Types.RawPtr\n                              (Types.Adt {\n                                 def_id =\n                                 { Types.index = (27, 21403);\n                                   krate = \"openssl3\";\n                                   path =\n                                   [{ Types.data =\n                                      (Types.TypeNs \"ssl_ctx_st\");\n                                      disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []},\n                               true));\n                           safety = Types.Safe }\n                         })\n                    };\n                  generic_args =\n                  [(Types.Type\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (27, 21403); krate = \"openssl3\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        generic_args = []; trait_refs = []})\n                    ];\n                  trait = None;\n                  ty =\n                  (Types.Arrow\n                     { Types.bound_vars = [];\n                       value =\n                       { Types.abi = Types.Abi {todo = \"Rust\"};\n                         c_variadic = false;\n                         inputs =\n                         [Types.Adt {\n                            def_id =\n                            { Types.index = (2, 2222); krate = \"core\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ptr\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"non_null\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"NonNull\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args =\n                            [(Types.Type\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []})\n                              ];\n                            trait_refs = []}\n                           ];\n                         output =\n                         (Types.RawPtr\n                            (Types.Adt {\n                               def_id =\n                               { Types.index = (27, 21403);\n                                 krate = \"openssl3\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                    disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []},\n                             true));\n                         safety = Types.Safe }\n                       })};\n                hir_id = (Some (\"248\", \"9\"));\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"64\"; line = \"225\" };\n                  lo = { Types.col = \"49\"; line = \"225\" } };\n                ty =\n                (Types.RawPtr\n                   (Types.Adt {\n                      def_id =\n                      { Types.index = (27, 21403); krate = \"openssl3\";\n                        path =\n                        [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                           disambiguator = 0 }\n                          ]\n                        };\n                      generic_args = []; trait_refs = []},\n                    true))\n                };\n               { Types.attributes = [];\n                 contents =\n                 Types.NamedConst {args = [];\n                   def_id =\n                   { Types.index = (0, 249); krate = \"sandwich\";\n                     path =\n                     [{ Types.data = (Types.TypeNs \"implementation\");\n                        disambiguator = 0 };\n                       { Types.data = (Types.TypeNs \"openssl3\");\n                         disambiguator = 0 };\n                       { Types.data = (Types.TypeNs \"tunnel\");\n                         disambiguator = 0 };\n                       { Types.data = (Types.TypeNs \"context\");\n                         disambiguator = 0 };\n                       { Types.data = Types.Impl; disambiguator = 4 };\n                       { Types.data =\n                         (Types.ValueNs \"set_default_parameters\");\n                         disambiguator = 0 };\n                       { Types.data = (Types.ValueNs \"DISABLED\");\n                         disambiguator = 0 }\n                       ]\n                     };\n                   impl = None; user_ty = None};\n                 hir_id = (Some (\"248\", \"14\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"74\"; line = \"225\" };\n                   lo = { Types.col = \"66\"; line = \"225\" } };\n                 ty = (Types.Int Types.I32) }\n               ];\n             bounds_impls = [];\n             fn_span =\n             { Types.filename =\n               (Types.Real\n                  (Types.LocalPath\n                     \"rust/implementation/openssl3/tunnel/context.rs\"));\n               hi = { Types.col = \"75\"; line = \"225\" };\n               lo = { Types.col = \"12\"; line = \"225\" } };\n             from_hir_call = true;\n             fun' =\n             { Types.attributes = [];\n               contents =\n               Types.GlobalName {\n                 id =\n                 { Types.index = (27, 18659); krate = \"openssl3\";\n                   path =\n                   [{ Types.data = Types.ForeignMod; disambiguator = 3429 };\n                     { Types.data =\n                       (Types.ValueNs \"SSL_CTX_set_quiet_shutdown\");\n                       disambiguator = 0 }\n                     ]\n                   }};\n               hir_id = None;\n               span =\n               { Types.filename =\n                 (Types.Real\n                    (Types.LocalPath\n                       \"rust/implementation/openssl3/tunnel/context.rs\"));\n                 hi = { Types.col = \"48\"; line = \"225\" };\n                 lo = { Types.col = \"12\"; line = \"225\" } };\n               ty =\n               (Types.Arrow\n                  { Types.bound_vars = [];\n                    value =\n                    { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                      c_variadic = false;\n                      inputs =\n                      [(Types.RawPtr\n                          (Types.Adt {\n                             def_id =\n                             { Types.index = (27, 21403); krate = \"openssl3\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                  disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           true));\n                        (Types.Int Types.I32)];\n                      output = (Types.Tuple []); safety = Types.Unsafe }\n                    })\n               };\n             generic_args = []; trait = None;\n             ty =\n             (Types.Arrow\n                { Types.bound_vars = [];\n                  value =\n                  { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                    c_variadic = false;\n                    inputs =\n                    [(Types.RawPtr\n                        (Types.Adt {\n                           def_id =\n                           { Types.index = (27, 21403); krate = \"openssl3\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                disambiguator = 0 }\n                               ]\n                             };\n                           generic_args = []; trait_refs = []},\n                         true));\n                      (Types.Int Types.I32)];\n                    output = (Types.Tuple []); safety = Types.Unsafe }\n                  })};\n           hir_id = (Some (\"248\", \"5\"));\n           span =\n           { Types.filename =\n             (Types.Real\n                (Types.LocalPath\n                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n             hi = { Types.col = \"75\"; line = \"225\" };\n             lo = { Types.col = \"12\"; line = \"225\" } };\n           ty = (Types.Tuple []) };\n         scope = { Types.data = Types.Node; id = \"16\" }}\n       }\n      ];\n    targeted_by_break = false};\n  hir_id = (Some (\"248\", \"4\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"9\"; line = \"226\" };\n    lo = { Types.col = \"8\"; line = \"224\" } };\n  ty = (Types.Tuple []) }"

  in
  let _:Prims.unit = impl__SslContext__disable_session_cache_mode self in
  let _:Prims.unit = impl__SslContext__set_mode_release_buffers self in
  impl__SslContext__initialize_trusted_cert_store self

let impl__SslContext__set_kes
      (#impl_488124255_: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i5: Core.Convert.t_AsRef impl_488124255_ string)
      (self: t_SslContext)
      (kes: t_Slice impl_488124255_)
     =
  Rust_primitives.Hax.Control_flow_monad.Mexception.run (let! _:Prims.unit =
        if Core.Slice.impl__is_empty #impl_488124255_ kes
        then
          let! hoist6:Rust_primitives.Hax.t_Never =
            Core.Ops.Control_flow.ControlFlow_Break
            (Core.Result.Result_Err
              (Core.Convert.f_into #(Sandwich_proto.Errors.t_KEMError & string)
                  #Sandwich.Error.t_Error
                  #FStar.Tactics.Typeclasses.solve
                  ((Sandwich_proto.Errors.KEMError_KEMERROR_INVALID
                      <:
                      Sandwich_proto.Errors.t_KEMError),
                    "no KE specified"
                    <:
                    (Sandwich_proto.Errors.t_KEMError & string)))
              <:
              Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Rust_primitives.Hax.t_Never
          in
          Core.Ops.Control_flow.ControlFlow_Continue (Rust_primitives.Hax.never_to_any hoist6)
          <:
          Core.Ops.Control_flow.t_ControlFlow
            (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
        else
          Core.Ops.Control_flow.ControlFlow_Continue ()
          <:
          Core.Ops.Control_flow.t_ControlFlow
            (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
      in
      Core.Ops.Control_flow.ControlFlow_Continue
      (match
          Core.Result.impl__map_err #Alloc.Ffi.C_str.t_CString
            #Alloc.Ffi.C_str.t_NulError
            #(Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String)
            (Alloc.Ffi.C_str.impl__CString__new #Alloc.String.t_String
                (Alloc.Slice.impl__join #string
                    #string
                    (Core.Ops.Deref.f_deref #(Alloc.Vec.t_Vec string Alloc.Alloc.t_Global)
                        #FStar.Tactics.Typeclasses.solve
                        (Core.Iter.Traits.Iterator.f_collect #(Core.Iter.Adapters.Map.t_Map
                                (Core.Slice.Iter.t_Iter impl_488124255_) (impl_488124255_ -> string)
                            )
                            #FStar.Tactics.Typeclasses.solve
                            #(Alloc.Vec.t_Vec string Alloc.Alloc.t_Global)
                            (Core.Iter.Traits.Iterator.f_map #(Core.Slice.Iter.t_Iter
                                  impl_488124255_)
                                #FStar.Tactics.Typeclasses.solve
                                #string
                                (Core.Slice.impl__iter #impl_488124255_ kes
                                  <:
                                  Core.Slice.Iter.t_Iter impl_488124255_)
                                (fun s ->
                                    let s:impl_488124255_ = s in
                                    Core.Convert.f_as_ref #impl_488124255_
                                      #string
                                      #FStar.Tactics.Typeclasses.solve
                                      s
                                    <:
                                    string)
                              <:
                              Core.Iter.Adapters.Map.t_Map (Core.Slice.Iter.t_Iter impl_488124255_)
                                (impl_488124255_ -> string))
                          <:
                          Alloc.Vec.t_Vec string Alloc.Alloc.t_Global)
                      <:
                      t_Slice string)
                    ":"
                  <:
                  Alloc.String.t_String)
              <:
              Core.Result.t_Result Alloc.Ffi.C_str.t_CString Alloc.Ffi.C_str.t_NulError)
            (fun e ->
                let e:Alloc.Ffi.C_str.t_NulError = e in
                let res:Alloc.String.t_String =
                  Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
                        (sz 1)
                        (let list = ["failed to create the string list of KEs: "] in
                          FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                          Rust_primitives.Hax.array_of_list 1 list)
                        (let list =
                            [
                              Core.Fmt.Rt.impl_1__new_display #Alloc.Ffi.C_str.t_NulError e
                              <:
                              Core.Fmt.Rt.t_Argument
                            ]
                          in
                          FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                          Rust_primitives.Hax.array_of_list 1 list)
                      <:
                      Core.Fmt.t_Arguments)
                in
                (Sandwich_proto.Errors.SystemError_SYSTEMERROR_MEMORY
                  <:
                  Sandwich_proto.Errors.t_SystemError),
                res
                <:
                (Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String))
        with
        | Core.Result.Result_Ok list ->
          if
            (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
                "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 260);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs \"set_kes\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"20\"; line = \"373\" };\n                                lo = { Types.col = \"16\"; line = \"373\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"260\", \"128\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"20\"; line = \"373\" };\n                            lo = { Types.col = \"16\"; line = \"373\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"260\", \"127\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"22\"; line = \"373\" };\n                        lo = { Types.col = \"16\"; line = \"373\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"31\"; line = \"373\" };\n                     lo = { Types.col = \"23\"; line = \"373\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"29\"; line = \"373\" };\n                       lo = { Types.col = \"23\"; line = \"373\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"260\", \"125\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"31\"; line = \"373\" };\n                   lo = { Types.col = \"16\"; line = \"373\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Cast {\n                    source =\n                    { Types.attributes = [];\n                      contents =\n                      Types.NamedConst {args = [];\n                        def_id =\n                        { Types.index = (27, 10491); krate = \"openssl3\";\n                          path =\n                          [{ Types.data =\n                             (Types.ValueNs \"SSL_CTRL_SET_GROUPS_LIST\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        impl = None; user_ty = None};\n                      hir_id = (Some (\"260\", \"131\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"50\"; line = \"374\" };\n                        lo = { Types.col = \"16\"; line = \"374\" } };\n                      ty = (Types.Uint Types.U32) }};\n                  hir_id = (Some (\"260\", \"130\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"57\"; line = \"374\" };\n                    lo = { Types.col = \"16\"; line = \"374\" } };\n                  ty = (Types.Int Types.I32) };\n                { Types.attributes = [];\n                  contents =\n                  Types.Literal {\n                    lit =\n                    { Types.node = (Types.Int (\"0\", Types.Unsuffixed));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"17\"; line = \"375\" };\n                        lo = { Types.col = \"16\"; line = \"375\" } }\n                      };\n                    neg = false};\n                  hir_id = (Some (\"260\", \"136\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"17\"; line = \"375\" };\n                    lo = { Types.col = \"16\"; line = \"375\" } };\n                  ty = (Types.Int Types.I64) };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {\n                    args =\n                    [{ Types.attributes = [];\n                       contents =\n                       Types.Call {\n                         args =\n                         [{ Types.attributes = [];\n                            contents =\n                            Types.Call {\n                              args =\n                              [{ Types.attributes = [];\n                                 contents =\n                                 Types.Borrow {\n                                   arg =\n                                   { Types.attributes = [];\n                                     contents =\n                                     Types.Deref {\n                                       arg =\n                                       { Types.attributes = [];\n                                         contents =\n                                         Types.Call {\n                                           args =\n                                           [{ Types.attributes = [];\n                                              contents =\n                                              Types.Borrow {\n                                                arg =\n                                                { Types.attributes = [];\n                                                  contents =\n                                                  Types.VarRef {\n                                                    id =\n                                                    { Types.id =\n                                                      { Types.local_id =\n                                                        \"117\";\n                                                        owner =\n                                                        { Types.index =\n                                                          (0, 260);\n                                                          krate = \"sandwich\";\n                                                          path =\n                                                          [{ Types.data =\n                                                             (Types.TypeNs\n                                                                \"implementation\");\n                                                             disambiguator =\n                                                             0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"openssl3\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"tunnel\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"context\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              Types.Impl;\n                                                              disambiguator =\n                                                              4 };\n                                                            { Types.data =\n                                                              (Types.ValueNs\n                                                                 \"set_kes\");\n                                                              disambiguator =\n                                                              0 }\n                                                            ]\n                                                          }\n                                                        };\n                                                      name = \"list\" }};\n                                                  hir_id = None;\n                                                  span =\n                                                  { Types.filename =\n                                                    (Types.Real\n                                                       (Types.LocalPath\n                                                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                                    hi =\n                                                    { Types.col = \"20\";\n                                                      line = \"376\" };\n                                                    lo =\n                                                    { Types.col = \"16\";\n                                                      line = \"376\" }\n                                                    };\n                                                  ty =\n                                                  Types.Adt {\n                                                    def_id =\n                                                    { Types.index = (5, 7722);\n                                                      krate = \"alloc\";\n                                                      path =\n                                                      [{ Types.data =\n                                                         (Types.TypeNs \"ffi\");\n                                                         disambiguator = 0 };\n                                                        { Types.data =\n                                                          (Types.TypeNs\n                                                             \"c_str\");\n                                                          disambiguator = 0 };\n                                                        { Types.data =\n                                                          (Types.TypeNs\n                                                             \"CString\");\n                                                          disambiguator = 0 }\n                                                        ]\n                                                      };\n                                                    generic_args = [];\n                                                    trait_refs = []}\n                                                  };\n                                                borrow_kind = Types.Shared};\n                                              hir_id = None;\n                                              span =\n                                              { Types.filename =\n                                                (Types.Real\n                                                   (Types.LocalPath\n                                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                                hi =\n                                                { Types.col = \"20\";\n                                                  line = \"376\" };\n                                                lo =\n                                                { Types.col = \"16\";\n                                                  line = \"376\" }\n                                                };\n                                              ty =\n                                              (Types.Ref\n                                                 ({ Types.kind =\n                                                    Types.ReErased },\n                                                  Types.Adt {\n                                                    def_id =\n                                                    { Types.index = (5, 7722);\n                                                      krate = \"alloc\";\n                                                      path =\n                                                      [{ Types.data =\n                                                         (Types.TypeNs \"ffi\");\n                                                         disambiguator = 0 };\n                                                        { Types.data =\n                                                          (Types.TypeNs\n                                                             \"c_str\");\n                                                          disambiguator = 0 };\n                                                        { Types.data =\n                                                          (Types.TypeNs\n                                                             \"CString\");\n                                                          disambiguator = 0 }\n                                                        ]\n                                                      };\n                                                    generic_args = [];\n                                                    trait_refs = []},\n                                                  false))\n                                              }\n                                             ];\n                                           bounds_impls = [];\n                                           fn_span =\n                                           { Types.filename =\n                                             (Types.Real\n                                                (Types.LocalPath\n                                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                             hi =\n                                             { Types.col = \"29\"; line = \"376\"\n                                               };\n                                             lo =\n                                             { Types.col = \"16\"; line = \"376\"\n                                               }\n                                             };\n                                           from_hir_call = false;\n                                           fun' =\n                                           { Types.attributes = [];\n                                             contents =\n                                             Types.GlobalName {\n                                               id =\n                                               { Types.index = (2, 3455);\n                                                 krate = \"core\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"ops\");\n                                                    disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"deref\");\n                                                     disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"Deref\");\n                                                     disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.ValueNs \"deref\");\n                                                     disambiguator = 0 }\n                                                   ]\n                                                 }};\n                                             hir_id = None;\n                                             span =\n                                             { Types.filename =\n                                               (Types.Real\n                                                  (Types.LocalPath\n                                                     \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                               hi =\n                                               { Types.col = \"29\";\n                                                 line = \"376\" };\n                                               lo =\n                                               { Types.col = \"16\";\n                                                 line = \"376\" }\n                                               };\n                                             ty =\n                                             (Types.Arrow\n                                                { Types.bound_vars =\n                                                  [(Types.Region\n                                                      (Types.BrNamed\n                                                         ({ Types.index =\n                                                            (2, 55519);\n                                                            krate = \"core\";\n                                                            path =\n                                                            [{ Types.data =\n                                                               (Types.TypeNs\n                                                                  \"ops\");\n                                                               disambiguator =\n                                                               0 };\n                                                              { Types.data =\n                                                                (Types.TypeNs\n                                                                   \"deref\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                (Types.TypeNs\n                                                                   \"Deref\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                (Types.ValueNs\n                                                                   \"deref\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                (Types.LifetimeNs\n                                                                   \"'_\");\n                                                                disambiguator =\n                                                                0 }\n                                                              ]\n                                                            },\n                                                          \"'_\")))\n                                                    ];\n                                                  value =\n                                                  { Types.abi =\n                                                    Types.Abi {todo = \"Rust\"};\n                                                    c_variadic = false;\n                                                    inputs =\n                                                    [(Types.Ref\n                                                        ({ Types.kind =\n                                                           (Types.ReBound\n                                                              (\"0\",\n                                                               { Types.kind =\n                                                                 (Types.BrNamed\n                                                                    (\n                                                                    { Types.index =\n                                                                    (2, 55519);\n                                                                    krate =\n                                                                    \"core\";\n                                                                    path =\n                                                                    [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ops\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"Deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.ValueNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.LifetimeNs\n                                                                    \"'_\");\n                                                                    disambiguator =\n                                                                    0 }] },\n                                                                    \"'_\"));\n                                                                 var = \"0\" }))\n                                                           },\n                                                         Types.Adt {\n                                                           def_id =\n                                                           { Types.index =\n                                                             (5, 7722);\n                                                             krate = \"alloc\";\n                                                             path =\n                                                             [{ Types.data =\n                                                                (Types.TypeNs\n                                                                   \"ffi\");\n                                                                disambiguator =\n                                                                0 };\n                                                               { Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"c_str\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                               { Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"CString\");\n                                                                 disambiguator =\n                                                                 0 }\n                                                               ]\n                                                             };\n                                                           generic_args = [];\n                                                           trait_refs = []},\n                                                         false))\n                                                      ];\n                                                    output =\n                                                    (Types.Ref\n                                                       ({ Types.kind =\n                                                          (Types.ReBound\n                                                             (\"0\",\n                                                              { Types.kind =\n                                                                (Types.BrNamed\n                                                                   ({ Types.index =\n                                                                    (2, 55519);\n                                                                    krate =\n                                                                    \"core\";\n                                                                    path =\n                                                                    [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ops\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"Deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.ValueNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.LifetimeNs\n                                                                    \"'_\");\n                                                                    disambiguator =\n                                                                    0 }] },\n                                                                    \"'_\"));\n                                                                var = \"0\" }))\n                                                          },\n                                                        (Types.Alias\n                                                           { Types.args =\n                                                             [(Types.Type\n                                                                 Types.Adt {\n                                                                   def_id =\n                                                                   { Types.index =\n                                                                    (5, 7722);\n                                                                    krate =\n                                                                    \"alloc\";\n                                                                    path =\n                                                                    [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ffi\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"c_str\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"CString\");\n                                                                    disambiguator =\n                                                                    0 }] };\n                                                                   generic_args =\n                                                                   [];\n                                                                   trait_refs =\n                                                                   []})\n                                                               ];\n                                                             def_id =\n                                                             { Types.index =\n                                                               (2, 3454);\n                                                               krate = \"core\";\n                                                               path =\n                                                               [{ Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"ops\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                 { Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"deref\");\n                                                                   disambiguator =\n                                                                   0 };\n                                                                 { Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"Deref\");\n                                                                   disambiguator =\n                                                                   0 };\n                                                                 { Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"Target\");\n                                                                   disambiguator =\n                                                                   0 }\n                                                                 ]\n                                                               };\n                                                             kind =\n                                                             Types.Projection {\n                                                               assoc_item =\n                                                               { Types.container =\n                                                                 Types.TraitContainer;\n                                                                 def_id =\n                                                                 { Types.index =\n                                                                   (2, 3454);\n                                                                   krate =\n                                                                   \"core\";\n                                                                   path =\n                                                                   [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ops\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"Deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"Target\");\n                                                                    disambiguator =\n                                                                    0 }]\n                                                                   };\n                                                                 fn_has_self_parameter =\n                                                                 false;\n                                                                 kind =\n                                                                 Types.Type;\n                                                                 name =\n                                                                 \"Target\";\n                                                                 opt_rpitit_info =\n                                                                 None;\n                                                                 trait_item_def_id =\n                                                                 None };\n                                                               impl_expr =\n                                                               { Types.args =\n                                                                 [];\n                                                                 impl =\n                                                                 Types.Concrete {\n                                                                   generics =\n                                                                   [];\n                                                                   id =\n                                                                   { Types.index =\n                                                                    (5, 4829);\n                                                                    krate =\n                                                                    \"alloc\";\n                                                                    path =\n                                                                    [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ffi\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"c_str\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    Types.Impl;\n                                                                    disambiguator =\n                                                                    3 }] }};\n                                                                 trait =\n                                                                 { Types.def_id =\n                                                                   { Types.index =\n                                                                    (2, 3453);\n                                                                    krate =\n                                                                    \"core\";\n                                                                    path =\n                                                                    [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ops\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"Deref\");\n                                                                    disambiguator =\n                                                                    0 }] };\n                                                                   generic_args =\n                                                                   [(Types.Type\n                                                                    Types.Adt {\n                                                                    def_id =\n                                                                    { Types.index =\n                                                                    (5, 7722);\n                                                                    krate =\n                                                                    \"alloc\";\n                                                                    path =\n                                                                    [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ffi\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"c_str\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"CString\");\n                                                                    disambiguator =\n                                                                    0 }] };\n                                                                    generic_args =\n                                                                    [];\n                                                                    trait_refs =\n                                                                    []})]\n                                                                   }\n                                                                 }}\n                                                             }),\n                                                        false));\n                                                    safety = Types.Safe }\n                                                  })\n                                             };\n                                           generic_args = [];\n                                           trait =\n                                           (Some ({ Types.args = [];\n                                                    impl =\n                                                    Types.Concrete {\n                                                      generics = [];\n                                                      id =\n                                                      { Types.index =\n                                                        (5, 4829);\n                                                        krate = \"alloc\";\n                                                        path =\n                                                        [{ Types.data =\n                                                           (Types.TypeNs\n                                                              \"ffi\");\n                                                           disambiguator = 0\n                                                           };\n                                                          { Types.data =\n                                                            (Types.TypeNs\n                                                               \"c_str\");\n                                                            disambiguator = 0\n                                                            };\n                                                          { Types.data =\n                                                            Types.Impl;\n                                                            disambiguator = 3\n                                                            }\n                                                          ]\n                                                        }};\n                                                    trait =\n                                                    { Types.def_id =\n                                                      { Types.index =\n                                                        (2, 3453);\n                                                        krate = \"core\";\n                                                        path =\n                                                        [{ Types.data =\n                                                           (Types.TypeNs\n                                                              \"ops\");\n                                                           disambiguator = 0\n                                                           };\n                                                          { Types.data =\n                                                            (Types.TypeNs\n                                                               \"deref\");\n                                                            disambiguator = 0\n                                                            };\n                                                          { Types.data =\n                                                            (Types.TypeNs\n                                                               \"Deref\");\n                                                            disambiguator = 0\n                                                            }\n                                                          ]\n                                                        };\n                                                      generic_args =\n                                                      [(Types.Type\n                                                          Types.Adt {\n                                                            def_id =\n                                                            { Types.index =\n                                                              (5, 7722);\n                                                              krate = \"alloc\";\n                                                              path =\n                                                              [{ Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"ffi\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"c_str\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                { Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"CString\");\n                                                                  disambiguator =\n                                                                  0 }\n                                                                ]\n                                                              };\n                                                            generic_args = [];\n                                                            trait_refs = []})\n                                                        ]\n                                                      }\n                                                    },\n                                                  [(Types.Type\n                                                      Types.Adt {\n                                                        def_id =\n                                                        { Types.index =\n                                                          (5, 7722);\n                                                          krate = \"alloc\";\n                                                          path =\n                                                          [{ Types.data =\n                                                             (Types.TypeNs\n                                                                \"ffi\");\n                                                             disambiguator =\n                                                             0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"c_str\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"CString\");\n                                                              disambiguator =\n                                                              0 }\n                                                            ]\n                                                          };\n                                                        generic_args = [];\n                                                        trait_refs = []})\n                                                    ]));\n                                           ty =\n                                           (Types.Arrow\n                                              { Types.bound_vars =\n                                                [(Types.Region\n                                                    (Types.BrNamed\n                                                       ({ Types.index =\n                                                          (2, 55519);\n                                                          krate = \"core\";\n                                                          path =\n                                                          [{ Types.data =\n                                                             (Types.TypeNs\n                                                                \"ops\");\n                                                             disambiguator =\n                                                             0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"deref\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"Deref\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.ValueNs\n                                                                 \"deref\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.LifetimeNs\n                                                                 \"'_\");\n                                                              disambiguator =\n                                                              0 }\n                                                            ]\n                                                          },\n                                                        \"'_\")))\n                                                  ];\n                                                value =\n                                                { Types.abi =\n                                                  Types.Abi {todo = \"Rust\"};\n                                                  c_variadic = false;\n                                                  inputs =\n                                                  [(Types.Ref\n                                                      ({ Types.kind =\n                                                         (Types.ReBound\n                                                            (\"0\",\n                                                             { Types.kind =\n                                                               (Types.BrNamed\n                                                                  ({ Types.index =\n                                                                    (2, 55519);\n                                                                    krate =\n                                                                    \"core\";\n                                                                    path =\n                                                                    [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ops\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"Deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.ValueNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.LifetimeNs\n                                                                    \"'_\");\n                                                                    disambiguator =\n                                                                    0 }] },\n                                                                   \"'_\"));\n                                                               var = \"0\" }))\n                                                         },\n                                                       Types.Adt {\n                                                         def_id =\n                                                         { Types.index =\n                                                           (5, 7722);\n                                                           krate = \"alloc\";\n                                                           path =\n                                                           [{ Types.data =\n                                                              (Types.TypeNs\n                                                                 \"ffi\");\n                                                              disambiguator =\n                                                              0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"c_str\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"CString\");\n                                                               disambiguator =\n                                                               0 }\n                                                             ]\n                                                           };\n                                                         generic_args = [];\n                                                         trait_refs = []},\n                                                       false))\n                                                    ];\n                                                  output =\n                                                  (Types.Ref\n                                                     ({ Types.kind =\n                                                        (Types.ReBound\n                                                           (\"0\",\n                                                            { Types.kind =\n                                                              (Types.BrNamed\n                                                                 ({ Types.index =\n                                                                    (\n                                                                    2, 55519);\n                                                                    krate =\n                                                                    \"core\";\n                                                                    path =\n                                                                    [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ops\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"Deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.ValueNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.LifetimeNs\n                                                                    \"'_\");\n                                                                    disambiguator =\n                                                                    0 }] },\n                                                                  \"'_\"));\n                                                              var = \"0\" }))\n                                                        },\n                                                      (Types.Alias\n                                                         { Types.args =\n                                                           [(Types.Type\n                                                               Types.Adt {\n                                                                 def_id =\n                                                                 { Types.index =\n                                                                   (5, 7722);\n                                                                   krate =\n                                                                   \"alloc\";\n                                                                   path =\n                                                                   [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ffi\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"c_str\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"CString\");\n                                                                    disambiguator =\n                                                                    0 }]\n                                                                   };\n                                                                 generic_args =\n                                                                 [];\n                                                                 trait_refs =\n                                                                 []})\n                                                             ];\n                                                           def_id =\n                                                           { Types.index =\n                                                             (2, 3454);\n                                                             krate = \"core\";\n                                                             path =\n                                                             [{ Types.data =\n                                                                (Types.TypeNs\n                                                                   \"ops\");\n                                                                disambiguator =\n                                                                0 };\n                                                               { Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"deref\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                               { Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"Deref\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                               { Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"Target\");\n                                                                 disambiguator =\n                                                                 0 }\n                                                               ]\n                                                             };\n                                                           kind =\n                                                           Types.Projection {\n                                                             assoc_item =\n                                                             { Types.container =\n                                                               Types.TraitContainer;\n                                                               def_id =\n                                                               { Types.index =\n                                                                 (2, 3454);\n                                                                 krate =\n                                                                 \"core\";\n                                                                 path =\n                                                                 [{ Types.data =\n                                                                    (\n                                                                    Types.TypeNs\n                                                                    \"ops\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                   { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                   { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"Deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                   { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"Target\");\n                                                                    disambiguator =\n                                                                    0 }\n                                                                   ]\n                                                                 };\n                                                               fn_has_self_parameter =\n                                                               false;\n                                                               kind =\n                                                               Types.Type;\n                                                               name =\n                                                               \"Target\";\n                                                               opt_rpitit_info =\n                                                               None;\n                                                               trait_item_def_id =\n                                                               None };\n                                                             impl_expr =\n                                                             { Types.args =\n                                                               [];\n                                                               impl =\n                                                               Types.Concrete {\n                                                                 generics =\n                                                                 [];\n                                                                 id =\n                                                                 { Types.index =\n                                                                   (5, 4829);\n                                                                   krate =\n                                                                   \"alloc\";\n                                                                   path =\n                                                                   [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ffi\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"c_str\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    Types.Impl;\n                                                                    disambiguator =\n                                                                    3 }]\n                                                                   }};\n                                                               trait =\n                                                               { Types.def_id =\n                                                                 { Types.index =\n                                                                   (2, 3453);\n                                                                   krate =\n                                                                   \"core\";\n                                                                   path =\n                                                                   [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ops\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"deref\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"Deref\");\n                                                                    disambiguator =\n                                                                    0 }]\n                                                                   };\n                                                                 generic_args =\n                                                                 [(Types.Type\n                                                                    Types.Adt {\n                                                                    def_id =\n                                                                    { Types.index =\n                                                                    (5, 7722);\n                                                                    krate =\n                                                                    \"alloc\";\n                                                                    path =\n                                                                    [{ Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"ffi\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"c_str\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"CString\");\n                                                                    disambiguator =\n                                                                    0 }] };\n                                                                    generic_args =\n                                                                    [];\n                                                                    trait_refs =\n                                                                    []})\n                                                                   ]\n                                                                 }\n                                                               }}\n                                                           }),\n                                                      false));\n                                                  safety = Types.Safe }\n                                                })};\n                                         hir_id = None;\n                                         span =\n                                         { Types.filename =\n                                           (Types.Real\n                                              (Types.LocalPath\n                                                 \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                           hi =\n                                           { Types.col = \"29\"; line = \"376\" };\n                                           lo =\n                                           { Types.col = \"16\"; line = \"376\" }\n                                           };\n                                         ty =\n                                         (Types.Ref\n                                            ({ Types.kind = Types.ReErased },\n                                             Types.Adt {\n                                               def_id =\n                                               { Types.index = (2, 34717);\n                                                 krate = \"core\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"ffi\");\n                                                    disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"c_str\");\n                                                     disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"CStr\");\n                                                     disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []},\n                                             false))\n                                         }};\n                                     hir_id = None;\n                                     span =\n                                     { Types.filename =\n                                       (Types.Real\n                                          (Types.LocalPath\n                                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                       hi =\n                                       { Types.col = \"20\"; line = \"376\" };\n                                       lo =\n                                       { Types.col = \"16\"; line = \"376\" } };\n                                     ty =\n                                     Types.Adt {\n                                       def_id =\n                                       { Types.index = (2, 34717);\n                                         krate = \"core\";\n                                         path =\n                                         [{ Types.data = (Types.TypeNs \"ffi\");\n                                            disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"c_str\");\n                                             disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"CStr\");\n                                             disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args = []; trait_refs = []}\n                                     };\n                                   borrow_kind = Types.Shared};\n                                 hir_id = (Some (\"260\", \"143\"));\n                                 span =\n                                 { Types.filename =\n                                   (Types.Real\n                                      (Types.LocalPath\n                                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                   hi = { Types.col = \"20\"; line = \"376\" };\n                                   lo = { Types.col = \"16\"; line = \"376\" } };\n                                 ty =\n                                 (Types.Ref\n                                    ({ Types.kind = Types.ReErased },\n                                     Types.Adt {\n                                       def_id =\n                                       { Types.index = (2, 34717);\n                                         krate = \"core\";\n                                         path =\n                                         [{ Types.data = (Types.TypeNs \"ffi\");\n                                            disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"c_str\");\n                                             disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"CStr\");\n                                             disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args = []; trait_refs = []},\n                                     false))\n                                 }\n                                ];\n                              bounds_impls = [];\n                              fn_span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"29\"; line = \"376\" };\n                                lo = { Types.col = \"21\"; line = \"376\" } };\n                              from_hir_call = true;\n                              fun' =\n                              { Types.attributes = [];\n                                contents =\n                                Types.GlobalName {\n                                  id =\n                                  { Types.index = (2, 5266); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ffi\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"c_str\");\n                                        disambiguator = 0 };\n                                      { Types.data = Types.Impl;\n                                        disambiguator = 6 };\n                                      { Types.data = (Types.ValueNs \"as_ptr\");\n                                        disambiguator = 0 }\n                                      ]\n                                    }};\n                                hir_id = None;\n                                span =\n                                { Types.filename =\n                                  (Types.Real\n                                     (Types.LocalPath\n                                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                  hi = { Types.col = \"27\"; line = \"376\" };\n                                  lo = { Types.col = \"21\"; line = \"376\" } };\n                                ty =\n                                (Types.Arrow\n                                   { Types.bound_vars =\n                                     [(Types.Region\n                                         (Types.BrNamed\n                                            ({ Types.index = (2, 56097);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"ffi\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"c_str\");\n                                                   disambiguator = 0 };\n                                                 { Types.data = Types.Impl;\n                                                   disambiguator = 6 };\n                                                 { Types.data =\n                                                   (Types.ValueNs \"as_ptr\");\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.LifetimeNs \"'_\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               },\n                                             \"'_\")))\n                                       ];\n                                     value =\n                                     { Types.abi = Types.Abi {todo = \"Rust\"};\n                                       c_variadic = false;\n                                       inputs =\n                                       [(Types.Ref\n                                           ({ Types.kind =\n                                              (Types.ReBound\n                                                 (\"0\",\n                                                  { Types.kind =\n                                                    (Types.BrNamed\n                                                       ({ Types.index =\n                                                          (2, 56097);\n                                                          krate = \"core\";\n                                                          path =\n                                                          [{ Types.data =\n                                                             (Types.TypeNs\n                                                                \"ffi\");\n                                                             disambiguator =\n                                                             0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"c_str\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              Types.Impl;\n                                                              disambiguator =\n                                                              6 };\n                                                            { Types.data =\n                                                              (Types.ValueNs\n                                                                 \"as_ptr\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.LifetimeNs\n                                                                 \"'_\");\n                                                              disambiguator =\n                                                              0 }\n                                                            ]\n                                                          },\n                                                        \"'_\"));\n                                                    var = \"0\" }))\n                                              },\n                                            Types.Adt {\n                                              def_id =\n                                              { Types.index = (2, 34717);\n                                                krate = \"core\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"ffi\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"c_str\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"CStr\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args = [];\n                                              trait_refs = []},\n                                            false))\n                                         ];\n                                       output =\n                                       (Types.RawPtr\n                                          ((Types.Int Types.I8), false));\n                                       safety = Types.Safe }\n                                     })\n                                };\n                              generic_args = []; trait = None;\n                              ty =\n                              (Types.Arrow\n                                 { Types.bound_vars =\n                                   [(Types.Region\n                                       (Types.BrNamed\n                                          ({ Types.index = (2, 56097);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"ffi\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"c_str\");\n                                                 disambiguator = 0 };\n                                               { Types.data = Types.Impl;\n                                                 disambiguator = 6 };\n                                               { Types.data =\n                                                 (Types.ValueNs \"as_ptr\");\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.LifetimeNs \"'_\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             },\n                                           \"'_\")))\n                                     ];\n                                   value =\n                                   { Types.abi = Types.Abi {todo = \"Rust\"};\n                                     c_variadic = false;\n                                     inputs =\n                                     [(Types.Ref\n                                         ({ Types.kind =\n                                            (Types.ReBound\n                                               (\"0\",\n                                                { Types.kind =\n                                                  (Types.BrNamed\n                                                     ({ Types.index =\n                                                        (2, 56097);\n                                                        krate = \"core\";\n                                                        path =\n                                                        [{ Types.data =\n                                                           (Types.TypeNs\n                                                              \"ffi\");\n                                                           disambiguator = 0\n                                                           };\n                                                          { Types.data =\n                                                            (Types.TypeNs\n                                                               \"c_str\");\n                                                            disambiguator = 0\n                                                            };\n                                                          { Types.data =\n                                                            Types.Impl;\n                                                            disambiguator = 6\n                                                            };\n                                                          { Types.data =\n                                                            (Types.ValueNs\n                                                               \"as_ptr\");\n                                                            disambiguator = 0\n                                                            };\n                                                          { Types.data =\n                                                            (Types.LifetimeNs\n                                                               \"'_\");\n                                                            disambiguator = 0\n                                                            }\n                                                          ]\n                                                        },\n                                                      \"'_\"));\n                                                  var = \"0\" }))\n                                            },\n                                          Types.Adt {\n                                            def_id =\n                                            { Types.index = (2, 34717);\n                                              krate = \"core\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ffi\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"c_str\");\n                                                  disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"CStr\");\n                                                  disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args = [];\n                                            trait_refs = []},\n                                          false))\n                                       ];\n                                     output =\n                                     (Types.RawPtr\n                                        ((Types.Int Types.I8), false));\n                                     safety = Types.Safe }\n                                   })};\n                            hir_id = (Some (\"260\", \"141\"));\n                            span =\n                            { Types.filename =\n                              (Types.Real\n                                 (Types.LocalPath\n                                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n                              hi = { Types.col = \"29\"; line = \"376\" };\n                              lo = { Types.col = \"16\"; line = \"376\" } };\n                            ty = (Types.RawPtr ((Types.Int Types.I8), false))\n                            }\n                           ];\n                         bounds_impls = [];\n                         fn_span =\n                         { Types.filename =\n                           (Types.Real\n                              (Types.LocalPath\n                                 \"rust/implementation/openssl3/tunnel/context.rs\"));\n                           hi = { Types.col = \"40\"; line = \"376\" };\n                           lo = { Types.col = \"30\"; line = \"376\" } };\n                         from_hir_call = true;\n                         fun' =\n                         { Types.attributes = [];\n                           contents =\n                           Types.GlobalName {\n                             id =\n                             { Types.index = (2, 2408); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"const_ptr\");\n                                   disambiguator = 0 };\n                                 { Types.data = Types.Impl; disambiguator = 0\n                                   };\n                                 { Types.data = (Types.ValueNs \"cast_mut\");\n                                   disambiguator = 0 }\n                                 ]\n                               }};\n                           hir_id = None;\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"38\"; line = \"376\" };\n                             lo = { Types.col = \"30\"; line = \"376\" } };\n                           ty =\n                           (Types.Arrow\n                              { Types.bound_vars = [];\n                                value =\n                                { Types.abi = Types.Abi {todo = \"Rust\"};\n                                  c_variadic = false;\n                                  inputs =\n                                  [(Types.RawPtr\n                                      ((Types.Int Types.I8), false))\n                                    ];\n                                  output =\n                                  (Types.RawPtr ((Types.Int Types.I8), true));\n                                  safety = Types.Safe }\n                                })\n                           };\n                         generic_args = [(Types.Type (Types.Int Types.I8))];\n                         trait = None;\n                         ty =\n                         (Types.Arrow\n                            { Types.bound_vars = [];\n                              value =\n                              { Types.abi = Types.Abi {todo = \"Rust\"};\n                                c_variadic = false;\n                                inputs =\n                                [(Types.RawPtr ((Types.Int Types.I8), false))\n                                  ];\n                                output =\n                                (Types.RawPtr ((Types.Int Types.I8), true));\n                                safety = Types.Safe }\n                              })};\n                       hir_id = (Some (\"260\", \"139\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3/tunnel/context.rs\"));\n                         hi = { Types.col = \"40\"; line = \"376\" };\n                         lo = { Types.col = \"16\"; line = \"376\" } };\n                       ty = (Types.RawPtr ((Types.Int Types.I8), true)) }\n                      ];\n                    bounds_impls =\n                    [{ Types.args = [];\n                       impl =\n                       Types.Builtin {\n                         trait =\n                         { Types.def_id =\n                           { Types.index = (2, 26413); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"marker\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"Sized\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args =\n                           [(Types.Type\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 5307); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_void\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []})\n                             ]\n                           }};\n                       trait =\n                       { Types.def_id =\n                         { Types.index = (2, 26413); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"marker\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Sized\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (2, 5307); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ffi\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"c_void\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []})\n                           ]\n                         }\n                       }\n                      ];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"47\"; line = \"376\" };\n                      lo = { Types.col = \"41\"; line = \"376\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2500); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"mut_ptr\");\n                              disambiguator = 0 };\n                            { Types.data = Types.Impl; disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"cast\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"45\"; line = \"376\" };\n                        lo = { Types.col = \"41\"; line = \"376\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [(Types.RawPtr ((Types.Int Types.I8), true))];\n                             output =\n                             (Types.RawPtr\n                                (Types.Adt {\n                                   def_id =\n                                   { Types.index = (2, 5307); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ffi\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"c_void\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []},\n                                 true));\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args =\n                    [(Types.Type (Types.Int Types.I8));\n                      (Types.Type\n                         Types.Adt {\n                           def_id =\n                           { Types.index = (2, 5307); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ffi\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"c_void\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args = []; trait_refs = []})\n                      ];\n                    trait = None;\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [(Types.RawPtr ((Types.Int Types.I8), true))];\n                           output =\n                           (Types.RawPtr\n                              (Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 5307); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_void\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []},\n                               true));\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"260\", \"137\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"47\"; line = \"376\" };\n                    lo = { Types.col = \"16\"; line = \"376\" } };\n                  ty =\n                  (Types.RawPtr\n                     (Types.Adt {\n                        def_id =\n                        { Types.index = (2, 5307); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ffi\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"c_void\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args = []; trait_refs = []},\n                      true))\n                  }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"13\"; line = \"377\" };\n                lo = { Types.col = \"12\"; line = \"372\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18543); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3371 };\n                      { Types.data = (Types.ValueNs \"SSL_CTX_ctrl\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"34\"; line = \"372\" };\n                  lo = { Types.col = \"12\"; line = \"372\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.Int Types.I32); (Types.Int Types.I64);\n                         (Types.RawPtr\n                            (Types.Adt {\n                               def_id =\n                               { Types.index = (2, 5307); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ffi\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"c_void\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []},\n                             true))\n                         ];\n                       output = (Types.Int Types.I64); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.Int Types.I32); (Types.Int Types.I64);\n                       (Types.RawPtr\n                          (Types.Adt {\n                             def_id =\n                             { Types.index = (2, 5307); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ffi\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"c_void\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           true))\n                       ];\n                     output = (Types.Int Types.I64); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"260\", \"121\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"13\"; line = \"377\" };\n              lo = { Types.col = \"12\"; line = \"372\" } };\n            ty = (Types.Int Types.I64) });\n    region_scope = { Types.data = Types.Node; id = \"145\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"9\"; line = \"378\" };\n      lo = { Types.col = \"11\"; line = \"371\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"260\", \"120\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"9\"; line = \"378\" };\n    lo = { Types.col = \"11\"; line = \"371\" } };\n  ty = (Types.Int Types.I64) }"

              <:
              i64) =.
            1L
          then
            Core.Result.Result_Ok (() <: Prims.unit)
            <:
            Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
          else
            Core.Result.Result_Err
            (Core.Convert.f_into #(Sandwich_proto.Errors.t_KEMError & Alloc.String.t_String)
                #Sandwich.Error.t_Error
                #FStar.Tactics.Typeclasses.solve
                ((Sandwich_proto.Errors.KEMError_KEMERROR_INVALID
                    <:
                    Sandwich_proto.Errors.t_KEMError),
                  (Sandwich.Implementation.Openssl3.errstr () <: Alloc.String.t_String)
                  <:
                  (Sandwich_proto.Errors.t_KEMError & Alloc.String.t_String)))
            <:
            Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
        | Core.Result.Result_Err err ->
          Core.Result.Result_Err (Core.Convert.f_from #FStar.Tactics.Typeclasses.solve err)
          <:
          Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
      <:
      Core.Ops.Control_flow.t_ControlFlow (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
        (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error))

let impl__SslContext__set_maximum_tls_version
      (self: t_SslContext)
      (version: Sandwich.Tunnel.Tls.t_TlsVersion)
     =
  if
    (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
        "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 243);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs\n                                             \"set_maximum_tls_version\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"20\"; line = \"139\" };\n                                lo = { Types.col = \"16\"; line = \"139\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"243\", \"15\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"20\"; line = \"139\" };\n                            lo = { Types.col = \"16\"; line = \"139\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"243\", \"14\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"22\"; line = \"139\" };\n                        lo = { Types.col = \"16\"; line = \"139\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"31\"; line = \"139\" };\n                     lo = { Types.col = \"23\"; line = \"139\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"29\"; line = \"139\" };\n                       lo = { Types.col = \"23\"; line = \"139\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"243\", \"12\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"31\"; line = \"139\" };\n                   lo = { Types.col = \"16\"; line = \"139\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Cast {\n                    source =\n                    { Types.attributes = [];\n                      contents =\n                      Types.NamedConst {args = [];\n                        def_id =\n                        { Types.index = (27, 10516); krate = \"openssl3\";\n                          path =\n                          [{ Types.data =\n                             (Types.ValueNs \"SSL_CTRL_SET_MAX_PROTO_VERSION\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        impl = None; user_ty = None};\n                      hir_id = (Some (\"243\", \"18\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"56\"; line = \"140\" };\n                        lo = { Types.col = \"16\"; line = \"140\" } };\n                      ty = (Types.Uint Types.U32) }};\n                  hir_id = (Some (\"243\", \"17\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"63\"; line = \"140\" };\n                    lo = { Types.col = \"16\"; line = \"140\" } };\n                  ty = (Types.Int Types.I32) };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {\n                    args =\n                    [{ Types.attributes = [];\n                       contents =\n                       Types.VarRef {\n                         id =\n                         { Types.id =\n                           { Types.local_id = \"4\";\n                             owner =\n                             { Types.index = (0, 243); krate = \"sandwich\";\n                               path =\n                               [{ Types.data =\n                                  (Types.TypeNs \"implementation\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"openssl3\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"tunnel\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"context\");\n                                   disambiguator = 0 };\n                                 { Types.data = Types.Impl; disambiguator = 4\n                                   };\n                                 { Types.data =\n                                   (Types.ValueNs \"set_maximum_tls_version\");\n                                   disambiguator = 0 }\n                                 ]\n                               }\n                             };\n                           name = \"version\" }};\n                       hir_id = (Some (\"243\", \"25\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3/tunnel/context.rs\"));\n                         hi = { Types.col = \"23\"; line = \"141\" };\n                         lo = { Types.col = \"16\"; line = \"141\" } };\n                       ty =\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (0, 1443); krate = \"sandwich\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"tls\");\n                               disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"TlsVersion\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []}\n                       }\n                      ];\n                    bounds_impls = [];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"30\"; line = \"141\" };\n                      lo = { Types.col = \"24\"; line = \"141\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2997); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"convert\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Into\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"into\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"28\"; line = \"141\" };\n                        lo = { Types.col = \"24\"; line = \"141\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [Types.Adt {\n                                def_id =\n                                { Types.index = (0, 1443);\n                                  krate = \"sandwich\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"tunnel\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"tls\");\n                                      disambiguator = 0 };\n                                    { Types.data =\n                                      (Types.TypeNs \"TlsVersion\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []}\n                               ];\n                             output = (Types.Int Types.I64);\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args = [];\n                    trait =\n                    (Some ({ Types.args =\n                             [{ Types.args = [];\n                                impl =\n                                Types.Builtin {\n                                  trait =\n                                  { Types.def_id =\n                                    { Types.index = (2, 26413);\n                                      krate = \"core\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"marker\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Sized\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Type\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (0, 1443);\n                                            krate = \"sandwich\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"tunnel\");\n                                               disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"tls\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"TlsVersion\");\n                                                disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []})\n                                      ]\n                                    }};\n                                trait =\n                                { Types.def_id =\n                                  { Types.index = (2, 26413); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"marker\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Sized\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Type\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (0, 1443);\n                                          krate = \"sandwich\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"tunnel\");\n                                             disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"tls\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"TlsVersion\");\n                                              disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args = []; trait_refs = []})\n                                    ]\n                                  }\n                                };\n                               { Types.args = [];\n                                 impl =\n                                 Types.Builtin {\n                                   trait =\n                                   { Types.def_id =\n                                     { Types.index = (2, 26413);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"marker\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"Sized\");\n                                           disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args =\n                                     [(Types.Type (Types.Int Types.I64))] }};\n                                 trait =\n                                 { Types.def_id =\n                                   { Types.index = (2, 26413);\n                                     krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"marker\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"Sized\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type (Types.Int Types.I64))] }\n                                 };\n                               { Types.args = [];\n                                 impl =\n                                 Types.Concrete {generics = [];\n                                   id =\n                                   { Types.index = (0, 233);\n                                     krate = \"sandwich\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"implementation\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"openssl3\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"tunnel\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"context\");\n                                         disambiguator = 0 };\n                                       { Types.data = Types.Impl;\n                                         disambiguator = 2 }\n                                       ]\n                                     }};\n                                 trait =\n                                 { Types.def_id =\n                                   { Types.index = (2, 2998); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"convert\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"From\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type (Types.Int Types.I64));\n                                     (Types.Type\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (0, 1443);\n                                            krate = \"sandwich\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"tunnel\");\n                                               disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"tls\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"TlsVersion\");\n                                                disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []})\n                                     ]\n                                   }\n                                 }\n                               ];\n                             impl =\n                             Types.Concrete {\n                               generics =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (0, 1443);\n                                       krate = \"sandwich\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                         { Types.data = (Types.TypeNs \"tls\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"TlsVersion\");\n                                           disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []});\n                                 (Types.Type (Types.Int Types.I64))];\n                               id =\n                               { Types.index = (2, 3021); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"convert\");\n                                    disambiguator = 0 };\n                                   { Types.data = Types.Impl;\n                                     disambiguator = 3 }\n                                   ]\n                                 }};\n                             trait =\n                             { Types.def_id =\n                               { Types.index = (2, 2995); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"convert\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"Into\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (0, 1443);\n                                       krate = \"sandwich\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                         { Types.data = (Types.TypeNs \"tls\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"TlsVersion\");\n                                           disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []});\n                                 (Types.Type (Types.Int Types.I64))]\n                               }\n                             },\n                           [(Types.Type\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (0, 1443);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"tunnel\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"tls\");\n                                       disambiguator = 0 };\n                                     { Types.data =\n                                       (Types.TypeNs \"TlsVersion\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []});\n                             (Types.Type (Types.Int Types.I64))]));\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [Types.Adt {\n                              def_id =\n                              { Types.index = (0, 1443); krate = \"sandwich\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"tunnel\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"tls\");\n                                    disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"TlsVersion\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []}\n                             ];\n                           output = (Types.Int Types.I64);\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"243\", \"23\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"30\"; line = \"141\" };\n                    lo = { Types.col = \"16\"; line = \"141\" } };\n                  ty = (Types.Int Types.I64) };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {args = [];\n                    bounds_impls =\n                    [{ Types.args = [];\n                       impl =\n                       Types.Builtin {\n                         trait =\n                         { Types.def_id =\n                           { Types.index = (2, 2148); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ptr\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"metadata\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"Thin\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args =\n                           [(Types.Type\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 5307); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_void\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []})\n                             ]\n                           }};\n                       trait =\n                       { Types.def_id =\n                         { Types.index = (2, 2148); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ptr\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"metadata\");\n                               disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Thin\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (2, 5307); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ffi\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"c_void\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []})\n                           ]\n                         }\n                       }\n                      ];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"31\"; line = \"142\" };\n                      lo = { Types.col = \"16\"; line = \"142\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2600); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"null_mut\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"29\"; line = \"142\" };\n                        lo = { Types.col = \"16\"; line = \"142\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false; inputs = [];\n                             output =\n                             (Types.RawPtr\n                                (Types.Adt {\n                                   def_id =\n                                   { Types.index = (2, 5307); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ffi\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"c_void\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []},\n                                 true));\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args =\n                    [(Types.Type\n                        Types.Adt {\n                          def_id =\n                          { Types.index = (2, 5307); krate = \"core\";\n                            path =\n                            [{ Types.data = (Types.TypeNs \"ffi\");\n                               disambiguator = 0 };\n                              { Types.data = (Types.TypeNs \"c_void\");\n                                disambiguator = 0 }\n                              ]\n                            };\n                          generic_args = []; trait_refs = []})\n                      ];\n                    trait = None;\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false; inputs = [];\n                           output =\n                           (Types.RawPtr\n                              (Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 5307); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_void\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []},\n                               true));\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"243\", \"27\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"31\"; line = \"142\" };\n                    lo = { Types.col = \"16\"; line = \"142\" } };\n                  ty =\n                  (Types.RawPtr\n                     (Types.Adt {\n                        def_id =\n                        { Types.index = (2, 5307); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ffi\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"c_void\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args = []; trait_refs = []},\n                      true))\n                  }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"13\"; line = \"143\" };\n                lo = { Types.col = \"12\"; line = \"138\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18543); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3371 };\n                      { Types.data = (Types.ValueNs \"SSL_CTX_ctrl\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"34\"; line = \"138\" };\n                  lo = { Types.col = \"12\"; line = \"138\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.Int Types.I32); (Types.Int Types.I64);\n                         (Types.RawPtr\n                            (Types.Adt {\n                               def_id =\n                               { Types.index = (2, 5307); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ffi\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"c_void\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []},\n                             true))\n                         ];\n                       output = (Types.Int Types.I64); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.Int Types.I32); (Types.Int Types.I64);\n                       (Types.RawPtr\n                          (Types.Adt {\n                             def_id =\n                             { Types.index = (2, 5307); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ffi\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"c_void\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           true))\n                       ];\n                     output = (Types.Int Types.I64); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"243\", \"8\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"13\"; line = \"143\" };\n              lo = { Types.col = \"12\"; line = \"138\" } };\n            ty = (Types.Int Types.I64) });\n    region_scope = { Types.data = Types.Node; id = \"31\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"9\"; line = \"144\" };\n      lo = { Types.col = \"11\"; line = \"137\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"243\", \"7\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"9\"; line = \"144\" };\n    lo = { Types.col = \"11\"; line = \"137\" } };\n  ty = (Types.Int Types.I64) }"

      <:
      i64) =.
    1L
  then
    Core.Result.Result_Ok (() <: Prims.unit)
    <:
    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
  else
    let res:Alloc.String.t_String =
      Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
            (sz 1)
            (let list = ["failed to set the maximum TLS version: "] in
              FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
              Rust_primitives.Hax.array_of_list 1 list)
            (let list =
                [
                  Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                    (Sandwich.Implementation.Openssl3.errstr () <: Alloc.String.t_String)
                  <:
                  Core.Fmt.Rt.t_Argument
                ]
              in
              FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
              Rust_primitives.Hax.array_of_list 1 list)
          <:
          Core.Fmt.t_Arguments)
    in
    Core.Result.Result_Err
    (Core.Convert.f_into #(Sandwich_proto.Errors.t_TLSConfigurationError & Alloc.String.t_String)
        #Sandwich.Error.t_Error
        #FStar.Tactics.Typeclasses.solve
        ((Sandwich_proto.Errors.TLSConfigurationError_TLSCONFIGURATIONERROR_UNSUPPORTED_PROTOCOL_VERSION
            <:
            Sandwich_proto.Errors.t_TLSConfigurationError),
          res
          <:
          (Sandwich_proto.Errors.t_TLSConfigurationError & Alloc.String.t_String)))
    <:
    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error

let impl__SslContext__set_minimum_tls_version
      (self: t_SslContext)
      (version: Sandwich.Tunnel.Tls.t_TlsVersion)
     =
  if
    (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
        "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 242);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs\n                                             \"set_minimum_tls_version\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"20\"; line = \"114\" };\n                                lo = { Types.col = \"16\"; line = \"114\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"242\", \"15\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"20\"; line = \"114\" };\n                            lo = { Types.col = \"16\"; line = \"114\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"242\", \"14\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"22\"; line = \"114\" };\n                        lo = { Types.col = \"16\"; line = \"114\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"31\"; line = \"114\" };\n                     lo = { Types.col = \"23\"; line = \"114\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"29\"; line = \"114\" };\n                       lo = { Types.col = \"23\"; line = \"114\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"242\", \"12\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"31\"; line = \"114\" };\n                   lo = { Types.col = \"16\"; line = \"114\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Cast {\n                    source =\n                    { Types.attributes = [];\n                      contents =\n                      Types.NamedConst {args = [];\n                        def_id =\n                        { Types.index = (27, 10515); krate = \"openssl3\";\n                          path =\n                          [{ Types.data =\n                             (Types.ValueNs \"SSL_CTRL_SET_MIN_PROTO_VERSION\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        impl = None; user_ty = None};\n                      hir_id = (Some (\"242\", \"18\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"56\"; line = \"115\" };\n                        lo = { Types.col = \"16\"; line = \"115\" } };\n                      ty = (Types.Uint Types.U32) }};\n                  hir_id = (Some (\"242\", \"17\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"63\"; line = \"115\" };\n                    lo = { Types.col = \"16\"; line = \"115\" } };\n                  ty = (Types.Int Types.I32) };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {\n                    args =\n                    [{ Types.attributes = [];\n                       contents =\n                       Types.VarRef {\n                         id =\n                         { Types.id =\n                           { Types.local_id = \"4\";\n                             owner =\n                             { Types.index = (0, 242); krate = \"sandwich\";\n                               path =\n                               [{ Types.data =\n                                  (Types.TypeNs \"implementation\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"openssl3\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"tunnel\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"context\");\n                                   disambiguator = 0 };\n                                 { Types.data = Types.Impl; disambiguator = 4\n                                   };\n                                 { Types.data =\n                                   (Types.ValueNs \"set_minimum_tls_version\");\n                                   disambiguator = 0 }\n                                 ]\n                               }\n                             };\n                           name = \"version\" }};\n                       hir_id = (Some (\"242\", \"25\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3/tunnel/context.rs\"));\n                         hi = { Types.col = \"23\"; line = \"116\" };\n                         lo = { Types.col = \"16\"; line = \"116\" } };\n                       ty =\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (0, 1443); krate = \"sandwich\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"tls\");\n                               disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"TlsVersion\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []}\n                       }\n                      ];\n                    bounds_impls = [];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"30\"; line = \"116\" };\n                      lo = { Types.col = \"24\"; line = \"116\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2997); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"convert\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Into\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"into\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"28\"; line = \"116\" };\n                        lo = { Types.col = \"24\"; line = \"116\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [Types.Adt {\n                                def_id =\n                                { Types.index = (0, 1443);\n                                  krate = \"sandwich\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"tunnel\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"tls\");\n                                      disambiguator = 0 };\n                                    { Types.data =\n                                      (Types.TypeNs \"TlsVersion\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []}\n                               ];\n                             output = (Types.Int Types.I64);\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args = [];\n                    trait =\n                    (Some ({ Types.args =\n                             [{ Types.args = [];\n                                impl =\n                                Types.Builtin {\n                                  trait =\n                                  { Types.def_id =\n                                    { Types.index = (2, 26413);\n                                      krate = \"core\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"marker\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Sized\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Type\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (0, 1443);\n                                            krate = \"sandwich\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"tunnel\");\n                                               disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"tls\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"TlsVersion\");\n                                                disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []})\n                                      ]\n                                    }};\n                                trait =\n                                { Types.def_id =\n                                  { Types.index = (2, 26413); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"marker\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Sized\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Type\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (0, 1443);\n                                          krate = \"sandwich\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"tunnel\");\n                                             disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"tls\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"TlsVersion\");\n                                              disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args = []; trait_refs = []})\n                                    ]\n                                  }\n                                };\n                               { Types.args = [];\n                                 impl =\n                                 Types.Builtin {\n                                   trait =\n                                   { Types.def_id =\n                                     { Types.index = (2, 26413);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"marker\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"Sized\");\n                                           disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args =\n                                     [(Types.Type (Types.Int Types.I64))] }};\n                                 trait =\n                                 { Types.def_id =\n                                   { Types.index = (2, 26413);\n                                     krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"marker\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"Sized\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type (Types.Int Types.I64))] }\n                                 };\n                               { Types.args = [];\n                                 impl =\n                                 Types.Concrete {generics = [];\n                                   id =\n                                   { Types.index = (0, 233);\n                                     krate = \"sandwich\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"implementation\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"openssl3\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"tunnel\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"context\");\n                                         disambiguator = 0 };\n                                       { Types.data = Types.Impl;\n                                         disambiguator = 2 }\n                                       ]\n                                     }};\n                                 trait =\n                                 { Types.def_id =\n                                   { Types.index = (2, 2998); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"convert\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"From\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type (Types.Int Types.I64));\n                                     (Types.Type\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (0, 1443);\n                                            krate = \"sandwich\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"tunnel\");\n                                               disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"tls\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"TlsVersion\");\n                                                disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []})\n                                     ]\n                                   }\n                                 }\n                               ];\n                             impl =\n                             Types.Concrete {\n                               generics =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (0, 1443);\n                                       krate = \"sandwich\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                         { Types.data = (Types.TypeNs \"tls\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"TlsVersion\");\n                                           disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []});\n                                 (Types.Type (Types.Int Types.I64))];\n                               id =\n                               { Types.index = (2, 3021); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"convert\");\n                                    disambiguator = 0 };\n                                   { Types.data = Types.Impl;\n                                     disambiguator = 3 }\n                                   ]\n                                 }};\n                             trait =\n                             { Types.def_id =\n                               { Types.index = (2, 2995); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"convert\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"Into\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (0, 1443);\n                                       krate = \"sandwich\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                         { Types.data = (Types.TypeNs \"tls\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"TlsVersion\");\n                                           disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []});\n                                 (Types.Type (Types.Int Types.I64))]\n                               }\n                             },\n                           [(Types.Type\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (0, 1443);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"tunnel\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"tls\");\n                                       disambiguator = 0 };\n                                     { Types.data =\n                                       (Types.TypeNs \"TlsVersion\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []});\n                             (Types.Type (Types.Int Types.I64))]));\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [Types.Adt {\n                              def_id =\n                              { Types.index = (0, 1443); krate = \"sandwich\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"tunnel\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"tls\");\n                                    disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"TlsVersion\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []}\n                             ];\n                           output = (Types.Int Types.I64);\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"242\", \"23\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"30\"; line = \"116\" };\n                    lo = { Types.col = \"16\"; line = \"116\" } };\n                  ty = (Types.Int Types.I64) };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {args = [];\n                    bounds_impls =\n                    [{ Types.args = [];\n                       impl =\n                       Types.Builtin {\n                         trait =\n                         { Types.def_id =\n                           { Types.index = (2, 2148); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ptr\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"metadata\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"Thin\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args =\n                           [(Types.Type\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 5307); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_void\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []})\n                             ]\n                           }};\n                       trait =\n                       { Types.def_id =\n                         { Types.index = (2, 2148); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ptr\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"metadata\");\n                               disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Thin\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (2, 5307); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ffi\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"c_void\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []})\n                           ]\n                         }\n                       }\n                      ];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"31\"; line = \"117\" };\n                      lo = { Types.col = \"16\"; line = \"117\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2600); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"null_mut\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"29\"; line = \"117\" };\n                        lo = { Types.col = \"16\"; line = \"117\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false; inputs = [];\n                             output =\n                             (Types.RawPtr\n                                (Types.Adt {\n                                   def_id =\n                                   { Types.index = (2, 5307); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ffi\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"c_void\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []},\n                                 true));\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args =\n                    [(Types.Type\n                        Types.Adt {\n                          def_id =\n                          { Types.index = (2, 5307); krate = \"core\";\n                            path =\n                            [{ Types.data = (Types.TypeNs \"ffi\");\n                               disambiguator = 0 };\n                              { Types.data = (Types.TypeNs \"c_void\");\n                                disambiguator = 0 }\n                              ]\n                            };\n                          generic_args = []; trait_refs = []})\n                      ];\n                    trait = None;\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false; inputs = [];\n                           output =\n                           (Types.RawPtr\n                              (Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 5307); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_void\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []},\n                               true));\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"242\", \"27\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"31\"; line = \"117\" };\n                    lo = { Types.col = \"16\"; line = \"117\" } };\n                  ty =\n                  (Types.RawPtr\n                     (Types.Adt {\n                        def_id =\n                        { Types.index = (2, 5307); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ffi\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"c_void\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args = []; trait_refs = []},\n                      true))\n                  }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"13\"; line = \"118\" };\n                lo = { Types.col = \"12\"; line = \"113\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18543); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3371 };\n                      { Types.data = (Types.ValueNs \"SSL_CTX_ctrl\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"34\"; line = \"113\" };\n                  lo = { Types.col = \"12\"; line = \"113\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.Int Types.I32); (Types.Int Types.I64);\n                         (Types.RawPtr\n                            (Types.Adt {\n                               def_id =\n                               { Types.index = (2, 5307); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ffi\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"c_void\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []},\n                             true))\n                         ];\n                       output = (Types.Int Types.I64); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.Int Types.I32); (Types.Int Types.I64);\n                       (Types.RawPtr\n                          (Types.Adt {\n                             def_id =\n                             { Types.index = (2, 5307); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ffi\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"c_void\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           true))\n                       ];\n                     output = (Types.Int Types.I64); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"242\", \"8\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"13\"; line = \"118\" };\n              lo = { Types.col = \"12\"; line = \"113\" } };\n            ty = (Types.Int Types.I64) });\n    region_scope = { Types.data = Types.Node; id = \"31\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"9\"; line = \"119\" };\n      lo = { Types.col = \"11\"; line = \"112\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"242\", \"7\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"9\"; line = \"119\" };\n    lo = { Types.col = \"11\"; line = \"112\" } };\n  ty = (Types.Int Types.I64) }"

      <:
      i64) =.
    1L
  then
    Core.Result.Result_Ok (() <: Prims.unit)
    <:
    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
  else
    let res:Alloc.String.t_String =
      Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
            (sz 1)
            (let list = ["failed to set the minimum TLS version: "] in
              FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
              Rust_primitives.Hax.array_of_list 1 list)
            (let list =
                [
                  Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                    (Sandwich.Implementation.Openssl3.errstr () <: Alloc.String.t_String)
                  <:
                  Core.Fmt.Rt.t_Argument
                ]
              in
              FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
              Rust_primitives.Hax.array_of_list 1 list)
          <:
          Core.Fmt.t_Arguments)
    in
    Core.Result.Result_Err
    (Core.Convert.f_into #(Sandwich_proto.Errors.t_TLSConfigurationError & Alloc.String.t_String)
        #Sandwich.Error.t_Error
        #FStar.Tactics.Typeclasses.solve
        ((Sandwich_proto.Errors.TLSConfigurationError_TLSCONFIGURATIONERROR_UNSUPPORTED_PROTOCOL_VERSION
            <:
            Sandwich_proto.Errors.t_TLSConfigurationError),
          res
          <:
          (Sandwich_proto.Errors.t_TLSConfigurationError & Alloc.String.t_String)))
    <:
    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error

let impl__SslContext__set_min_and_max_tls_version
      (self: t_SslContext)
      (tls_options: Sandwich_api_proto.Tls.t_TLSOptions)
     =
  let min_version, max_version:(Sandwich.Tunnel.Tls.t_TlsVersion & Sandwich.Tunnel.Tls.t_TlsVersion)
  =
    Sandwich.Tunnel.Tls.Support.tls_options_get_min_max_tls_version tls_options
  in
  match impl__SslContext__set_minimum_tls_version self min_version with
  | Core.Result.Result_Ok _ -> impl__SslContext__set_maximum_tls_version self max_version
  | Core.Result.Result_Err err ->
    Core.Result.Result_Err err <: Core.Result.t_Result Prims.unit Sandwich.Error.t_Error

let impl__SslContext__set_private_key
      (self: t_SslContext)
      (private_key: Core.Ptr.Non_null.t_NonNull Openssl3.t_evp_pkey_st)
     =
  Rust_primitives.Hax.Control_flow_monad.Mexception.run (let! _:Prims.unit =
        if
          (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
              "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 269);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs \"set_private_key\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"57\"; line = \"464\" };\n                                lo = { Types.col = \"53\"; line = \"464\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"269\", \"15\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"57\"; line = \"464\" };\n                            lo = { Types.col = \"53\"; line = \"464\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"269\", \"14\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"59\"; line = \"464\" };\n                        lo = { Types.col = \"53\"; line = \"464\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"68\"; line = \"464\" };\n                     lo = { Types.col = \"60\"; line = \"464\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"66\"; line = \"464\" };\n                       lo = { Types.col = \"60\"; line = \"464\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"269\", \"12\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"68\"; line = \"464\" };\n                   lo = { Types.col = \"53\"; line = \"464\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {\n                    args =\n                    [{ Types.attributes = [];\n                       contents =\n                       Types.VarRef {\n                         id =\n                         { Types.id =\n                           { Types.local_id = \"4\";\n                             owner =\n                             { Types.index = (0, 269); krate = \"sandwich\";\n                               path =\n                               [{ Types.data =\n                                  (Types.TypeNs \"implementation\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"openssl3\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"tunnel\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"context\");\n                                   disambiguator = 0 };\n                                 { Types.data = Types.Impl; disambiguator = 4\n                                   };\n                                 { Types.data =\n                                   (Types.ValueNs \"set_private_key\");\n                                   disambiguator = 0 }\n                                 ]\n                               }\n                             };\n                           name = \"private_key\" }};\n                       hir_id = (Some (\"269\", \"19\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3/tunnel/context.rs\"));\n                         hi = { Types.col = \"81\"; line = \"464\" };\n                         lo = { Types.col = \"70\"; line = \"464\" } };\n                       ty =\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (2, 2222); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ptr\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"non_null\");\n                               disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"NonNull\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (27, 21034);\n                                 krate = \"openssl3\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"evp_pkey_st\");\n                                    disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []})\n                           ];\n                         trait_refs = []}\n                       }\n                      ];\n                    bounds_impls = [];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"90\"; line = \"464\" };\n                      lo = { Types.col = \"82\"; line = \"464\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 2245); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = Types.Impl; disambiguator = 3 };\n                            { Types.data = (Types.ValueNs \"as_ptr\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"88\"; line = \"464\" };\n                        lo = { Types.col = \"82\"; line = \"464\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [Types.Adt {\n                                def_id =\n                                { Types.index = (2, 2222); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ptr\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"non_null\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"NonNull\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args =\n                                [(Types.Type\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (27, 21034);\n                                        krate = \"openssl3\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"evp_pkey_st\");\n                                           disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args = []; trait_refs = []})\n                                  ];\n                                trait_refs = []}\n                               ];\n                             output =\n                             (Types.RawPtr\n                                (Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21034);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"evp_pkey_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []},\n                                 true));\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args =\n                    [(Types.Type\n                        Types.Adt {\n                          def_id =\n                          { Types.index = (27, 21034); krate = \"openssl3\";\n                            path =\n                            [{ Types.data = (Types.TypeNs \"evp_pkey_st\");\n                               disambiguator = 0 }\n                              ]\n                            };\n                          generic_args = []; trait_refs = []})\n                      ];\n                    trait = None;\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars = [];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [Types.Adt {\n                              def_id =\n                              { Types.index = (2, 2222); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ptr\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"non_null\");\n                                    disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"NonNull\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21034);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"evp_pkey_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []})\n                                ];\n                              trait_refs = []}\n                             ];\n                           output =\n                           (Types.RawPtr\n                              (Types.Adt {\n                                 def_id =\n                                 { Types.index = (27, 21034);\n                                   krate = \"openssl3\";\n                                   path =\n                                   [{ Types.data =\n                                      (Types.TypeNs \"evp_pkey_st\");\n                                      disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []},\n                               true));\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"269\", \"17\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"90\"; line = \"464\" };\n                    lo = { Types.col = \"70\"; line = \"464\" } };\n                  ty =\n                  (Types.RawPtr\n                     (Types.Adt {\n                        def_id =\n                        { Types.index = (27, 21034); krate = \"openssl3\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"evp_pkey_st\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        generic_args = []; trait_refs = []},\n                      true))\n                  }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"91\"; line = \"464\" };\n                lo = { Types.col = \"20\"; line = \"464\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18384); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3292 };\n                      { Types.data = (Types.ValueNs \"SSL_CTX_use_PrivateKey\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"52\"; line = \"464\" };\n                  lo = { Types.col = \"20\"; line = \"464\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.RawPtr\n                            (Types.Adt {\n                               def_id =\n                               { Types.index = (27, 21034);\n                                 krate = \"openssl3\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"evp_pkey_st\");\n                                    disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []},\n                             true))\n                         ];\n                       output = (Types.Int Types.I32); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.RawPtr\n                          (Types.Adt {\n                             def_id =\n                             { Types.index = (27, 21034); krate = \"openssl3\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"evp_pkey_st\");\n                                  disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           true))\n                       ];\n                     output = (Types.Int Types.I32); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"269\", \"8\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"91\"; line = \"464\" };\n              lo = { Types.col = \"20\"; line = \"464\" } };\n            ty = (Types.Int Types.I32) });\n    region_scope = { Types.data = Types.Node; id = \"21\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"93\"; line = \"464\" };\n      lo = { Types.col = \"11\"; line = \"464\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"269\", \"7\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"93\"; line = \"464\" };\n    lo = { Types.col = \"11\"; line = \"464\" } };\n  ty = (Types.Int Types.I32) }"

            <:
            i32) <>.
          1l
        then
          let res:Alloc.String.t_String =
            Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
                  (sz 1)
                  (let list = ["failed to use private key for authentication: "] in
                    FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                    Rust_primitives.Hax.array_of_list 1 list)
                  (let list =
                      [
                        Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                          (Sandwich.Implementation.Openssl3.errstr () <: Alloc.String.t_String)
                        <:
                        Core.Fmt.Rt.t_Argument
                      ]
                    in
                    FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                    Rust_primitives.Hax.array_of_list 1 list)
                <:
                Core.Fmt.t_Arguments)
          in
          let! hoist7:Rust_primitives.Hax.t_Never =
            Core.Ops.Control_flow.ControlFlow_Break
            (Core.Result.Result_Err
              (Core.Convert.f_into #(Sandwich_proto.Errors.t_PrivateKeyError & Alloc.String.t_String
                  )
                  #Sandwich.Error.t_Error
                  #FStar.Tactics.Typeclasses.solve
                  ((Sandwich_proto.Errors.PrivateKeyError_PRIVATEKEYERROR_UNSUPPORTED
                      <:
                      Sandwich_proto.Errors.t_PrivateKeyError),
                    res
                    <:
                    (Sandwich_proto.Errors.t_PrivateKeyError & Alloc.String.t_String)))
              <:
              Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Rust_primitives.Hax.t_Never
          in
          Core.Ops.Control_flow.ControlFlow_Continue (Rust_primitives.Hax.never_to_any hoist7)
          <:
          Core.Ops.Control_flow.t_ControlFlow
            (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
        else
          Core.Ops.Control_flow.ControlFlow_Continue ()
          <:
          Core.Ops.Control_flow.t_ControlFlow
            (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
      in
      Core.Ops.Control_flow.ControlFlow_Continue
      (if
          (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
              "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.PointerCoercion {cast = Types.MutToConstPointer;\n                   source =\n                   { Types.attributes = [];\n                     contents =\n                     Types.Call {\n                       args =\n                       [{ Types.attributes = [];\n                          contents =\n                          Types.Field {\n                            field =\n                            { Types.index = (0, 237); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.ValueNs \"0\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            lhs =\n                            { Types.attributes = [];\n                              contents =\n                              Types.Deref {\n                                arg =\n                                { Types.attributes = [];\n                                  contents =\n                                  Types.VarRef {\n                                    id =\n                                    { Types.id =\n                                      { Types.local_id = \"2\";\n                                        owner =\n                                        { Types.index = (0, 269);\n                                          krate = \"sandwich\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"implementation\");\n                                             disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"openssl3\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"tunnel\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"context\");\n                                              disambiguator = 0 };\n                                            { Types.data = Types.Impl;\n                                              disambiguator = 4 };\n                                            { Types.data =\n                                              (Types.ValueNs\n                                                 \"set_private_key\");\n                                              disambiguator = 0 }\n                                            ]\n                                          }\n                                        };\n                                      name = \"self\" }};\n                                  hir_id = None;\n                                  span =\n                                  { Types.filename =\n                                    (Types.Real\n                                       (Types.LocalPath\n                                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                    hi = { Types.col = \"60\"; line = \"475\" };\n                                    lo = { Types.col = \"56\"; line = \"475\" } };\n                                  ty =\n                                  (Types.Ref\n                                     ({ Types.kind = Types.ReErased },\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (0, 235);\n                                          krate = \"sandwich\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"implementation\");\n                                             disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"openssl3\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"tunnel\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"context\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"SslContext\");\n                                              disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args = []; trait_refs = []},\n                                      false))\n                                  }};\n                              hir_id = (Some (\"269\", \"82\"));\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"60\"; line = \"475\" };\n                                lo = { Types.col = \"56\"; line = \"475\" } };\n                              ty =\n                              Types.Adt {\n                                def_id =\n                                { Types.index = (0, 235); krate = \"sandwich\";\n                                  path =\n                                  [{ Types.data =\n                                     (Types.TypeNs \"implementation\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"openssl3\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"tunnel\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"context\");\n                                      disambiguator = 0 };\n                                    { Types.data =\n                                      (Types.TypeNs \"SslContext\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []}\n                              }};\n                          hir_id = (Some (\"269\", \"81\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"62\"; line = \"475\" };\n                            lo = { Types.col = \"56\"; line = \"475\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (2, 2222); krate = \"core\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ptr\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"non_null\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"NonNull\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args =\n                            [(Types.Type\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []})\n                              ];\n                            trait_refs = []}\n                          }\n                         ];\n                       bounds_impls = [];\n                       fn_span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3/tunnel/context.rs\"));\n                         hi = { Types.col = \"71\"; line = \"475\" };\n                         lo = { Types.col = \"63\"; line = \"475\" } };\n                       from_hir_call = true;\n                       fun' =\n                       { Types.attributes = [];\n                         contents =\n                         Types.GlobalName {\n                           id =\n                           { Types.index = (2, 2245); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ptr\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"non_null\");\n                                 disambiguator = 0 };\n                               { Types.data = Types.Impl; disambiguator = 3 };\n                               { Types.data = (Types.ValueNs \"as_ptr\");\n                                 disambiguator = 0 }\n                               ]\n                             }};\n                         hir_id = None;\n                         span =\n                         { Types.filename =\n                           (Types.Real\n                              (Types.LocalPath\n                                 \"rust/implementation/openssl3/tunnel/context.rs\"));\n                           hi = { Types.col = \"69\"; line = \"475\" };\n                           lo = { Types.col = \"63\"; line = \"475\" } };\n                         ty =\n                         (Types.Arrow\n                            { Types.bound_vars = [];\n                              value =\n                              { Types.abi = Types.Abi {todo = \"Rust\"};\n                                c_variadic = false;\n                                inputs =\n                                [Types.Adt {\n                                   def_id =\n                                   { Types.index = (2, 2222); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ptr\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"non_null\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"NonNull\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type\n                                       Types.Adt {\n                                         def_id =\n                                         { Types.index = (27, 21403);\n                                           krate = \"openssl3\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"ssl_ctx_st\");\n                                              disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args = []; trait_refs = []})\n                                     ];\n                                   trait_refs = []}\n                                  ];\n                                output =\n                                (Types.RawPtr\n                                   (Types.Adt {\n                                      def_id =\n                                      { Types.index = (27, 21403);\n                                        krate = \"openssl3\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"ssl_ctx_st\");\n                                           disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args = []; trait_refs = []},\n                                    true));\n                                safety = Types.Safe }\n                              })\n                         };\n                       generic_args =\n                       [(Types.Type\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (27, 21403); krate = \"openssl3\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                  disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []})\n                         ];\n                       trait = None;\n                       ty =\n                       (Types.Arrow\n                          { Types.bound_vars = [];\n                            value =\n                            { Types.abi = Types.Abi {todo = \"Rust\"};\n                              c_variadic = false;\n                              inputs =\n                              [Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 2222); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ptr\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"non_null\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"NonNull\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args =\n                                 [(Types.Type\n                                     Types.Adt {\n                                       def_id =\n                                       { Types.index = (27, 21403);\n                                         krate = \"openssl3\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"ssl_ctx_st\");\n                                            disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args = []; trait_refs = []})\n                                   ];\n                                 trait_refs = []}\n                                ];\n                              output =\n                              (Types.RawPtr\n                                 (Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21403);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"ssl_ctx_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  true));\n                              safety = Types.Safe }\n                            })};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"71\"; line = \"475\" };\n                       lo = { Types.col = \"56\"; line = \"475\" } };\n                     ty =\n                     (Types.RawPtr\n                        (Types.Adt {\n                           def_id =\n                           { Types.index = (27, 21403); krate = \"openssl3\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                disambiguator = 0 }\n                               ]\n                             };\n                           generic_args = []; trait_refs = []},\n                         true))\n                     }};\n                 hir_id = (Some (\"269\", \"79\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"71\"; line = \"475\" };\n                   lo = { Types.col = \"56\"; line = \"475\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     false))\n                 }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"72\"; line = \"475\" };\n                lo = { Types.col = \"20\"; line = \"475\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18410); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3305 };\n                      { Types.data =\n                        (Types.ValueNs \"SSL_CTX_check_private_key\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"55\"; line = \"475\" };\n                  lo = { Types.col = \"20\"; line = \"475\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            false))\n                         ];\n                       output = (Types.Int Types.I32); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          false))\n                       ];\n                     output = (Types.Int Types.I32); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"269\", \"75\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"72\"; line = \"475\" };\n              lo = { Types.col = \"20\"; line = \"475\" } };\n            ty = (Types.Int Types.I32) });\n    region_scope = { Types.data = Types.Node; id = \"84\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"74\"; line = \"475\" };\n      lo = { Types.col = \"11\"; line = \"475\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"269\", \"74\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"74\"; line = \"475\" };\n    lo = { Types.col = \"11\"; line = \"475\" } };\n  ty = (Types.Int Types.I32) }"

            <:
            i32) =.
          1l
        then
          Core.Result.Result_Ok (() <: Prims.unit)
          <:
          Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
        else
          let res:Alloc.String.t_String =
            Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
                  (sz 1)
                  (let list = ["private key does not match certificate: "] in
                    FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                    Rust_primitives.Hax.array_of_list 1 list)
                  (let list =
                      [
                        Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                          (Sandwich.Implementation.Openssl3.errstr () <: Alloc.String.t_String)
                        <:
                        Core.Fmt.Rt.t_Argument
                      ]
                    in
                    FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                    Rust_primitives.Hax.array_of_list 1 list)
                <:
                Core.Fmt.t_Arguments)
          in
          Core.Result.Result_Err
          (Core.Convert.f_into #(Sandwich_proto.Errors.t_TLSConfigurationError &
                Alloc.String.t_String)
              #Sandwich.Error.t_Error
              #FStar.Tactics.Typeclasses.solve
              ((Sandwich_proto.Errors.TLSConfigurationError_TLSCONFIGURATIONERROR_PRIVATE_KEY_INCONSISTENT_WITH_CERTIFICATE
                  <:
                  Sandwich_proto.Errors.t_TLSConfigurationError),
                res
                <:
                (Sandwich_proto.Errors.t_TLSConfigurationError & Alloc.String.t_String)))
          <:
          Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
      <:
      Core.Ops.Control_flow.t_ControlFlow (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
        (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error))

let impl__SslContext__set_trust (self: t_SslContext) (mode: Sandwich.Tunnel.Context.t_Mode) =
  if
    (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
        "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 246);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs \"set_trust\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"20\"; line = \"186\" };\n                                lo = { Types.col = \"16\"; line = \"186\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"246\", \"15\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"20\"; line = \"186\" };\n                            lo = { Types.col = \"16\"; line = \"186\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"246\", \"14\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"22\"; line = \"186\" };\n                        lo = { Types.col = \"16\"; line = \"186\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"31\"; line = \"186\" };\n                     lo = { Types.col = \"23\"; line = \"186\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"29\"; line = \"186\" };\n                       lo = { Types.col = \"23\"; line = \"186\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"246\", \"12\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"31\"; line = \"186\" };\n                   lo = { Types.col = \"16\"; line = \"186\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Cast {\n                    source =\n                    { Types.attributes = [];\n                      contents =\n                      Types.Match {\n                        arms =\n                        [{ Types.attributes = [];\n                           body =\n                           { Types.attributes = [];\n                             contents =\n                             Types.NamedConst {args = [];\n                               def_id =\n                               { Types.index = (27, 7878);\n                                 krate = \"openssl3\";\n                                 path =\n                                 [{ Types.data =\n                                    (Types.ValueNs \"X509_TRUST_SSL_CLIENT\");\n                                    disambiguator = 0 }\n                                   ]\n                                 };\n                               impl = None; user_ty = None};\n                             hir_id = (Some (\"246\", \"25\"));\n                             span =\n                             { Types.filename =\n                               (Types.Real\n                                  (Types.LocalPath\n                                     \"rust/implementation/openssl3/tunnel/context.rs\"));\n                               hi = { Types.col = \"67\"; line = \"188\" };\n                               lo = { Types.col = \"36\"; line = \"188\" } };\n                             ty = (Types.Uint Types.U32) };\n                           guard = None;\n                           lint_level =\n                           (Types.Explicit\n                              { Types.local_id = \"24\";\n                                owner =\n                                { Types.index = (0, 246); krate = \"sandwich\";\n                                  path =\n                                  [{ Types.data =\n                                     (Types.TypeNs \"implementation\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"openssl3\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"tunnel\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"context\");\n                                      disambiguator = 0 };\n                                    { Types.data = Types.Impl;\n                                      disambiguator = 4 };\n                                    { Types.data =\n                                      (Types.ValueNs \"set_trust\");\n                                      disambiguator = 0 }\n                                    ]\n                                  }\n                                });\n                           pattern =\n                           { Types.attributes = [];\n                             contents =\n                             Types.Variant {args = [];\n                               info =\n                               { Types.typ =\n                                 { Types.index = (0, 1395);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"tunnel\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"context\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"Mode\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 typ_is_record = false;\n                                 typ_is_struct = false;\n                                 type_namespace =\n                                 { Types.index = (0, 1395);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"tunnel\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"context\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 variant =\n                                 { Types.index = (0, 1396);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"tunnel\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"context\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"Mode\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"Client\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 variant_index = \"0\";\n                                 variant_is_record = false };\n                               subpatterns = []};\n                             hir_id = None;\n                             span =\n                             { Types.filename =\n                               (Types.Real\n                                  (Types.LocalPath\n                                     \"rust/implementation/openssl3/tunnel/context.rs\"));\n                               hi = { Types.col = \"32\"; line = \"188\" };\n                               lo = { Types.col = \"20\"; line = \"188\" } };\n                             ty =\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (0, 1395); krate = \"sandwich\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"tunnel\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"context\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"Mode\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []}\n                             };\n                           scope = { Types.data = Types.Node; id = \"24\" };\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"67\"; line = \"188\" };\n                             lo = { Types.col = \"20\"; line = \"188\" } }\n                           };\n                          { Types.attributes = [];\n                            body =\n                            { Types.attributes = [];\n                              contents =\n                              Types.NamedConst {args = [];\n                                def_id =\n                                { Types.index = (27, 7879);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data =\n                                     (Types.ValueNs \"X509_TRUST_SSL_SERVER\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                impl = None; user_ty = None};\n                              hir_id = (Some (\"246\", \"32\"));\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"67\"; line = \"189\" };\n                                lo = { Types.col = \"36\"; line = \"189\" } };\n                              ty = (Types.Uint Types.U32) };\n                            guard = None;\n                            lint_level =\n                            (Types.Explicit\n                               { Types.local_id = \"31\";\n                                 owner =\n                                 { Types.index = (0, 246);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data =\n                                      (Types.TypeNs \"implementation\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"openssl3\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"tunnel\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"context\");\n                                       disambiguator = 0 };\n                                     { Types.data = Types.Impl;\n                                       disambiguator = 4 };\n                                     { Types.data =\n                                       (Types.ValueNs \"set_trust\");\n                                       disambiguator = 0 }\n                                     ]\n                                   }\n                                 });\n                            pattern =\n                            { Types.attributes = [];\n                              contents =\n                              Types.Variant {args = [];\n                                info =\n                                { Types.typ =\n                                  { Types.index = (0, 1395);\n                                    krate = \"sandwich\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"tunnel\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"context\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Mode\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  typ_is_record = false;\n                                  typ_is_struct = false;\n                                  type_namespace =\n                                  { Types.index = (0, 1395);\n                                    krate = \"sandwich\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"tunnel\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"context\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  variant =\n                                  { Types.index = (0, 1398);\n                                    krate = \"sandwich\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"tunnel\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"context\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Mode\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Server\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  variant_index = \"1\";\n                                  variant_is_record = false };\n                                subpatterns = []};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"32\"; line = \"189\" };\n                                lo = { Types.col = \"20\"; line = \"189\" } };\n                              ty =\n                              Types.Adt {\n                                def_id =\n                                { Types.index = (0, 1395);\n                                  krate = \"sandwich\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"tunnel\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"context\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"Mode\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []}\n                              };\n                            scope = { Types.data = Types.Node; id = \"31\" };\n                            span =\n                            { Types.filename =\n                              (Types.Real\n                                 (Types.LocalPath\n                                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n                              hi = { Types.col = \"67\"; line = \"189\" };\n                              lo = { Types.col = \"20\"; line = \"189\" } }\n                            }\n                          ];\n                        scrutinee =\n                        { Types.attributes = [];\n                          contents =\n                          Types.VarRef {\n                            id =\n                            { Types.id =\n                              { Types.local_id = \"4\";\n                                owner =\n                                { Types.index = (0, 246); krate = \"sandwich\";\n                                  path =\n                                  [{ Types.data =\n                                     (Types.TypeNs \"implementation\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"openssl3\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"tunnel\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"context\");\n                                      disambiguator = 0 };\n                                    { Types.data = Types.Impl;\n                                      disambiguator = 4 };\n                                    { Types.data =\n                                      (Types.ValueNs \"set_trust\");\n                                      disambiguator = 0 }\n                                    ]\n                                  }\n                                };\n                              name = \"mode\" }};\n                          hir_id = (Some (\"246\", \"19\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"26\"; line = \"187\" };\n                            lo = { Types.col = \"22\"; line = \"187\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 1395); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"tunnel\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"Mode\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"246\", \"18\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"17\"; line = \"190\" };\n                        lo = { Types.col = \"16\"; line = \"187\" } };\n                      ty = (Types.Uint Types.U32) }};\n                  hir_id = (Some (\"246\", \"17\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"26\"; line = \"190\" };\n                    lo = { Types.col = \"16\"; line = \"187\" } };\n                  ty = (Types.Int Types.I32) }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"13\"; line = \"191\" };\n                lo = { Types.col = \"12\"; line = \"185\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18432); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3316 };\n                      { Types.data = (Types.ValueNs \"SSL_CTX_set_trust\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"39\"; line = \"185\" };\n                  lo = { Types.col = \"12\"; line = \"185\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.Int Types.I32)];\n                       output = (Types.Int Types.I32); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.Int Types.I32)];\n                     output = (Types.Int Types.I32); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"246\", \"8\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"13\"; line = \"191\" };\n              lo = { Types.col = \"12\"; line = \"185\" } };\n            ty = (Types.Int Types.I32) });\n    region_scope = { Types.data = Types.Node; id = \"37\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"9\"; line = \"192\" };\n      lo = { Types.col = \"11\"; line = \"184\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"246\", \"7\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"9\"; line = \"192\" };\n    lo = { Types.col = \"11\"; line = \"184\" } };\n  ty = (Types.Int Types.I32) }"

      <:
      i32) =.
    1l
  then
    Core.Result.Result_Ok (() <: Prims.unit)
    <:
    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
  else
    let res:Alloc.String.t_String =
      Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
            (sz 1)
            (let list = ["failed to set the trust parameter: "] in
              FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
              Rust_primitives.Hax.array_of_list 1 list)
            (let list =
                [
                  Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                    (Sandwich.Implementation.Openssl3.errstr () <: Alloc.String.t_String)
                  <:
                  Core.Fmt.Rt.t_Argument
                ]
              in
              FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
              Rust_primitives.Hax.array_of_list 1 list)
          <:
          Core.Fmt.t_Arguments)
    in
    Core.Result.Result_Err
    (Core.Convert.f_into #(Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String)
        #Sandwich.Error.t_Error
        #FStar.Tactics.Typeclasses.solve
        ((Sandwich_proto.Errors.SystemError_SYSTEMERROR_BACKEND
            <:
            Sandwich_proto.Errors.t_SystemError),
          res
          <:
          (Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String)))
    <:
    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error

let ssl_context_new_ssl (ssl_context: Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_ssl_ctx_st) =
  Core.Option.impl__ok_or_else #(Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_ssl_st)
    #Sandwich.Error.t_Error
    (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
        "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Call {\n                        args =\n                        [{ Types.attributes = [];\n                           contents =\n                           Types.Call {\n                             args =\n                             [{ Types.attributes = [];\n                                contents =\n                                Types.Borrow {\n                                  arg =\n                                  { Types.attributes = [];\n                                    contents =\n                                    Types.Deref {\n                                      arg =\n                                      { Types.attributes = [];\n                                        contents =\n                                        Types.VarRef {\n                                          id =\n                                          { Types.id =\n                                            { Types.local_id = \"2\";\n                                              owner =\n                                              { Types.index = (0, 279);\n                                                krate = \"sandwich\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs\n                                                      \"implementation\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"openssl3\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"tunnel\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"context\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.ValueNs\n                                                       \"ssl_context_new_ssl\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                }\n                                              };\n                                            name = \"ssl_context\" }};\n                                        hir_id = None;\n                                        span =\n                                        { Types.filename =\n                                          (Types.Real\n                                             (Types.LocalPath\n                                                \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                          hi =\n                                          { Types.col = \"48\"; line = \"654\" };\n                                          lo =\n                                          { Types.col = \"37\"; line = \"654\" }\n                                          };\n                                        ty =\n                                        (Types.Ref\n                                           ({ Types.kind = Types.ReErased },\n                                            Types.Adt {\n                                              def_id =\n                                              { Types.index = (0, 608);\n                                                krate = \"sandwich\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"support\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"pimpl\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"Pimpl\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args =\n                                              [(Types.Lifetime\n                                                  { Types.kind =\n                                                    Types.ReErased });\n                                                (Types.Type\n                                                   Types.Adt {\n                                                     def_id =\n                                                     { Types.index =\n                                                       (27, 21403);\n                                                       krate = \"openssl3\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs\n                                                             \"ssl_ctx_st\");\n                                                          disambiguator = 0 }\n                                                         ]\n                                                       };\n                                                     generic_args = [];\n                                                     trait_refs = []})\n                                                ];\n                                              trait_refs =\n                                              [{ Types.args = [];\n                                                 impl =\n                                                 Types.Builtin {\n                                                   trait =\n                                                   { Types.def_id =\n                                                     { Types.index =\n                                                       (2, 26413);\n                                                       krate = \"core\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs\n                                                             \"marker\");\n                                                          disambiguator = 0 };\n                                                         { Types.data =\n                                                           (Types.TypeNs\n                                                              \"Sized\");\n                                                           disambiguator = 0\n                                                           }\n                                                         ]\n                                                       };\n                                                     generic_args =\n                                                     [(Types.Type\n                                                         Types.Adt {\n                                                           def_id =\n                                                           { Types.index =\n                                                             (27, 21403);\n                                                             krate =\n                                                             \"openssl3\";\n                                                             path =\n                                                             [{ Types.data =\n                                                                (Types.TypeNs\n                                                                   \"ssl_ctx_st\");\n                                                                disambiguator =\n                                                                0 }\n                                                               ]\n                                                             };\n                                                           generic_args = [];\n                                                           trait_refs = []})\n                                                       ]\n                                                     }};\n                                                 trait =\n                                                 { Types.def_id =\n                                                   { Types.index = (2, 26413);\n                                                     krate = \"core\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"marker\");\n                                                        disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"Sized\");\n                                                         disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args =\n                                                   [(Types.Type\n                                                       Types.Adt {\n                                                         def_id =\n                                                         { Types.index =\n                                                           (27, 21403);\n                                                           krate = \"openssl3\";\n                                                           path =\n                                                           [{ Types.data =\n                                                              (Types.TypeNs\n                                                                 \"ssl_ctx_st\");\n                                                              disambiguator =\n                                                              0 }\n                                                             ]\n                                                           };\n                                                         generic_args = [];\n                                                         trait_refs = []})\n                                                     ]\n                                                   }\n                                                 }\n                                                ]},\n                                            false))\n                                        }};\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath\n                                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                      hi = { Types.col = \"48\"; line = \"654\" };\n                                      lo = { Types.col = \"37\"; line = \"654\" }\n                                      };\n                                    ty =\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (0, 608);\n                                        krate = \"sandwich\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"support\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"pimpl\");\n                                            disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"Pimpl\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Lifetime\n                                          { Types.kind = Types.ReErased });\n                                        (Types.Type\n                                           Types.Adt {\n                                             def_id =\n                                             { Types.index = (27, 21403);\n                                               krate = \"openssl3\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"ssl_ctx_st\");\n                                                  disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args = [];\n                                             trait_refs = []})\n                                        ];\n                                      trait_refs =\n                                      [{ Types.args = [];\n                                         impl =\n                                         Types.Builtin {\n                                           trait =\n                                           { Types.def_id =\n                                             { Types.index = (2, 26413);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"marker\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"Sized\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args =\n                                             [(Types.Type\n                                                 Types.Adt {\n                                                   def_id =\n                                                   { Types.index =\n                                                     (27, 21403);\n                                                     krate = \"openssl3\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"ssl_ctx_st\");\n                                                        disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args = [];\n                                                   trait_refs = []})\n                                               ]\n                                             }};\n                                         trait =\n                                         { Types.def_id =\n                                           { Types.index = (2, 26413);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"marker\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"Sized\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args =\n                                           [(Types.Type\n                                               Types.Adt {\n                                                 def_id =\n                                                 { Types.index = (27, 21403);\n                                                   krate = \"openssl3\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs\n                                                         \"ssl_ctx_st\");\n                                                      disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 generic_args = [];\n                                                 trait_refs = []})\n                                             ]\n                                           }\n                                         }\n                                        ]}\n                                    };\n                                  borrow_kind = Types.Shared};\n                                hir_id = (Some (\"279\", \"20\"));\n                                span =\n                                { Types.filename =\n                                  (Types.Real\n                                     (Types.LocalPath\n                                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                  hi = { Types.col = \"48\"; line = \"654\" };\n                                  lo = { Types.col = \"37\"; line = \"654\" } };\n                                ty =\n                                (Types.Ref\n                                   ({ Types.kind = Types.ReErased },\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (0, 608);\n                                        krate = \"sandwich\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"support\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"pimpl\");\n                                            disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"Pimpl\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Lifetime\n                                          { Types.kind = Types.ReErased });\n                                        (Types.Type\n                                           Types.Adt {\n                                             def_id =\n                                             { Types.index = (27, 21403);\n                                               krate = \"openssl3\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"ssl_ctx_st\");\n                                                  disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args = [];\n                                             trait_refs = []})\n                                        ];\n                                      trait_refs =\n                                      [{ Types.args = [];\n                                         impl =\n                                         Types.Builtin {\n                                           trait =\n                                           { Types.def_id =\n                                             { Types.index = (2, 26413);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"marker\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"Sized\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args =\n                                             [(Types.Type\n                                                 Types.Adt {\n                                                   def_id =\n                                                   { Types.index =\n                                                     (27, 21403);\n                                                     krate = \"openssl3\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"ssl_ctx_st\");\n                                                        disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args = [];\n                                                   trait_refs = []})\n                                               ]\n                                             }};\n                                         trait =\n                                         { Types.def_id =\n                                           { Types.index = (2, 26413);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"marker\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"Sized\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args =\n                                           [(Types.Type\n                                               Types.Adt {\n                                                 def_id =\n                                                 { Types.index = (27, 21403);\n                                                   krate = \"openssl3\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs\n                                                         \"ssl_ctx_st\");\n                                                      disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 generic_args = [];\n                                                 trait_refs = []})\n                                             ]\n                                           }\n                                         }\n                                        ]},\n                                    false))\n                                }\n                               ];\n                             bounds_impls = [];\n                             fn_span =\n                             { Types.filename =\n                               (Types.Real\n                                  (Types.LocalPath\n                                     \"rust/implementation/openssl3/tunnel/context.rs\"));\n                               hi = { Types.col = \"61\"; line = \"654\" };\n                               lo = { Types.col = \"49\"; line = \"654\" } };\n                             from_hir_call = true;\n                             fun' =\n                             { Types.attributes = [];\n                               contents =\n                               Types.GlobalName {\n                                 id =\n                                 { Types.index = (0, 624);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"support\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"pimpl\");\n                                       disambiguator = 0 };\n                                     { Types.data = Types.Impl;\n                                       disambiguator = 2 };\n                                     { Types.data =\n                                       (Types.ValueNs \"as_nonnull\");\n                                       disambiguator = 0 }\n                                     ]\n                                   }};\n                               hir_id = None;\n                               span =\n                               { Types.filename =\n                                 (Types.Real\n                                    (Types.LocalPath\n                                       \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                 hi = { Types.col = \"59\"; line = \"654\" };\n                                 lo = { Types.col = \"49\"; line = \"654\" } };\n                               ty =\n                               (Types.Arrow\n                                  { Types.bound_vars =\n                                    [(Types.Region\n                                        (Types.BrNamed\n                                           ({ Types.index = (0, 1658);\n                                              krate = \"sandwich\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"support\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"pimpl\");\n                                                  disambiguator = 0 };\n                                                { Types.data = Types.Impl;\n                                                  disambiguator = 2 };\n                                                { Types.data =\n                                                  (Types.ValueNs \"as_nonnull\");\n                                                  disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.LifetimeNs \"'_\");\n                                                  disambiguator = 0 }\n                                                ]\n                                              },\n                                            \"'_\")))\n                                      ];\n                                    value =\n                                    { Types.abi = Types.Abi {todo = \"Rust\"};\n                                      c_variadic = false;\n                                      inputs =\n                                      [(Types.Ref\n                                          ({ Types.kind =\n                                             (Types.ReBound\n                                                (\"0\",\n                                                 { Types.kind =\n                                                   (Types.BrNamed\n                                                      ({ Types.index =\n                                                         (0, 1658);\n                                                         krate = \"sandwich\";\n                                                         path =\n                                                         [{ Types.data =\n                                                            (Types.TypeNs\n                                                               \"support\");\n                                                            disambiguator = 0\n                                                            };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"pimpl\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             Types.Impl;\n                                                             disambiguator =\n                                                             2 };\n                                                           { Types.data =\n                                                             (Types.ValueNs\n                                                                \"as_nonnull\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             (Types.LifetimeNs\n                                                                \"'_\");\n                                                             disambiguator =\n                                                             0 }\n                                                           ]\n                                                         },\n                                                       \"'_\"));\n                                                   var = \"0\" }))\n                                             },\n                                           Types.Adt {\n                                             def_id =\n                                             { Types.index = (0, 608);\n                                               krate = \"sandwich\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"support\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"pimpl\");\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"Pimpl\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args =\n                                             [(Types.Lifetime\n                                                 { Types.kind =\n                                                   Types.ReErased });\n                                               (Types.Type\n                                                  Types.Adt {\n                                                    def_id =\n                                                    { Types.index =\n                                                      (27, 21403);\n                                                      krate = \"openssl3\";\n                                                      path =\n                                                      [{ Types.data =\n                                                         (Types.TypeNs\n                                                            \"ssl_ctx_st\");\n                                                         disambiguator = 0 }\n                                                        ]\n                                                      };\n                                                    generic_args = [];\n                                                    trait_refs = []})\n                                               ];\n                                             trait_refs =\n                                             [{ Types.args = [];\n                                                impl =\n                                                Types.Builtin {\n                                                  trait =\n                                                  { Types.def_id =\n                                                    { Types.index =\n                                                      (2, 26413);\n                                                      krate = \"core\";\n                                                      path =\n                                                      [{ Types.data =\n                                                         (Types.TypeNs\n                                                            \"marker\");\n                                                         disambiguator = 0 };\n                                                        { Types.data =\n                                                          (Types.TypeNs\n                                                             \"Sized\");\n                                                          disambiguator = 0 }\n                                                        ]\n                                                      };\n                                                    generic_args =\n                                                    [(Types.Type\n                                                        Types.Adt {\n                                                          def_id =\n                                                          { Types.index =\n                                                            (27, 21403);\n                                                            krate =\n                                                            \"openssl3\";\n                                                            path =\n                                                            [{ Types.data =\n                                                               (Types.TypeNs\n                                                                  \"ssl_ctx_st\");\n                                                               disambiguator =\n                                                               0 }\n                                                              ]\n                                                            };\n                                                          generic_args = [];\n                                                          trait_refs = []})\n                                                      ]\n                                                    }};\n                                                trait =\n                                                { Types.def_id =\n                                                  { Types.index = (2, 26413);\n                                                    krate = \"core\";\n                                                    path =\n                                                    [{ Types.data =\n                                                       (Types.TypeNs \"marker\");\n                                                       disambiguator = 0 };\n                                                      { Types.data =\n                                                        (Types.TypeNs \"Sized\");\n                                                        disambiguator = 0 }\n                                                      ]\n                                                    };\n                                                  generic_args =\n                                                  [(Types.Type\n                                                      Types.Adt {\n                                                        def_id =\n                                                        { Types.index =\n                                                          (27, 21403);\n                                                          krate = \"openssl3\";\n                                                          path =\n                                                          [{ Types.data =\n                                                             (Types.TypeNs\n                                                                \"ssl_ctx_st\");\n                                                             disambiguator =\n                                                             0 }\n                                                            ]\n                                                          };\n                                                        generic_args = [];\n                                                        trait_refs = []})\n                                                    ]\n                                                  }\n                                                }\n                                               ]},\n                                           false))\n                                        ];\n                                      output =\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (2, 2222);\n                                          krate = \"core\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"ptr\");\n                                             disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"non_null\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"NonNull\");\n                                              disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args =\n                                        [(Types.Type\n                                            Types.Adt {\n                                              def_id =\n                                              { Types.index = (27, 21403);\n                                                krate = \"openssl3\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"ssl_ctx_st\");\n                                                   disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args = [];\n                                              trait_refs = []})\n                                          ];\n                                        trait_refs = []};\n                                      safety = Types.Safe }\n                                    })\n                               };\n                             generic_args =\n                             [(Types.Lifetime { Types.kind = Types.ReErased });\n                               (Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21403);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"ssl_ctx_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []})\n                               ];\n                             trait = None;\n                             ty =\n                             (Types.Arrow\n                                { Types.bound_vars =\n                                  [(Types.Region\n                                      (Types.BrNamed\n                                         ({ Types.index = (0, 1658);\n                                            krate = \"sandwich\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"support\");\n                                               disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"pimpl\");\n                                                disambiguator = 0 };\n                                              { Types.data = Types.Impl;\n                                                disambiguator = 2 };\n                                              { Types.data =\n                                                (Types.ValueNs \"as_nonnull\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.LifetimeNs \"'_\");\n                                                disambiguator = 0 }\n                                              ]\n                                            },\n                                          \"'_\")))\n                                    ];\n                                  value =\n                                  { Types.abi = Types.Abi {todo = \"Rust\"};\n                                    c_variadic = false;\n                                    inputs =\n                                    [(Types.Ref\n                                        ({ Types.kind =\n                                           (Types.ReBound\n                                              (\"0\",\n                                               { Types.kind =\n                                                 (Types.BrNamed\n                                                    ({ Types.index =\n                                                       (0, 1658);\n                                                       krate = \"sandwich\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs\n                                                             \"support\");\n                                                          disambiguator = 0 };\n                                                         { Types.data =\n                                                           (Types.TypeNs\n                                                              \"pimpl\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           Types.Impl;\n                                                           disambiguator = 2\n                                                           };\n                                                         { Types.data =\n                                                           (Types.ValueNs\n                                                              \"as_nonnull\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.LifetimeNs\n                                                              \"'_\");\n                                                           disambiguator = 0\n                                                           }\n                                                         ]\n                                                       },\n                                                     \"'_\"));\n                                                 var = \"0\" }))\n                                           },\n                                         Types.Adt {\n                                           def_id =\n                                           { Types.index = (0, 608);\n                                             krate = \"sandwich\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"support\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"pimpl\");\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"Pimpl\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args =\n                                           [(Types.Lifetime\n                                               { Types.kind = Types.ReErased\n                                                 });\n                                             (Types.Type\n                                                Types.Adt {\n                                                  def_id =\n                                                  { Types.index = (27, 21403);\n                                                    krate = \"openssl3\";\n                                                    path =\n                                                    [{ Types.data =\n                                                       (Types.TypeNs\n                                                          \"ssl_ctx_st\");\n                                                       disambiguator = 0 }\n                                                      ]\n                                                    };\n                                                  generic_args = [];\n                                                  trait_refs = []})\n                                             ];\n                                           trait_refs =\n                                           [{ Types.args = [];\n                                              impl =\n                                              Types.Builtin {\n                                                trait =\n                                                { Types.def_id =\n                                                  { Types.index = (2, 26413);\n                                                    krate = \"core\";\n                                                    path =\n                                                    [{ Types.data =\n                                                       (Types.TypeNs \"marker\");\n                                                       disambiguator = 0 };\n                                                      { Types.data =\n                                                        (Types.TypeNs \"Sized\");\n                                                        disambiguator = 0 }\n                                                      ]\n                                                    };\n                                                  generic_args =\n                                                  [(Types.Type\n                                                      Types.Adt {\n                                                        def_id =\n                                                        { Types.index =\n                                                          (27, 21403);\n                                                          krate = \"openssl3\";\n                                                          path =\n                                                          [{ Types.data =\n                                                             (Types.TypeNs\n                                                                \"ssl_ctx_st\");\n                                                             disambiguator =\n                                                             0 }\n                                                            ]\n                                                          };\n                                                        generic_args = [];\n                                                        trait_refs = []})\n                                                    ]\n                                                  }};\n                                              trait =\n                                              { Types.def_id =\n                                                { Types.index = (2, 26413);\n                                                  krate = \"core\";\n                                                  path =\n                                                  [{ Types.data =\n                                                     (Types.TypeNs \"marker\");\n                                                     disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.TypeNs \"Sized\");\n                                                      disambiguator = 0 }\n                                                    ]\n                                                  };\n                                                generic_args =\n                                                [(Types.Type\n                                                    Types.Adt {\n                                                      def_id =\n                                                      { Types.index =\n                                                        (27, 21403);\n                                                        krate = \"openssl3\";\n                                                        path =\n                                                        [{ Types.data =\n                                                           (Types.TypeNs\n                                                              \"ssl_ctx_st\");\n                                                           disambiguator = 0\n                                                           }\n                                                          ]\n                                                        };\n                                                      generic_args = [];\n                                                      trait_refs = []})\n                                                  ]\n                                                }\n                                              }\n                                             ]},\n                                         false))\n                                      ];\n                                    output =\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (2, 2222);\n                                        krate = \"core\";\n                                        path =\n                                        [{ Types.data = (Types.TypeNs \"ptr\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"non_null\");\n                                            disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"NonNull\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Type\n                                          Types.Adt {\n                                            def_id =\n                                            { Types.index = (27, 21403);\n                                              krate = \"openssl3\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ssl_ctx_st\");\n                                                 disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args = [];\n                                            trait_refs = []})\n                                        ];\n                                      trait_refs = []};\n                                    safety = Types.Safe }\n                                  })};\n                           hir_id = (Some (\"279\", \"18\"));\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"61\"; line = \"654\" };\n                             lo = { Types.col = \"37\"; line = \"654\" } };\n                           ty =\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                           }\n                          ];\n                        bounds_impls = [];\n                        fn_span =\n                        { Types.filename =\n                          (Types.Real\n                             (Types.LocalPath\n                                \"rust/implementation/openssl3/tunnel/context.rs\"));\n                          hi = { Types.col = \"70\"; line = \"654\" };\n                          lo = { Types.col = \"62\"; line = \"654\" } };\n                        from_hir_call = true;\n                        fun' =\n                        { Types.attributes = [];\n                          contents =\n                          Types.GlobalName {\n                            id =\n                            { Types.index = (2, 2245); krate = \"core\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ptr\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"non_null\");\n                                  disambiguator = 0 };\n                                { Types.data = Types.Impl; disambiguator = 3\n                                  };\n                                { Types.data = (Types.ValueNs \"as_ptr\");\n                                  disambiguator = 0 }\n                                ]\n                              }};\n                          hir_id = None;\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"68\"; line = \"654\" };\n                            lo = { Types.col = \"62\"; line = \"654\" } };\n                          ty =\n                          (Types.Arrow\n                             { Types.bound_vars = [];\n                               value =\n                               { Types.abi = Types.Abi {todo = \"Rust\"};\n                                 c_variadic = false;\n                                 inputs =\n                                 [Types.Adt {\n                                    def_id =\n                                    { Types.index = (2, 2222);\n                                      krate = \"core\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"ptr\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"non_null\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"NonNull\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Type\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (27, 21403);\n                                            krate = \"openssl3\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"ssl_ctx_st\");\n                                               disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []})\n                                      ];\n                                    trait_refs = []}\n                                   ];\n                                 output =\n                                 (Types.RawPtr\n                                    (Types.Adt {\n                                       def_id =\n                                       { Types.index = (27, 21403);\n                                         krate = \"openssl3\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"ssl_ctx_st\");\n                                            disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args = []; trait_refs = []},\n                                     true));\n                                 safety = Types.Safe }\n                               })\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait = None;\n                        ty =\n                        (Types.Arrow\n                           { Types.bound_vars = [];\n                             value =\n                             { Types.abi = Types.Abi {todo = \"Rust\"};\n                               c_variadic = false;\n                               inputs =\n                               [Types.Adt {\n                                  def_id =\n                                  { Types.index = (2, 2222); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ptr\");\n                                       disambiguator = 0 };\n                                      { Types.data =\n                                        (Types.TypeNs \"non_null\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"NonNull\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Type\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (27, 21403);\n                                          krate = \"openssl3\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"ssl_ctx_st\");\n                                             disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args = []; trait_refs = []})\n                                    ];\n                                  trait_refs = []}\n                                 ];\n                               output =\n                               (Types.RawPtr\n                                  (Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []},\n                                   true));\n                               safety = Types.Safe }\n                             })};\n                      hir_id = (Some (\"279\", \"16\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"70\"; line = \"654\" };\n                        lo = { Types.col = \"37\"; line = \"654\" } };\n                      ty =\n                      (Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true))\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"71\"; line = \"654\" };\n                     lo = { Types.col = \"19\"; line = \"654\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (27, 18416); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = Types.ForeignMod;\n                            disambiguator = 3308 };\n                           { Types.data = (Types.ValueNs \"SSL_new\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"36\"; line = \"654\" };\n                       lo = { Types.col = \"19\"; line = \"654\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi =\n                            Types.Abi {todo = \"C { unwind: false }\"};\n                            c_variadic = false;\n                            inputs =\n                            [(Types.RawPtr\n                                (Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []},\n                                 true))\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21394);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Unsafe }\n                          })\n                     };\n                   generic_args = []; trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi =\n                          Types.Abi {todo = \"C { unwind: false }\"};\n                          c_variadic = false;\n                          inputs =\n                          [(Types.RawPtr\n                              (Types.Adt {\n                                 def_id =\n                                 { Types.index = (27, 21403);\n                                   krate = \"openssl3\";\n                                   path =\n                                   [{ Types.data =\n                                      (Types.TypeNs \"ssl_ctx_st\");\n                                      disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []},\n                               true))\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21394);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Unsafe }\n                        })};\n                 hir_id = (Some (\"279\", \"12\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"71\"; line = \"654\" };\n                   lo = { Types.col = \"19\"; line = \"654\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21394); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.PointerCoercion {\n                    cast = (Types.ClosureFnPointer Types.Safe);\n                    source =\n                    { Types.attributes = [];\n                      contents =\n                      Types.Closure {\n                        body =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Block {\n                            expr =\n                            (Some { Types.attributes = [];\n                                    contents =\n                                    Types.Call {\n                                      args =\n                                      [{ Types.attributes = [];\n                                         contents =\n                                         Types.VarRef {\n                                           id =\n                                           { Types.id =\n                                             { Types.local_id = \"24\";\n                                               owner =\n                                               { Types.index = (0, 279);\n                                                 krate = \"sandwich\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs\n                                                       \"implementation\");\n                                                    disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"openssl3\");\n                                                     disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"tunnel\");\n                                                     disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"context\");\n                                                     disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.ValueNs\n                                                        \"ssl_context_new_ssl\");\n                                                     disambiguator = 0 }\n                                                   ]\n                                                 }\n                                               };\n                                             name = \"x\" }};\n                                         hir_id = (Some (\"279\", \"30\"));\n                                         span =\n                                         { Types.filename =\n                                           (Types.Real\n                                              (Types.LocalPath\n                                                 \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                           hi =\n                                           { Types.col = \"32\"; line = \"655\" };\n                                           lo =\n                                           { Types.col = \"31\"; line = \"655\" }\n                                           };\n                                         ty =\n                                         (Types.RawPtr\n                                            (Types.Adt {\n                                               def_id =\n                                               { Types.index = (27, 21394);\n                                                 krate = \"openssl3\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"ssl_st\");\n                                                    disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []},\n                                             true))\n                                         }\n                                        ];\n                                      bounds_impls = [];\n                                      fn_span =\n                                      { Types.filename =\n                                        (Types.Real\n                                           (Types.LocalPath\n                                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                        hi =\n                                        { Types.col = \"33\"; line = \"655\" };\n                                        lo =\n                                        { Types.col = \"12\"; line = \"655\" } };\n                                      from_hir_call = true;\n                                      fun' =\n                                      { Types.attributes = [];\n                                        contents =\n                                        Types.GlobalName {\n                                          id =\n                                          { Types.index = (27, 18497);\n                                            krate = \"openssl3\";\n                                            path =\n                                            [{ Types.data = Types.ForeignMod;\n                                               disambiguator = 3348 };\n                                              { Types.data =\n                                                (Types.ValueNs \"SSL_free\");\n                                                disambiguator = 0 }\n                                              ]\n                                            }};\n                                        hir_id = None;\n                                        span =\n                                        { Types.filename =\n                                          (Types.Real\n                                             (Types.LocalPath\n                                                \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                          hi =\n                                          { Types.col = \"30\"; line = \"655\" };\n                                          lo =\n                                          { Types.col = \"12\"; line = \"655\" }\n                                          };\n                                        ty =\n                                        (Types.Arrow\n                                           { Types.bound_vars = [];\n                                             value =\n                                             { Types.abi =\n                                               Types.Abi {\n                                                 todo = \"C { unwind: false }\"};\n                                               c_variadic = false;\n                                               inputs =\n                                               [(Types.RawPtr\n                                                   (Types.Adt {\n                                                      def_id =\n                                                      { Types.index =\n                                                        (27, 21394);\n                                                        krate = \"openssl3\";\n                                                        path =\n                                                        [{ Types.data =\n                                                           (Types.TypeNs\n                                                              \"ssl_st\");\n                                                           disambiguator = 0\n                                                           }\n                                                          ]\n                                                        };\n                                                      generic_args = [];\n                                                      trait_refs = []},\n                                                    true))\n                                                 ];\n                                               output = (Types.Tuple []);\n                                               safety = Types.Unsafe }\n                                             })\n                                        };\n                                      generic_args = []; trait = None;\n                                      ty =\n                                      (Types.Arrow\n                                         { Types.bound_vars = [];\n                                           value =\n                                           { Types.abi =\n                                             Types.Abi {\n                                               todo = \"C { unwind: false }\"};\n                                             c_variadic = false;\n                                             inputs =\n                                             [(Types.RawPtr\n                                                 (Types.Adt {\n                                                    def_id =\n                                                    { Types.index =\n                                                      (27, 21394);\n                                                      krate = \"openssl3\";\n                                                      path =\n                                                      [{ Types.data =\n                                                         (Types.TypeNs\n                                                            \"ssl_st\");\n                                                         disambiguator = 0 }\n                                                        ]\n                                                      };\n                                                    generic_args = [];\n                                                    trait_refs = []},\n                                                  true))\n                                               ];\n                                             output = (Types.Tuple []);\n                                             safety = Types.Unsafe }\n                                           })};\n                                    hir_id = (Some (\"279\", \"26\"));\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath\n                                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                      hi = { Types.col = \"33\"; line = \"655\" };\n                                      lo = { Types.col = \"12\"; line = \"655\" }\n                                      };\n                                    ty = (Types.Tuple []) });\n                            region_scope =\n                            { Types.data = Types.Node; id = \"32\" };\n                            safety_mode = Types.Safe;\n                            span =\n                            { Types.filename =\n                              (Types.Real\n                                 (Types.LocalPath\n                                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n                              hi = { Types.col = \"9\"; line = \"656\" };\n                              lo = { Types.col = \"77\"; line = \"654\" } };\n                            stmts = []; targeted_by_break = false};\n                          hir_id = (Some (\"279\", \"25\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"9\"; line = \"656\" };\n                            lo = { Types.col = \"77\"; line = \"654\" } };\n                          ty = (Types.Tuple []) };\n                        movability = None;\n                        params =\n                        [{ Types.attributes = []; hir_id = None; pat = None;\n                           self_kind = None;\n                           ty =\n                           (Types.Ref\n                              ({ Types.kind = Types.ReErased },\n                               (Types.Arrow\n                                  { Types.bound_vars = [];\n                                    value =\n                                    { Types.abi = Types.Abi {todo = \"Rust\"};\n                                      c_variadic = false;\n                                      inputs =\n                                      [(Types.RawPtr\n                                          (Types.Adt {\n                                             def_id =\n                                             { Types.index = (27, 21394);\n                                               krate = \"openssl3\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"ssl_st\");\n                                                  disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args = [];\n                                             trait_refs = []},\n                                           true))\n                                        ];\n                                      output = (Types.Tuple []);\n                                      safety = Types.Safe }\n                                    }),\n                               false));\n                           ty_span = None };\n                          { Types.attributes = [];\n                            hir_id =\n                            (Some { Types.local_id = \"23\";\n                                    owner =\n                                    { Types.index = (0, 279);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.ValueNs\n                                             \"ssl_context_new_ssl\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    });\n                            pat =\n                            (Some { Types.attributes = [];\n                                    contents =\n                                    Types.Binding {is_primary = true;\n                                      mode =\n                                      { Types.by_ref = Types.No;\n                                        mutability = false };\n                                      subpattern = None;\n                                      ty =\n                                      (Types.RawPtr\n                                         (Types.Adt {\n                                            def_id =\n                                            { Types.index = (27, 21394);\n                                              krate = \"openssl3\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ssl_st\");\n                                                 disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args = [];\n                                            trait_refs = []},\n                                          true));\n                                      var =\n                                      { Types.id =\n                                        { Types.local_id = \"24\";\n                                          owner =\n                                          { Types.index = (0, 279);\n                                            krate = \"sandwich\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"implementation\");\n                                               disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"openssl3\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"tunnel\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"context\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.ValueNs\n                                                   \"ssl_context_new_ssl\");\n                                                disambiguator = 0 }\n                                              ]\n                                            }\n                                          };\n                                        name = \"x\" }};\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath\n                                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                      hi = { Types.col = \"75\"; line = \"654\" };\n                                      lo = { Types.col = \"74\"; line = \"654\" }\n                                      };\n                                    ty =\n                                    (Types.RawPtr\n                                       (Types.Adt {\n                                          def_id =\n                                          { Types.index = (27, 21394);\n                                            krate = \"openssl3\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"ssl_st\");\n                                               disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []},\n                                        true))\n                                    });\n                            self_kind = None;\n                            ty =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21394);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            ty_span = None }\n                          ];\n                        upvars = []};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"9\"; line = \"656\" };\n                        lo = { Types.col = \"73\"; line = \"654\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [(Types.RawPtr\n                                 (Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21394);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  true))\n                               ];\n                             output = (Types.Tuple []); safety = Types.Safe }\n                           })\n                      }};\n                  hir_id = (Some (\"279\", \"22\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"9\"; line = \"656\" };\n                    lo = { Types.col = \"73\"; line = \"654\" } };\n                  ty =\n                  (Types.Arrow\n                     { Types.bound_vars = [];\n                       value =\n                       { Types.abi = Types.Abi {todo = \"Rust\"};\n                         c_variadic = false;\n                         inputs =\n                         [(Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21394);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true))\n                           ];\n                         output = (Types.Tuple []); safety = Types.Safe }\n                       })\n                  }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"10\"; line = \"656\" };\n                lo = { Types.col = \"8\"; line = \"654\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (0, 622); krate = \"sandwich\";\n                    path =\n                    [{ Types.data = (Types.TypeNs \"support\");\n                       disambiguator = 0 };\n                      { Types.data = (Types.TypeNs \"pimpl\");\n                        disambiguator = 0 };\n                      { Types.data = Types.Impl; disambiguator = 2 };\n                      { Types.data = (Types.ValueNs \"new\"); disambiguator = 0\n                        }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"18\"; line = \"654\" };\n                  lo = { Types.col = \"8\"; line = \"654\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"Rust\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21394);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.Arrow\n                            { Types.bound_vars = [];\n                              value =\n                              { Types.abi = Types.Abi {todo = \"Rust\"};\n                                c_variadic = false;\n                                inputs =\n                                [(Types.RawPtr\n                                    (Types.Adt {\n                                       def_id =\n                                       { Types.index = (27, 21394);\n                                         krate = \"openssl3\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"ssl_st\");\n                                            disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args = []; trait_refs = []},\n                                     true))\n                                  ];\n                                output = (Types.Tuple []);\n                                safety = Types.Safe }\n                              })\n                         ];\n                       output =\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (2, 36174); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"option\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Option\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (0, 608); krate = \"sandwich\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"support\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"pimpl\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"Pimpl\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Lifetime\n                                   { Types.kind = Types.ReErased });\n                                 (Types.Type\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (27, 21394);\n                                        krate = \"openssl3\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"ssl_st\");\n                                           disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs =\n                               [{ Types.args = [];\n                                  impl =\n                                  Types.Builtin {\n                                    trait =\n                                    { Types.def_id =\n                                      { Types.index = (2, 26413);\n                                        krate = \"core\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"marker\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"Sized\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Type\n                                          Types.Adt {\n                                            def_id =\n                                            { Types.index = (27, 21394);\n                                              krate = \"openssl3\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ssl_st\");\n                                                 disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args = [];\n                                            trait_refs = []})\n                                        ]\n                                      }};\n                                  trait =\n                                  { Types.def_id =\n                                    { Types.index = (2, 26413);\n                                      krate = \"core\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"marker\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Sized\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Type\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (27, 21394);\n                                            krate = \"openssl3\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"ssl_st\");\n                                               disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []})\n                                      ]\n                                    }\n                                  }\n                                 ]})\n                           ];\n                         trait_refs =\n                         [{ Types.args = [];\n                            impl =\n                            Types.Builtin {\n                              trait =\n                              { Types.def_id =\n                                { Types.index = (2, 26413); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"marker\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"Sized\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args =\n                                [(Types.Type\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (0, 608);\n                                        krate = \"sandwich\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"support\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"pimpl\");\n                                            disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"Pimpl\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Lifetime\n                                          { Types.kind = Types.ReErased });\n                                        (Types.Type\n                                           Types.Adt {\n                                             def_id =\n                                             { Types.index = (27, 21394);\n                                               krate = \"openssl3\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"ssl_st\");\n                                                  disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args = [];\n                                             trait_refs = []})\n                                        ];\n                                      trait_refs =\n                                      [{ Types.args = [];\n                                         impl =\n                                         Types.Builtin {\n                                           trait =\n                                           { Types.def_id =\n                                             { Types.index = (2, 26413);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"marker\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"Sized\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args =\n                                             [(Types.Type\n                                                 Types.Adt {\n                                                   def_id =\n                                                   { Types.index =\n                                                     (27, 21394);\n                                                     krate = \"openssl3\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"ssl_st\");\n                                                        disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args = [];\n                                                   trait_refs = []})\n                                               ]\n                                             }};\n                                         trait =\n                                         { Types.def_id =\n                                           { Types.index = (2, 26413);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"marker\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"Sized\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args =\n                                           [(Types.Type\n                                               Types.Adt {\n                                                 def_id =\n                                                 { Types.index = (27, 21394);\n                                                   krate = \"openssl3\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs \"ssl_st\");\n                                                      disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 generic_args = [];\n                                                 trait_refs = []})\n                                             ]\n                                           }\n                                         }\n                                        ]})\n                                  ]\n                                }};\n                            trait =\n                            { Types.def_id =\n                              { Types.index = (2, 26413); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"marker\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"Sized\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 608);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"support\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"pimpl\");\n                                          disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Pimpl\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Lifetime\n                                        { Types.kind = Types.ReErased });\n                                      (Types.Type\n                                         Types.Adt {\n                                           def_id =\n                                           { Types.index = (27, 21394);\n                                             krate = \"openssl3\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"ssl_st\");\n                                                disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args = []; trait_refs = []})\n                                      ];\n                                    trait_refs =\n                                    [{ Types.args = [];\n                                       impl =\n                                       Types.Builtin {\n                                         trait =\n                                         { Types.def_id =\n                                           { Types.index = (2, 26413);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"marker\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"Sized\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args =\n                                           [(Types.Type\n                                               Types.Adt {\n                                                 def_id =\n                                                 { Types.index = (27, 21394);\n                                                   krate = \"openssl3\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs \"ssl_st\");\n                                                      disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 generic_args = [];\n                                                 trait_refs = []})\n                                             ]\n                                           }};\n                                       trait =\n                                       { Types.def_id =\n                                         { Types.index = (2, 26413);\n                                           krate = \"core\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"marker\");\n                                              disambiguator = 0 };\n                                             { Types.data =\n                                               (Types.TypeNs \"Sized\");\n                                               disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args =\n                                         [(Types.Type\n                                             Types.Adt {\n                                               def_id =\n                                               { Types.index = (27, 21394);\n                                                 krate = \"openssl3\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"ssl_st\");\n                                                    disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []})\n                                           ]\n                                         }\n                                       }\n                                      ]})\n                                ]\n                              }\n                            }\n                           ]};\n                       safety = Types.Unsafe }\n                     })\n                };\n              generic_args =\n              [(Types.Lifetime { Types.kind = Types.ReErased });\n                (Types.Type\n                   Types.Adt {\n                     def_id =\n                     { Types.index = (27, 21394); krate = \"openssl3\";\n                       path =\n                       [{ Types.data = (Types.TypeNs \"ssl_st\");\n                          disambiguator = 0 }\n                         ]\n                       };\n                     generic_args = []; trait_refs = []})\n                ];\n              trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"Rust\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21394); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.Arrow\n                          { Types.bound_vars = [];\n                            value =\n                            { Types.abi = Types.Abi {todo = \"Rust\"};\n                              c_variadic = false;\n                              inputs =\n                              [(Types.RawPtr\n                                  (Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21394);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []},\n                                   true))\n                                ];\n                              output = (Types.Tuple []); safety = Types.Safe\n                              }\n                            })\n                       ];\n                     output =\n                     Types.Adt {\n                       def_id =\n                       { Types.index = (2, 36174); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"option\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"Option\");\n                             disambiguator = 0 }\n                           ]\n                         };\n                       generic_args =\n                       [(Types.Type\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (0, 608); krate = \"sandwich\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"support\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"pimpl\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"Pimpl\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Lifetime { Types.kind = Types.ReErased });\n                               (Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21394);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs =\n                             [{ Types.args = [];\n                                impl =\n                                Types.Builtin {\n                                  trait =\n                                  { Types.def_id =\n                                    { Types.index = (2, 26413);\n                                      krate = \"core\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"marker\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Sized\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Type\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (27, 21394);\n                                            krate = \"openssl3\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"ssl_st\");\n                                               disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []})\n                                      ]\n                                    }};\n                                trait =\n                                { Types.def_id =\n                                  { Types.index = (2, 26413); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"marker\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Sized\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Type\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (27, 21394);\n                                          krate = \"openssl3\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"ssl_st\");\n                                             disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args = []; trait_refs = []})\n                                    ]\n                                  }\n                                }\n                               ]})\n                         ];\n                       trait_refs =\n                       [{ Types.args = [];\n                          impl =\n                          Types.Builtin {\n                            trait =\n                            { Types.def_id =\n                              { Types.index = (2, 26413); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"marker\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"Sized\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 608);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"support\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"pimpl\");\n                                          disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Pimpl\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Lifetime\n                                        { Types.kind = Types.ReErased });\n                                      (Types.Type\n                                         Types.Adt {\n                                           def_id =\n                                           { Types.index = (27, 21394);\n                                             krate = \"openssl3\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"ssl_st\");\n                                                disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args = []; trait_refs = []})\n                                      ];\n                                    trait_refs =\n                                    [{ Types.args = [];\n                                       impl =\n                                       Types.Builtin {\n                                         trait =\n                                         { Types.def_id =\n                                           { Types.index = (2, 26413);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"marker\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"Sized\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args =\n                                           [(Types.Type\n                                               Types.Adt {\n                                                 def_id =\n                                                 { Types.index = (27, 21394);\n                                                   krate = \"openssl3\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs \"ssl_st\");\n                                                      disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 generic_args = [];\n                                                 trait_refs = []})\n                                             ]\n                                           }};\n                                       trait =\n                                       { Types.def_id =\n                                         { Types.index = (2, 26413);\n                                           krate = \"core\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"marker\");\n                                              disambiguator = 0 };\n                                             { Types.data =\n                                               (Types.TypeNs \"Sized\");\n                                               disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args =\n                                         [(Types.Type\n                                             Types.Adt {\n                                               def_id =\n                                               { Types.index = (27, 21394);\n                                                 krate = \"openssl3\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"ssl_st\");\n                                                    disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []})\n                                           ]\n                                         }\n                                       }\n                                      ]})\n                                ]\n                              }};\n                          trait =\n                          { Types.def_id =\n                            { Types.index = (2, 26413); krate = \"core\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"marker\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"Sized\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args =\n                            [(Types.Type\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (0, 608);\n                                    krate = \"sandwich\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"support\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"pimpl\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Pimpl\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Lifetime\n                                      { Types.kind = Types.ReErased });\n                                    (Types.Type\n                                       Types.Adt {\n                                         def_id =\n                                         { Types.index = (27, 21394);\n                                           krate = \"openssl3\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"ssl_st\");\n                                              disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args = []; trait_refs = []})\n                                    ];\n                                  trait_refs =\n                                  [{ Types.args = [];\n                                     impl =\n                                     Types.Builtin {\n                                       trait =\n                                       { Types.def_id =\n                                         { Types.index = (2, 26413);\n                                           krate = \"core\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"marker\");\n                                              disambiguator = 0 };\n                                             { Types.data =\n                                               (Types.TypeNs \"Sized\");\n                                               disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args =\n                                         [(Types.Type\n                                             Types.Adt {\n                                               def_id =\n                                               { Types.index = (27, 21394);\n                                                 krate = \"openssl3\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"ssl_st\");\n                                                    disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []})\n                                           ]\n                                         }};\n                                     trait =\n                                     { Types.def_id =\n                                       { Types.index = (2, 26413);\n                                         krate = \"core\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"marker\");\n                                            disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"Sized\");\n                                             disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args =\n                                       [(Types.Type\n                                           Types.Adt {\n                                             def_id =\n                                             { Types.index = (27, 21394);\n                                               krate = \"openssl3\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"ssl_st\");\n                                                  disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args = [];\n                                             trait_refs = []})\n                                         ]\n                                       }\n                                     }\n                                    ]})\n                              ]\n                            }\n                          }\n                         ]};\n                     safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"279\", \"6\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"10\"; line = \"656\" };\n              lo = { Types.col = \"8\"; line = \"654\" } };\n            ty =\n            Types.Adt {\n              def_id =\n              { Types.index = (2, 36174); krate = \"core\";\n                path =\n                [{ Types.data = (Types.TypeNs \"option\"); disambiguator = 0 };\n                  { Types.data = (Types.TypeNs \"Option\"); disambiguator = 0 }\n                  ]\n                };\n              generic_args =\n              [(Types.Type\n                  Types.Adt {\n                    def_id =\n                    { Types.index = (0, 608); krate = \"sandwich\";\n                      path =\n                      [{ Types.data = (Types.TypeNs \"support\");\n                         disambiguator = 0 };\n                        { Types.data = (Types.TypeNs \"pimpl\");\n                          disambiguator = 0 };\n                        { Types.data = (Types.TypeNs \"Pimpl\");\n                          disambiguator = 0 }\n                        ]\n                      };\n                    generic_args =\n                    [(Types.Lifetime { Types.kind = Types.ReErased });\n                      (Types.Type\n                         Types.Adt {\n                           def_id =\n                           { Types.index = (27, 21394); krate = \"openssl3\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                disambiguator = 0 }\n                               ]\n                             };\n                           generic_args = []; trait_refs = []})\n                      ];\n                    trait_refs =\n                    [{ Types.args = [];\n                       impl =\n                       Types.Builtin {\n                         trait =\n                         { Types.def_id =\n                           { Types.index = (2, 26413); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"marker\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"Sized\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args =\n                           [(Types.Type\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (27, 21394);\n                                   krate = \"openssl3\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                      disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []})\n                             ]\n                           }};\n                       trait =\n                       { Types.def_id =\n                         { Types.index = (2, 26413); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"marker\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Sized\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (27, 21394);\n                                 krate = \"openssl3\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                    disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []})\n                           ]\n                         }\n                       }\n                      ]})\n                ];\n              trait_refs =\n              [{ Types.args = [];\n                 impl =\n                 Types.Builtin {\n                   trait =\n                   { Types.def_id =\n                     { Types.index = (2, 26413); krate = \"core\";\n                       path =\n                       [{ Types.data = (Types.TypeNs \"marker\");\n                          disambiguator = 0 };\n                         { Types.data = (Types.TypeNs \"Sized\");\n                           disambiguator = 0 }\n                         ]\n                       };\n                     generic_args =\n                     [(Types.Type\n                         Types.Adt {\n                           def_id =\n                           { Types.index = (0, 608); krate = \"sandwich\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"support\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"pimpl\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"Pimpl\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args =\n                           [(Types.Lifetime { Types.kind = Types.ReErased });\n                             (Types.Type\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21394);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []})\n                             ];\n                           trait_refs =\n                           [{ Types.args = [];\n                              impl =\n                              Types.Builtin {\n                                trait =\n                                { Types.def_id =\n                                  { Types.index = (2, 26413); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"marker\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Sized\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Type\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (27, 21394);\n                                          krate = \"openssl3\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"ssl_st\");\n                                             disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args = []; trait_refs = []})\n                                    ]\n                                  }};\n                              trait =\n                              { Types.def_id =\n                                { Types.index = (2, 26413); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"marker\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"Sized\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args =\n                                [(Types.Type\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (27, 21394);\n                                        krate = \"openssl3\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"ssl_st\");\n                                           disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args = []; trait_refs = []})\n                                  ]\n                                }\n                              }\n                             ]})\n                       ]\n                     }};\n                 trait =\n                 { Types.def_id =\n                   { Types.index = (2, 26413); krate = \"core\";\n                     path =\n                     [{ Types.data = (Types.TypeNs \"marker\");\n                        disambiguator = 0 };\n                       { Types.data = (Types.TypeNs \"Sized\");\n                         disambiguator = 0 }\n                       ]\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (0, 608); krate = \"sandwich\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"support\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"pimpl\");\n                               disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Pimpl\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Lifetime { Types.kind = Types.ReErased });\n                           (Types.Type\n                              Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21394);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []})\n                           ];\n                         trait_refs =\n                         [{ Types.args = [];\n                            impl =\n                            Types.Builtin {\n                              trait =\n                              { Types.def_id =\n                                { Types.index = (2, 26413); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"marker\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"Sized\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args =\n                                [(Types.Type\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (27, 21394);\n                                        krate = \"openssl3\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"ssl_st\");\n                                           disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args = []; trait_refs = []})\n                                  ]\n                                }};\n                            trait =\n                            { Types.def_id =\n                              { Types.index = (2, 26413); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"marker\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"Sized\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21394);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []})\n                                ]\n                              }\n                            }\n                           ]})\n                     ]\n                   }\n                 }\n                ]}\n            });\n    region_scope = { Types.data = Types.Node; id = \"34\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"5\"; line = \"657\" };\n      lo = { Types.col = \"4\"; line = \"653\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"279\", \"5\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"5\"; line = \"657\" };\n    lo = { Types.col = \"4\"; line = \"653\" } };\n  ty =\n  Types.Adt {\n    def_id =\n    { Types.index = (2, 36174); krate = \"core\";\n      path =\n      [{ Types.data = (Types.TypeNs \"option\"); disambiguator = 0 };\n        { Types.data = (Types.TypeNs \"Option\"); disambiguator = 0 }]\n      };\n    generic_args =\n    [(Types.Type\n        Types.Adt {\n          def_id =\n          { Types.index = (0, 608); krate = \"sandwich\";\n            path =\n            [{ Types.data = (Types.TypeNs \"support\"); disambiguator = 0 };\n              { Types.data = (Types.TypeNs \"pimpl\"); disambiguator = 0 };\n              { Types.data = (Types.TypeNs \"Pimpl\"); disambiguator = 0 }]\n            };\n          generic_args =\n          [(Types.Lifetime { Types.kind = Types.ReErased });\n            (Types.Type\n               Types.Adt {\n                 def_id =\n                 { Types.index = (27, 21394); krate = \"openssl3\";\n                   path =\n                   [{ Types.data = (Types.TypeNs \"ssl_st\"); disambiguator = 0\n                      }\n                     ]\n                   };\n                 generic_args = []; trait_refs = []})\n            ];\n          trait_refs =\n          [{ Types.args = [];\n             impl =\n             Types.Builtin {\n               trait =\n               { Types.def_id =\n                 { Types.index = (2, 26413); krate = \"core\";\n                   path =\n                   [{ Types.data = (Types.TypeNs \"marker\"); disambiguator = 0\n                      };\n                     { Types.data = (Types.TypeNs \"Sized\"); disambiguator = 0\n                       }\n                     ]\n                   };\n                 generic_args =\n                 [(Types.Type\n                     Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21394); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []})\n                   ]\n                 }};\n             trait =\n             { Types.def_id =\n               { Types.index = (2, 26413); krate = \"core\";\n                 path =\n                 [{ Types.data = (Types.TypeNs \"marker\"); disambiguator = 0 };\n                   { Types.data = (Types.TypeNs \"Sized\"); disambiguator = 0 }\n                   ]\n                 };\n               generic_args =\n               [(Types.Type\n                   Types.Adt {\n                     def_id =\n                     { Types.index = (27, 21394); krate = \"openssl3\";\n                       path =\n                       [{ Types.data = (Types.TypeNs \"ssl_st\");\n                          disambiguator = 0 }\n                         ]\n                       };\n                     generic_args = []; trait_refs = []})\n                 ]\n               }\n             }\n            ]})\n      ];\n    trait_refs =\n    [{ Types.args = [];\n       impl =\n       Types.Builtin {\n         trait =\n         { Types.def_id =\n           { Types.index = (2, 26413); krate = \"core\";\n             path =\n             [{ Types.data = (Types.TypeNs \"marker\"); disambiguator = 0 };\n               { Types.data = (Types.TypeNs \"Sized\"); disambiguator = 0 }]\n             };\n           generic_args =\n           [(Types.Type\n               Types.Adt {\n                 def_id =\n                 { Types.index = (0, 608); krate = \"sandwich\";\n                   path =\n                   [{ Types.data = (Types.TypeNs \"support\");\n                      disambiguator = 0 };\n                     { Types.data = (Types.TypeNs \"pimpl\"); disambiguator = 0\n                       };\n                     { Types.data = (Types.TypeNs \"Pimpl\"); disambiguator = 0\n                       }\n                     ]\n                   };\n                 generic_args =\n                 [(Types.Lifetime { Types.kind = Types.ReErased });\n                   (Types.Type\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (27, 21394); krate = \"openssl3\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ssl_st\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        generic_args = []; trait_refs = []})\n                   ];\n                 trait_refs =\n                 [{ Types.args = [];\n                    impl =\n                    Types.Builtin {\n                      trait =\n                      { Types.def_id =\n                        { Types.index = (2, 26413); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"marker\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Sized\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21394);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ]\n                        }};\n                    trait =\n                    { Types.def_id =\n                      { Types.index = (2, 26413); krate = \"core\";\n                        path =\n                        [{ Types.data = (Types.TypeNs \"marker\");\n                           disambiguator = 0 };\n                          { Types.data = (Types.TypeNs \"Sized\");\n                            disambiguator = 0 }\n                          ]\n                        };\n                      generic_args =\n                      [(Types.Type\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21394); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []})\n                        ]\n                      }\n                    }\n                   ]})\n             ]\n           }};\n       trait =\n       { Types.def_id =\n         { Types.index = (2, 26413); krate = \"core\";\n           path =\n           [{ Types.data = (Types.TypeNs \"marker\"); disambiguator = 0 };\n             { Types.data = (Types.TypeNs \"Sized\"); disambiguator = 0 }]\n           };\n         generic_args =\n         [(Types.Type\n             Types.Adt {\n               def_id =\n               { Types.index = (0, 608); krate = \"sandwich\";\n                 path =\n                 [{ Types.data = (Types.TypeNs \"support\"); disambiguator = 0\n                    };\n                   { Types.data = (Types.TypeNs \"pimpl\"); disambiguator = 0 };\n                   { Types.data = (Types.TypeNs \"Pimpl\"); disambiguator = 0 }\n                   ]\n                 };\n               generic_args =\n               [(Types.Lifetime { Types.kind = Types.ReErased });\n                 (Types.Type\n                    Types.Adt {\n                      def_id =\n                      { Types.index = (27, 21394); krate = \"openssl3\";\n                        path =\n                        [{ Types.data = (Types.TypeNs \"ssl_st\");\n                           disambiguator = 0 }\n                          ]\n                        };\n                      generic_args = []; trait_refs = []})\n                 ];\n               trait_refs =\n               [{ Types.args = [];\n                  impl =\n                  Types.Builtin {\n                    trait =\n                    { Types.def_id =\n                      { Types.index = (2, 26413); krate = \"core\";\n                        path =\n                        [{ Types.data = (Types.TypeNs \"marker\");\n                           disambiguator = 0 };\n                          { Types.data = (Types.TypeNs \"Sized\");\n                            disambiguator = 0 }\n                          ]\n                        };\n                      generic_args =\n                      [(Types.Type\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21394); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []})\n                        ]\n                      }};\n                  trait =\n                  { Types.def_id =\n                    { Types.index = (2, 26413); krate = \"core\";\n                      path =\n                      [{ Types.data = (Types.TypeNs \"marker\");\n                         disambiguator = 0 };\n                        { Types.data = (Types.TypeNs \"Sized\");\n                          disambiguator = 0 }\n                        ]\n                      };\n                    generic_args =\n                    [(Types.Type\n                        Types.Adt {\n                          def_id =\n                          { Types.index = (27, 21394); krate = \"openssl3\";\n                            path =\n                            [{ Types.data = (Types.TypeNs \"ssl_st\");\n                               disambiguator = 0 }\n                              ]\n                            };\n                          generic_args = []; trait_refs = []})\n                      ]\n                    }\n                  }\n                 ]})\n           ]\n         }\n       }\n      ]}\n  }"

      <:
      Core.Option.t_Option (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_ssl_st))
    (fun temp_0_ ->
        let _:Prims.unit = temp_0_ in
        let res:Alloc.String.t_String =
          Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
                (sz 1)
                (let list = ["failed to instantiate a new SSL: "] in
                  FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                  Rust_primitives.Hax.array_of_list 1 list)
                (let list =
                    [
                      Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                        (Sandwich.Implementation.Openssl3.errstr () <: Alloc.String.t_String)
                      <:
                      Core.Fmt.Rt.t_Argument
                    ]
                  in
                  FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                  Rust_primitives.Hax.array_of_list 1 list)
              <:
              Core.Fmt.t_Arguments)
        in
        Core.Convert.f_into #(Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String)
          #Sandwich.Error.t_Error
          #FStar.Tactics.Typeclasses.solve
          ((Sandwich_proto.Errors.SystemError_SYSTEMERROR_MEMORY
              <:
              Sandwich_proto.Errors.t_SystemError),
            res
            <:
            (Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String)))

let impl__SslContext__set_cipher_list
      (#v_S #impl_995885649_: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i2: Core.Convert.t_AsRef v_S string)
      (#[FStar.Tactics.Typeclasses.tcresolve ()]
          i3:
          Core.Iter.Traits.Collect.t_IntoIterator impl_995885649_)
      (self: t_SslContext)
      (ciphers: impl_995885649_)
     =
  match
    Sandwich.Tunnel.Tls.Support.build_ciphersuites_list #string
      #(Core.Iter.Adapters.Filter_map.t_FilterMap i3.f_IntoIter (v_S -> Core.Option.t_Option string)
      )
      (Core.Iter.Traits.Iterator.f_filter_map #i3.f_IntoIter
          #FStar.Tactics.Typeclasses.solve
          #string
          (Core.Iter.Traits.Collect.f_into_iter #impl_995885649_
              #FStar.Tactics.Typeclasses.solve
              ciphers
            <:
            i3.f_IntoIter)
          Sandwich.Implementation.Openssl3.cipher_name
        <:
        Core.Iter.Adapters.Filter_map.t_FilterMap i3.f_IntoIter (v_S -> Core.Option.t_Option string)
      )
      "!+@-"
  with
  | Core.Result.Result_Ok ciphersuites ->
    (match
        Core.Result.impl__map_err #Alloc.Ffi.C_str.t_CString
          #Alloc.Ffi.C_str.t_NulError
          #(Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String)
          (Alloc.Ffi.C_str.impl__CString__new #Alloc.String.t_String ciphersuites
            <:
            Core.Result.t_Result Alloc.Ffi.C_str.t_CString Alloc.Ffi.C_str.t_NulError)
          (fun e ->
              let e:Alloc.Ffi.C_str.t_NulError = e in
              let res:Alloc.String.t_String =
                Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
                      (sz 1)
                      (let list = ["failed to build a `CString`: "] in
                        FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                        Rust_primitives.Hax.array_of_list 1 list)
                      (let list =
                          [
                            Core.Fmt.Rt.impl_1__new_display #Alloc.Ffi.C_str.t_NulError e
                            <:
                            Core.Fmt.Rt.t_Argument
                          ]
                        in
                        FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                        Rust_primitives.Hax.array_of_list 1 list)
                    <:
                    Core.Fmt.t_Arguments)
              in
              (Sandwich_proto.Errors.SystemError_SYSTEMERROR_MEMORY
                <:
                Sandwich_proto.Errors.t_SystemError),
              res
              <:
              (Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String))
      with
      | Core.Result.Result_Ok cstr ->
        if
          (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
              "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 250);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs \"set_cipher_list\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"58\"; line = \"250\" };\n                                lo = { Types.col = \"54\"; line = \"250\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"250\", \"123\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"58\"; line = \"250\" };\n                            lo = { Types.col = \"54\"; line = \"250\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"250\", \"122\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"60\"; line = \"250\" };\n                        lo = { Types.col = \"54\"; line = \"250\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"69\"; line = \"250\" };\n                     lo = { Types.col = \"61\"; line = \"250\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"67\"; line = \"250\" };\n                       lo = { Types.col = \"61\"; line = \"250\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"250\", \"120\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"69\"; line = \"250\" };\n                   lo = { Types.col = \"54\"; line = \"250\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {\n                    args =\n                    [{ Types.attributes = [];\n                       contents =\n                       Types.Borrow {\n                         arg =\n                         { Types.attributes = [];\n                           contents =\n                           Types.Deref {\n                             arg =\n                             { Types.attributes = [];\n                               contents =\n                               Types.Call {\n                                 args =\n                                 [{ Types.attributes = [];\n                                    contents =\n                                    Types.Borrow {\n                                      arg =\n                                      { Types.attributes = [];\n                                        contents =\n                                        Types.VarRef {\n                                          id =\n                                          { Types.id =\n                                            { Types.local_id = \"112\";\n                                              owner =\n                                              { Types.index = (0, 250);\n                                                krate = \"sandwich\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs\n                                                      \"implementation\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"openssl3\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"tunnel\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"context\");\n                                                    disambiguator = 0 };\n                                                  { Types.data = Types.Impl;\n                                                    disambiguator = 4 };\n                                                  { Types.data =\n                                                    (Types.ValueNs\n                                                       \"set_cipher_list\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                }\n                                              };\n                                            name = \"cstr\" }};\n                                        hir_id = None;\n                                        span =\n                                        { Types.filename =\n                                          (Types.Real\n                                             (Types.LocalPath\n                                                \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                          hi =\n                                          { Types.col = \"75\"; line = \"250\" };\n                                          lo =\n                                          { Types.col = \"71\"; line = \"250\" }\n                                          };\n                                        ty =\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (5, 7722);\n                                            krate = \"alloc\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"ffi\");\n                                               disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"c_str\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"CString\");\n                                                disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []}\n                                        };\n                                      borrow_kind = Types.Shared};\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath\n                                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                      hi = { Types.col = \"75\"; line = \"250\" };\n                                      lo = { Types.col = \"71\"; line = \"250\" }\n                                      };\n                                    ty =\n                                    (Types.Ref\n                                       ({ Types.kind = Types.ReErased },\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (5, 7722);\n                                            krate = \"alloc\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"ffi\");\n                                               disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"c_str\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"CString\");\n                                                disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []},\n                                        false))\n                                    }\n                                   ];\n                                 bounds_impls = [];\n                                 fn_span =\n                                 { Types.filename =\n                                   (Types.Real\n                                      (Types.LocalPath\n                                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                   hi = { Types.col = \"84\"; line = \"250\" };\n                                   lo = { Types.col = \"71\"; line = \"250\" } };\n                                 from_hir_call = false;\n                                 fun' =\n                                 { Types.attributes = [];\n                                   contents =\n                                   Types.GlobalName {\n                                     id =\n                                     { Types.index = (2, 3455);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data = (Types.TypeNs \"ops\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"deref\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"Deref\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.ValueNs \"deref\");\n                                           disambiguator = 0 }\n                                         ]\n                                       }};\n                                   hir_id = None;\n                                   span =\n                                   { Types.filename =\n                                     (Types.Real\n                                        (Types.LocalPath\n                                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                     hi = { Types.col = \"84\"; line = \"250\" };\n                                     lo = { Types.col = \"71\"; line = \"250\" }\n                                     };\n                                   ty =\n                                   (Types.Arrow\n                                      { Types.bound_vars =\n                                        [(Types.Region\n                                            (Types.BrNamed\n                                               ({ Types.index = (2, 55519);\n                                                  krate = \"core\";\n                                                  path =\n                                                  [{ Types.data =\n                                                     (Types.TypeNs \"ops\");\n                                                     disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.TypeNs \"deref\");\n                                                      disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.TypeNs \"Deref\");\n                                                      disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.ValueNs \"deref\");\n                                                      disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.LifetimeNs \"'_\");\n                                                      disambiguator = 0 }\n                                                    ]\n                                                  },\n                                                \"'_\")))\n                                          ];\n                                        value =\n                                        { Types.abi =\n                                          Types.Abi {todo = \"Rust\"};\n                                          c_variadic = false;\n                                          inputs =\n                                          [(Types.Ref\n                                              ({ Types.kind =\n                                                 (Types.ReBound\n                                                    (\"0\",\n                                                     { Types.kind =\n                                                       (Types.BrNamed\n                                                          ({ Types.index =\n                                                             (2, 55519);\n                                                             krate = \"core\";\n                                                             path =\n                                                             [{ Types.data =\n                                                                (Types.TypeNs\n                                                                   \"ops\");\n                                                                disambiguator =\n                                                                0 };\n                                                               { Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"deref\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                               { Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"Deref\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                               { Types.data =\n                                                                 (Types.ValueNs\n                                                                    \"deref\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                               { Types.data =\n                                                                 (Types.LifetimeNs\n                                                                    \"'_\");\n                                                                 disambiguator =\n                                                                 0 }\n                                                               ]\n                                                             },\n                                                           \"'_\"));\n                                                       var = \"0\" }))\n                                                 },\n                                               Types.Adt {\n                                                 def_id =\n                                                 { Types.index = (5, 7722);\n                                                   krate = \"alloc\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs \"ffi\");\n                                                      disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs \"c_str\");\n                                                       disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs\n                                                          \"CString\");\n                                                       disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 generic_args = [];\n                                                 trait_refs = []},\n                                               false))\n                                            ];\n                                          output =\n                                          (Types.Ref\n                                             ({ Types.kind =\n                                                (Types.ReBound\n                                                   (\"0\",\n                                                    { Types.kind =\n                                                      (Types.BrNamed\n                                                         ({ Types.index =\n                                                            (2, 55519);\n                                                            krate = \"core\";\n                                                            path =\n                                                            [{ Types.data =\n                                                               (Types.TypeNs\n                                                                  \"ops\");\n                                                               disambiguator =\n                                                               0 };\n                                                              { Types.data =\n                                                                (Types.TypeNs\n                                                                   \"deref\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                (Types.TypeNs\n                                                                   \"Deref\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                (Types.ValueNs\n                                                                   \"deref\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                (Types.LifetimeNs\n                                                                   \"'_\");\n                                                                disambiguator =\n                                                                0 }\n                                                              ]\n                                                            },\n                                                          \"'_\"));\n                                                      var = \"0\" }))\n                                                },\n                                              (Types.Alias\n                                                 { Types.args =\n                                                   [(Types.Type\n                                                       Types.Adt {\n                                                         def_id =\n                                                         { Types.index =\n                                                           (5, 7722);\n                                                           krate = \"alloc\";\n                                                           path =\n                                                           [{ Types.data =\n                                                              (Types.TypeNs\n                                                                 \"ffi\");\n                                                              disambiguator =\n                                                              0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"c_str\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"CString\");\n                                                               disambiguator =\n                                                               0 }\n                                                             ]\n                                                           };\n                                                         generic_args = [];\n                                                         trait_refs = []})\n                                                     ];\n                                                   def_id =\n                                                   { Types.index = (2, 3454);\n                                                     krate = \"core\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs \"ops\");\n                                                        disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"deref\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"Deref\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"Target\");\n                                                         disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   kind =\n                                                   Types.Projection {\n                                                     assoc_item =\n                                                     { Types.container =\n                                                       Types.TraitContainer;\n                                                       def_id =\n                                                       { Types.index =\n                                                         (2, 3454);\n                                                         krate = \"core\";\n                                                         path =\n                                                         [{ Types.data =\n                                                            (Types.TypeNs\n                                                               \"ops\");\n                                                            disambiguator = 0\n                                                            };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"deref\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"Deref\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"Target\");\n                                                             disambiguator =\n                                                             0 }\n                                                           ]\n                                                         };\n                                                       fn_has_self_parameter =\n                                                       false;\n                                                       kind = Types.Type;\n                                                       name = \"Target\";\n                                                       opt_rpitit_info = None;\n                                                       trait_item_def_id =\n                                                       None };\n                                                     impl_expr =\n                                                     { Types.args = [];\n                                                       impl =\n                                                       Types.Concrete {\n                                                         generics = [];\n                                                         id =\n                                                         { Types.index =\n                                                           (5, 4829);\n                                                           krate = \"alloc\";\n                                                           path =\n                                                           [{ Types.data =\n                                                              (Types.TypeNs\n                                                                 \"ffi\");\n                                                              disambiguator =\n                                                              0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"c_str\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               Types.Impl;\n                                                               disambiguator =\n                                                               3 }\n                                                             ]\n                                                           }};\n                                                       trait =\n                                                       { Types.def_id =\n                                                         { Types.index =\n                                                           (2, 3453);\n                                                           krate = \"core\";\n                                                           path =\n                                                           [{ Types.data =\n                                                              (Types.TypeNs\n                                                                 \"ops\");\n                                                              disambiguator =\n                                                              0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"deref\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"Deref\");\n                                                               disambiguator =\n                                                               0 }\n                                                             ]\n                                                           };\n                                                         generic_args =\n                                                         [(Types.Type\n                                                             Types.Adt {\n                                                               def_id =\n                                                               { Types.index =\n                                                                 (5, 7722);\n                                                                 krate =\n                                                                 \"alloc\";\n                                                                 path =\n                                                                 [{ Types.data =\n                                                                    (\n                                                                    Types.TypeNs\n                                                                    \"ffi\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                   { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"c_str\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                   { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"CString\");\n                                                                    disambiguator =\n                                                                    0 }\n                                                                   ]\n                                                                 };\n                                                               generic_args =\n                                                               [];\n                                                               trait_refs =\n                                                               []})\n                                                           ]\n                                                         }\n                                                       }}\n                                                   }),\n                                              false));\n                                          safety = Types.Safe }\n                                        })\n                                   };\n                                 generic_args = [];\n                                 trait =\n                                 (Some ({ Types.args = [];\n                                          impl =\n                                          Types.Concrete {generics = [];\n                                            id =\n                                            { Types.index = (5, 4829);\n                                              krate = \"alloc\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ffi\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"c_str\");\n                                                  disambiguator = 0 };\n                                                { Types.data = Types.Impl;\n                                                  disambiguator = 3 }\n                                                ]\n                                              }};\n                                          trait =\n                                          { Types.def_id =\n                                            { Types.index = (2, 3453);\n                                              krate = \"core\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ops\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"deref\");\n                                                  disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"Deref\");\n                                                  disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args =\n                                            [(Types.Type\n                                                Types.Adt {\n                                                  def_id =\n                                                  { Types.index = (5, 7722);\n                                                    krate = \"alloc\";\n                                                    path =\n                                                    [{ Types.data =\n                                                       (Types.TypeNs \"ffi\");\n                                                       disambiguator = 0 };\n                                                      { Types.data =\n                                                        (Types.TypeNs \"c_str\");\n                                                        disambiguator = 0 };\n                                                      { Types.data =\n                                                        (Types.TypeNs\n                                                           \"CString\");\n                                                        disambiguator = 0 }\n                                                      ]\n                                                    };\n                                                  generic_args = [];\n                                                  trait_refs = []})\n                                              ]\n                                            }\n                                          },\n                                        [(Types.Type\n                                            Types.Adt {\n                                              def_id =\n                                              { Types.index = (5, 7722);\n                                                krate = \"alloc\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"ffi\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"c_str\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"CString\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args = [];\n                                              trait_refs = []})\n                                          ]));\n                                 ty =\n                                 (Types.Arrow\n                                    { Types.bound_vars =\n                                      [(Types.Region\n                                          (Types.BrNamed\n                                             ({ Types.index = (2, 55519);\n                                                krate = \"core\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"ops\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"deref\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"Deref\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.ValueNs \"deref\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.LifetimeNs \"'_\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                },\n                                              \"'_\")))\n                                        ];\n                                      value =\n                                      { Types.abi = Types.Abi {todo = \"Rust\"};\n                                        c_variadic = false;\n                                        inputs =\n                                        [(Types.Ref\n                                            ({ Types.kind =\n                                               (Types.ReBound\n                                                  (\"0\",\n                                                   { Types.kind =\n                                                     (Types.BrNamed\n                                                        ({ Types.index =\n                                                           (2, 55519);\n                                                           krate = \"core\";\n                                                           path =\n                                                           [{ Types.data =\n                                                              (Types.TypeNs\n                                                                 \"ops\");\n                                                              disambiguator =\n                                                              0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"deref\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"Deref\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               (Types.ValueNs\n                                                                  \"deref\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               (Types.LifetimeNs\n                                                                  \"'_\");\n                                                               disambiguator =\n                                                               0 }\n                                                             ]\n                                                           },\n                                                         \"'_\"));\n                                                     var = \"0\" }))\n                                               },\n                                             Types.Adt {\n                                               def_id =\n                                               { Types.index = (5, 7722);\n                                                 krate = \"alloc\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"ffi\");\n                                                    disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"c_str\");\n                                                     disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"CString\");\n                                                     disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []},\n                                             false))\n                                          ];\n                                        output =\n                                        (Types.Ref\n                                           ({ Types.kind =\n                                              (Types.ReBound\n                                                 (\"0\",\n                                                  { Types.kind =\n                                                    (Types.BrNamed\n                                                       ({ Types.index =\n                                                          (2, 55519);\n                                                          krate = \"core\";\n                                                          path =\n                                                          [{ Types.data =\n                                                             (Types.TypeNs\n                                                                \"ops\");\n                                                             disambiguator =\n                                                             0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"deref\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"Deref\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.ValueNs\n                                                                 \"deref\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.LifetimeNs\n                                                                 \"'_\");\n                                                              disambiguator =\n                                                              0 }\n                                                            ]\n                                                          },\n                                                        \"'_\"));\n                                                    var = \"0\" }))\n                                              },\n                                            (Types.Alias\n                                               { Types.args =\n                                                 [(Types.Type\n                                                     Types.Adt {\n                                                       def_id =\n                                                       { Types.index =\n                                                         (5, 7722);\n                                                         krate = \"alloc\";\n                                                         path =\n                                                         [{ Types.data =\n                                                            (Types.TypeNs\n                                                               \"ffi\");\n                                                            disambiguator = 0\n                                                            };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"c_str\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"CString\");\n                                                             disambiguator =\n                                                             0 }\n                                                           ]\n                                                         };\n                                                       generic_args = [];\n                                                       trait_refs = []})\n                                                   ];\n                                                 def_id =\n                                                 { Types.index = (2, 3454);\n                                                   krate = \"core\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs \"ops\");\n                                                      disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs \"deref\");\n                                                       disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs \"Deref\");\n                                                       disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs \"Target\");\n                                                       disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 kind =\n                                                 Types.Projection {\n                                                   assoc_item =\n                                                   { Types.container =\n                                                     Types.TraitContainer;\n                                                     def_id =\n                                                     { Types.index =\n                                                       (2, 3454);\n                                                       krate = \"core\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs \"ops\");\n                                                          disambiguator = 0 };\n                                                         { Types.data =\n                                                           (Types.TypeNs\n                                                              \"deref\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.TypeNs\n                                                              \"Deref\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.TypeNs\n                                                              \"Target\");\n                                                           disambiguator = 0\n                                                           }\n                                                         ]\n                                                       };\n                                                     fn_has_self_parameter =\n                                                     false;\n                                                     kind = Types.Type;\n                                                     name = \"Target\";\n                                                     opt_rpitit_info = None;\n                                                     trait_item_def_id = None\n                                                     };\n                                                   impl_expr =\n                                                   { Types.args = [];\n                                                     impl =\n                                                     Types.Concrete {\n                                                       generics = [];\n                                                       id =\n                                                       { Types.index =\n                                                         (5, 4829);\n                                                         krate = \"alloc\";\n                                                         path =\n                                                         [{ Types.data =\n                                                            (Types.TypeNs\n                                                               \"ffi\");\n                                                            disambiguator = 0\n                                                            };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"c_str\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             Types.Impl;\n                                                             disambiguator =\n                                                             3 }\n                                                           ]\n                                                         }};\n                                                     trait =\n                                                     { Types.def_id =\n                                                       { Types.index =\n                                                         (2, 3453);\n                                                         krate = \"core\";\n                                                         path =\n                                                         [{ Types.data =\n                                                            (Types.TypeNs\n                                                               \"ops\");\n                                                            disambiguator = 0\n                                                            };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"deref\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"Deref\");\n                                                             disambiguator =\n                                                             0 }\n                                                           ]\n                                                         };\n                                                       generic_args =\n                                                       [(Types.Type\n                                                           Types.Adt {\n                                                             def_id =\n                                                             { Types.index =\n                                                               (5, 7722);\n                                                               krate =\n                                                               \"alloc\";\n                                                               path =\n                                                               [{ Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"ffi\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                 { Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"c_str\");\n                                                                   disambiguator =\n                                                                   0 };\n                                                                 { Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"CString\");\n                                                                   disambiguator =\n                                                                   0 }\n                                                                 ]\n                                                               };\n                                                             generic_args =\n                                                             [];\n                                                             trait_refs = []})\n                                                         ]\n                                                       }\n                                                     }}\n                                                 }),\n                                            false));\n                                        safety = Types.Safe }\n                                      })};\n                               hir_id = None;\n                               span =\n                               { Types.filename =\n                                 (Types.Real\n                                    (Types.LocalPath\n                                       \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                 hi = { Types.col = \"84\"; line = \"250\" };\n                                 lo = { Types.col = \"71\"; line = \"250\" } };\n                               ty =\n                               (Types.Ref\n                                  ({ Types.kind = Types.ReErased },\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (2, 34717);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data = (Types.TypeNs \"ffi\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"c_str\");\n                                           disambiguator = 0 };\n                                         { Types.data = (Types.TypeNs \"CStr\");\n                                           disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []},\n                                   false))\n                               }};\n                           hir_id = None;\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"75\"; line = \"250\" };\n                             lo = { Types.col = \"71\"; line = \"250\" } };\n                           ty =\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (2, 34717); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ffi\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"c_str\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"CStr\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []}\n                           };\n                         borrow_kind = Types.Shared};\n                       hir_id = (Some (\"250\", \"127\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3/tunnel/context.rs\"));\n                         hi = { Types.col = \"75\"; line = \"250\" };\n                         lo = { Types.col = \"71\"; line = \"250\" } };\n                       ty =\n                       (Types.Ref\n                          ({ Types.kind = Types.ReErased },\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (2, 34717); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ffi\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"c_str\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"CStr\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           false))\n                       }\n                      ];\n                    bounds_impls = [];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"84\"; line = \"250\" };\n                      lo = { Types.col = \"76\"; line = \"250\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 5266); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ffi\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"c_str\");\n                              disambiguator = 0 };\n                            { Types.data = Types.Impl; disambiguator = 6 };\n                            { Types.data = (Types.ValueNs \"as_ptr\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"82\"; line = \"250\" };\n                        lo = { Types.col = \"76\"; line = \"250\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars =\n                           [(Types.Region\n                               (Types.BrNamed\n                                  ({ Types.index = (2, 56097);\n                                     krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ffi\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"c_str\");\n                                         disambiguator = 0 };\n                                       { Types.data = Types.Impl;\n                                         disambiguator = 6 };\n                                       { Types.data =\n                                         (Types.ValueNs \"as_ptr\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.LifetimeNs \"'_\");\n                                         disambiguator = 0 }\n                                       ]\n                                     },\n                                   \"'_\")))\n                             ];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [(Types.Ref\n                                 ({ Types.kind =\n                                    (Types.ReBound\n                                       (\"0\",\n                                        { Types.kind =\n                                          (Types.BrNamed\n                                             ({ Types.index = (2, 56097);\n                                                krate = \"core\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"ffi\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"c_str\");\n                                                    disambiguator = 0 };\n                                                  { Types.data = Types.Impl;\n                                                    disambiguator = 6 };\n                                                  { Types.data =\n                                                    (Types.ValueNs \"as_ptr\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.LifetimeNs \"'_\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                },\n                                              \"'_\"));\n                                          var = \"0\" }))\n                                    },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (2, 34717);\n                                      krate = \"core\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"ffi\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"c_str\");\n                                          disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"CStr\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                               ];\n                             output =\n                             (Types.RawPtr ((Types.Int Types.I8), false));\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args = []; trait = None;\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars =\n                         [(Types.Region\n                             (Types.BrNamed\n                                ({ Types.index = (2, 56097); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_str\");\n                                       disambiguator = 0 };\n                                     { Types.data = Types.Impl;\n                                       disambiguator = 6 };\n                                     { Types.data = (Types.ValueNs \"as_ptr\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.LifetimeNs \"'_\");\n                                       disambiguator = 0 }\n                                     ]\n                                   },\n                                 \"'_\")))\n                           ];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [(Types.Ref\n                               ({ Types.kind =\n                                  (Types.ReBound\n                                     (\"0\",\n                                      { Types.kind =\n                                        (Types.BrNamed\n                                           ({ Types.index = (2, 56097);\n                                              krate = \"core\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ffi\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"c_str\");\n                                                  disambiguator = 0 };\n                                                { Types.data = Types.Impl;\n                                                  disambiguator = 6 };\n                                                { Types.data =\n                                                  (Types.ValueNs \"as_ptr\");\n                                                  disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.LifetimeNs \"'_\");\n                                                  disambiguator = 0 }\n                                                ]\n                                              },\n                                            \"'_\"));\n                                        var = \"0\" }))\n                                  },\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (2, 34717); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ffi\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"c_str\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"CStr\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                false))\n                             ];\n                           output =\n                           (Types.RawPtr ((Types.Int Types.I8), false));\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"250\", \"125\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"84\"; line = \"250\" };\n                    lo = { Types.col = \"71\"; line = \"250\" } };\n                  ty = (Types.RawPtr ((Types.Int Types.I8), false)) }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"85\"; line = \"250\" };\n                lo = { Types.col = \"20\"; line = \"250\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18138); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3169 };\n                      { Types.data =\n                        (Types.ValueNs \"SSL_CTX_set_cipher_list\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"53\"; line = \"250\" };\n                  lo = { Types.col = \"20\"; line = \"250\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.RawPtr ((Types.Int Types.I8), false))];\n                       output = (Types.Int Types.I32); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.RawPtr ((Types.Int Types.I8), false))];\n                     output = (Types.Int Types.I32); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"250\", \"116\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"85\"; line = \"250\" };\n              lo = { Types.col = \"20\"; line = \"250\" } };\n            ty = (Types.Int Types.I32) });\n    region_scope = { Types.data = Types.Node; id = \"129\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"87\"; line = \"250\" };\n      lo = { Types.col = \"11\"; line = \"250\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"250\", \"115\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"87\"; line = \"250\" };\n    lo = { Types.col = \"11\"; line = \"250\" } };\n  ty = (Types.Int Types.I32) }"

            <:
            i32) =.
          1l
        then
          Core.Result.Result_Ok (() <: Prims.unit)
          <:
          Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
        else
          let res:Alloc.String.t_String =
            Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
                  (sz 1)
                  (let list = ["failed to set the cipher list: "] in
                    FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                    Rust_primitives.Hax.array_of_list 1 list)
                  (let list =
                      [
                        Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                          (Sandwich.Implementation.Openssl3.errstr () <: Alloc.String.t_String)
                        <:
                        Core.Fmt.Rt.t_Argument
                      ]
                    in
                    FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                    Rust_primitives.Hax.array_of_list 1 list)
                <:
                Core.Fmt.t_Arguments)
          in
          Core.Result.Result_Err
          (Core.Convert.f_into #(Sandwich_proto.Errors.t_TLSConfigurationError &
                Alloc.String.t_String)
              #Sandwich.Error.t_Error
              #FStar.Tactics.Typeclasses.solve
              ((Sandwich_proto.Errors.TLSConfigurationError_TLSCONFIGURATIONERROR_UNSUPPORTED_CIPHERSUITE
                  <:
                  Sandwich_proto.Errors.t_TLSConfigurationError),
                res
                <:
                (Sandwich_proto.Errors.t_TLSConfigurationError & Alloc.String.t_String)))
          <:
          Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
      | Core.Result.Result_Err err ->
        Core.Result.Result_Err (Core.Convert.f_from #FStar.Tactics.Typeclasses.solve err)
        <:
        Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
  | Core.Result.Result_Err err ->
    Core.Result.Result_Err err <: Core.Result.t_Result Prims.unit Sandwich.Error.t_Error

let impl__SslContext__configure_tls12
      (self: t_SslContext)
      (tls12_config: Core.Option.t_Option Sandwich_api_proto.Tls.t_TLSv12Config)
     =
  Rust_primitives.Hax.Control_flow_monad.Mexception.run (match tls12_config with
      | Core.Option.Option_Some config ->
        let! _:Prims.unit =
          if
            Alloc.Vec.impl_1__is_empty #Alloc.String.t_String
              #Alloc.Alloc.t_Global
              config.Sandwich_api_proto.Tls.f_ciphersuite
          then
            match impl__SslContext__set_default_cipher_list self with
            | Core.Result.Result_Ok _ ->
              Core.Ops.Control_flow.ControlFlow_Continue ()
              <:
              Core.Ops.Control_flow.t_ControlFlow
                (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
            | Core.Result.Result_Err err ->
              Core.Ops.Control_flow.ControlFlow_Break
              (Core.Result.Result_Err err <: Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
              <:
              Core.Ops.Control_flow.t_ControlFlow
                (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
          else
            match
              impl__SslContext__set_cipher_list #Alloc.String.t_String
                #(Alloc.Vec.t_Vec Alloc.String.t_String Alloc.Alloc.t_Global)
                self
                config.Sandwich_api_proto.Tls.f_ciphersuite
            with
            | Core.Result.Result_Ok _ ->
              Core.Ops.Control_flow.ControlFlow_Continue ()
              <:
              Core.Ops.Control_flow.t_ControlFlow
                (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
            | Core.Result.Result_Err err ->
              Core.Ops.Control_flow.ControlFlow_Break
              (Core.Result.Result_Err err <: Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
              <:
              Core.Ops.Control_flow.t_ControlFlow
                (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
        in
        Core.Ops.Control_flow.ControlFlow_Continue
        (Core.Result.Result_Ok (() <: Prims.unit)
          <:
          Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
        <:
        Core.Ops.Control_flow.t_ControlFlow (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
      | _ ->
        let! _:Rust_primitives.Hax.t_Never =
          Core.Ops.Control_flow.ControlFlow_Break
          (Core.Result.Result_Ok (() <: Prims.unit)
            <:
            Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          <:
          Core.Ops.Control_flow.t_ControlFlow
            (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Rust_primitives.Hax.t_Never
        in
        Core.Ops.Control_flow.ControlFlow_Continue ()
        <:
        Core.Ops.Control_flow.t_ControlFlow (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          Prims.unit)

let impl__SslContext__set_ciphersuites
      (#v_S #impl_995885649_: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i4: Core.Convert.t_AsRef v_S string)
      (#[FStar.Tactics.Typeclasses.tcresolve ()]
          i4:
          Core.Iter.Traits.Collect.t_IntoIterator impl_995885649_)
      (self: t_SslContext)
      (ciphers: impl_995885649_)
     =
  match
    Sandwich.Tunnel.Tls.Support.build_ciphersuites_list #v_S #impl_995885649_ ciphers "!+@-"
  with
  | Core.Result.Result_Ok control_string ->
    (match
        Core.Result.impl__map_err #Alloc.Ffi.C_str.t_CString
          #Alloc.Ffi.C_str.t_NulError
          #(Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String)
          (Alloc.Ffi.C_str.impl__CString__new #Alloc.String.t_String control_string
            <:
            Core.Result.t_Result Alloc.Ffi.C_str.t_CString Alloc.Ffi.C_str.t_NulError)
          (fun e ->
              let e:Alloc.Ffi.C_str.t_NulError = e in
              let res:Alloc.String.t_String =
                Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
                      (sz 1)
                      (let list = ["failed to build a `CString`: "] in
                        FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                        Rust_primitives.Hax.array_of_list 1 list)
                      (let list =
                          [
                            Core.Fmt.Rt.impl_1__new_display #Alloc.Ffi.C_str.t_NulError e
                            <:
                            Core.Fmt.Rt.t_Argument
                          ]
                        in
                        FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                        Rust_primitives.Hax.array_of_list 1 list)
                    <:
                    Core.Fmt.t_Arguments)
              in
              (Sandwich_proto.Errors.SystemError_SYSTEMERROR_MEMORY
                <:
                Sandwich_proto.Errors.t_SystemError),
              res
              <:
              (Sandwich_proto.Errors.t_SystemError & Alloc.String.t_String))
      with
      | Core.Result.Result_Ok cstr ->
        if
          (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
              "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Field {\n                        field =\n                        { Types.index = (0, 237); krate = \"sandwich\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"implementation\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"openssl3\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"tunnel\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"context\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"SslContext\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.ValueNs \"0\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        lhs =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Deref {\n                            arg =\n                            { Types.attributes = [];\n                              contents =\n                              Types.VarRef {\n                                id =\n                                { Types.id =\n                                  { Types.local_id = \"2\";\n                                    owner =\n                                    { Types.index = (0, 254);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data = Types.Impl;\n                                          disambiguator = 4 };\n                                        { Types.data =\n                                          (Types.ValueNs \"set_ciphersuites\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    };\n                                  name = \"self\" }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"59\"; line = \"294\" };\n                                lo = { Types.col = \"55\"; line = \"294\" } };\n                              ty =\n                              (Types.Ref\n                                 ({ Types.kind = Types.ReErased },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 235);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"SslContext\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              }};\n                          hir_id = (Some (\"254\", \"115\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"59\"; line = \"294\" };\n                            lo = { Types.col = \"55\"; line = \"294\" } };\n                          ty =\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (0, 235); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"implementation\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"openssl3\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"context\");\n                                  disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"SslContext\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []}\n                          }};\n                      hir_id = (Some (\"254\", \"114\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"61\"; line = \"294\" };\n                        lo = { Types.col = \"55\"; line = \"294\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"70\"; line = \"294\" };\n                     lo = { Types.col = \"62\"; line = \"294\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"68\"; line = \"294\" };\n                       lo = { Types.col = \"62\"; line = \"294\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21403); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21403);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ssl_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"254\", \"112\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"70\"; line = \"294\" };\n                   lo = { Types.col = \"55\"; line = \"294\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.Call {\n                    args =\n                    [{ Types.attributes = [];\n                       contents =\n                       Types.Borrow {\n                         arg =\n                         { Types.attributes = [];\n                           contents =\n                           Types.Deref {\n                             arg =\n                             { Types.attributes = [];\n                               contents =\n                               Types.Call {\n                                 args =\n                                 [{ Types.attributes = [];\n                                    contents =\n                                    Types.Borrow {\n                                      arg =\n                                      { Types.attributes = [];\n                                        contents =\n                                        Types.VarRef {\n                                          id =\n                                          { Types.id =\n                                            { Types.local_id = \"104\";\n                                              owner =\n                                              { Types.index = (0, 254);\n                                                krate = \"sandwich\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs\n                                                      \"implementation\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"openssl3\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"tunnel\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"context\");\n                                                    disambiguator = 0 };\n                                                  { Types.data = Types.Impl;\n                                                    disambiguator = 4 };\n                                                  { Types.data =\n                                                    (Types.ValueNs\n                                                       \"set_ciphersuites\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                }\n                                              };\n                                            name = \"cstr\" }};\n                                        hir_id = None;\n                                        span =\n                                        { Types.filename =\n                                          (Types.Real\n                                             (Types.LocalPath\n                                                \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                          hi =\n                                          { Types.col = \"76\"; line = \"294\" };\n                                          lo =\n                                          { Types.col = \"72\"; line = \"294\" }\n                                          };\n                                        ty =\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (5, 7722);\n                                            krate = \"alloc\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"ffi\");\n                                               disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"c_str\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"CString\");\n                                                disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []}\n                                        };\n                                      borrow_kind = Types.Shared};\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath\n                                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                      hi = { Types.col = \"76\"; line = \"294\" };\n                                      lo = { Types.col = \"72\"; line = \"294\" }\n                                      };\n                                    ty =\n                                    (Types.Ref\n                                       ({ Types.kind = Types.ReErased },\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (5, 7722);\n                                            krate = \"alloc\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"ffi\");\n                                               disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"c_str\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"CString\");\n                                                disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []},\n                                        false))\n                                    }\n                                   ];\n                                 bounds_impls = [];\n                                 fn_span =\n                                 { Types.filename =\n                                   (Types.Real\n                                      (Types.LocalPath\n                                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                   hi = { Types.col = \"85\"; line = \"294\" };\n                                   lo = { Types.col = \"72\"; line = \"294\" } };\n                                 from_hir_call = false;\n                                 fun' =\n                                 { Types.attributes = [];\n                                   contents =\n                                   Types.GlobalName {\n                                     id =\n                                     { Types.index = (2, 3455);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data = (Types.TypeNs \"ops\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"deref\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"Deref\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.ValueNs \"deref\");\n                                           disambiguator = 0 }\n                                         ]\n                                       }};\n                                   hir_id = None;\n                                   span =\n                                   { Types.filename =\n                                     (Types.Real\n                                        (Types.LocalPath\n                                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                     hi = { Types.col = \"85\"; line = \"294\" };\n                                     lo = { Types.col = \"72\"; line = \"294\" }\n                                     };\n                                   ty =\n                                   (Types.Arrow\n                                      { Types.bound_vars =\n                                        [(Types.Region\n                                            (Types.BrNamed\n                                               ({ Types.index = (2, 55519);\n                                                  krate = \"core\";\n                                                  path =\n                                                  [{ Types.data =\n                                                     (Types.TypeNs \"ops\");\n                                                     disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.TypeNs \"deref\");\n                                                      disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.TypeNs \"Deref\");\n                                                      disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.ValueNs \"deref\");\n                                                      disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.LifetimeNs \"'_\");\n                                                      disambiguator = 0 }\n                                                    ]\n                                                  },\n                                                \"'_\")))\n                                          ];\n                                        value =\n                                        { Types.abi =\n                                          Types.Abi {todo = \"Rust\"};\n                                          c_variadic = false;\n                                          inputs =\n                                          [(Types.Ref\n                                              ({ Types.kind =\n                                                 (Types.ReBound\n                                                    (\"0\",\n                                                     { Types.kind =\n                                                       (Types.BrNamed\n                                                          ({ Types.index =\n                                                             (2, 55519);\n                                                             krate = \"core\";\n                                                             path =\n                                                             [{ Types.data =\n                                                                (Types.TypeNs\n                                                                   \"ops\");\n                                                                disambiguator =\n                                                                0 };\n                                                               { Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"deref\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                               { Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"Deref\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                               { Types.data =\n                                                                 (Types.ValueNs\n                                                                    \"deref\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                               { Types.data =\n                                                                 (Types.LifetimeNs\n                                                                    \"'_\");\n                                                                 disambiguator =\n                                                                 0 }\n                                                               ]\n                                                             },\n                                                           \"'_\"));\n                                                       var = \"0\" }))\n                                                 },\n                                               Types.Adt {\n                                                 def_id =\n                                                 { Types.index = (5, 7722);\n                                                   krate = \"alloc\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs \"ffi\");\n                                                      disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs \"c_str\");\n                                                       disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs\n                                                          \"CString\");\n                                                       disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 generic_args = [];\n                                                 trait_refs = []},\n                                               false))\n                                            ];\n                                          output =\n                                          (Types.Ref\n                                             ({ Types.kind =\n                                                (Types.ReBound\n                                                   (\"0\",\n                                                    { Types.kind =\n                                                      (Types.BrNamed\n                                                         ({ Types.index =\n                                                            (2, 55519);\n                                                            krate = \"core\";\n                                                            path =\n                                                            [{ Types.data =\n                                                               (Types.TypeNs\n                                                                  \"ops\");\n                                                               disambiguator =\n                                                               0 };\n                                                              { Types.data =\n                                                                (Types.TypeNs\n                                                                   \"deref\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                (Types.TypeNs\n                                                                   \"Deref\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                (Types.ValueNs\n                                                                   \"deref\");\n                                                                disambiguator =\n                                                                0 };\n                                                              { Types.data =\n                                                                (Types.LifetimeNs\n                                                                   \"'_\");\n                                                                disambiguator =\n                                                                0 }\n                                                              ]\n                                                            },\n                                                          \"'_\"));\n                                                      var = \"0\" }))\n                                                },\n                                              (Types.Alias\n                                                 { Types.args =\n                                                   [(Types.Type\n                                                       Types.Adt {\n                                                         def_id =\n                                                         { Types.index =\n                                                           (5, 7722);\n                                                           krate = \"alloc\";\n                                                           path =\n                                                           [{ Types.data =\n                                                              (Types.TypeNs\n                                                                 \"ffi\");\n                                                              disambiguator =\n                                                              0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"c_str\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"CString\");\n                                                               disambiguator =\n                                                               0 }\n                                                             ]\n                                                           };\n                                                         generic_args = [];\n                                                         trait_refs = []})\n                                                     ];\n                                                   def_id =\n                                                   { Types.index = (2, 3454);\n                                                     krate = \"core\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs \"ops\");\n                                                        disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"deref\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"Deref\");\n                                                         disambiguator = 0 };\n                                                       { Types.data =\n                                                         (Types.TypeNs\n                                                            \"Target\");\n                                                         disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   kind =\n                                                   Types.Projection {\n                                                     assoc_item =\n                                                     { Types.container =\n                                                       Types.TraitContainer;\n                                                       def_id =\n                                                       { Types.index =\n                                                         (2, 3454);\n                                                         krate = \"core\";\n                                                         path =\n                                                         [{ Types.data =\n                                                            (Types.TypeNs\n                                                               \"ops\");\n                                                            disambiguator = 0\n                                                            };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"deref\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"Deref\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"Target\");\n                                                             disambiguator =\n                                                             0 }\n                                                           ]\n                                                         };\n                                                       fn_has_self_parameter =\n                                                       false;\n                                                       kind = Types.Type;\n                                                       name = \"Target\";\n                                                       opt_rpitit_info = None;\n                                                       trait_item_def_id =\n                                                       None };\n                                                     impl_expr =\n                                                     { Types.args = [];\n                                                       impl =\n                                                       Types.Concrete {\n                                                         generics = [];\n                                                         id =\n                                                         { Types.index =\n                                                           (5, 4829);\n                                                           krate = \"alloc\";\n                                                           path =\n                                                           [{ Types.data =\n                                                              (Types.TypeNs\n                                                                 \"ffi\");\n                                                              disambiguator =\n                                                              0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"c_str\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               Types.Impl;\n                                                               disambiguator =\n                                                               3 }\n                                                             ]\n                                                           }};\n                                                       trait =\n                                                       { Types.def_id =\n                                                         { Types.index =\n                                                           (2, 3453);\n                                                           krate = \"core\";\n                                                           path =\n                                                           [{ Types.data =\n                                                              (Types.TypeNs\n                                                                 \"ops\");\n                                                              disambiguator =\n                                                              0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"deref\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"Deref\");\n                                                               disambiguator =\n                                                               0 }\n                                                             ]\n                                                           };\n                                                         generic_args =\n                                                         [(Types.Type\n                                                             Types.Adt {\n                                                               def_id =\n                                                               { Types.index =\n                                                                 (5, 7722);\n                                                                 krate =\n                                                                 \"alloc\";\n                                                                 path =\n                                                                 [{ Types.data =\n                                                                    (\n                                                                    Types.TypeNs\n                                                                    \"ffi\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                   { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"c_str\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                   { Types.data =\n                                                                    (Types.TypeNs\n                                                                    \"CString\");\n                                                                    disambiguator =\n                                                                    0 }\n                                                                   ]\n                                                                 };\n                                                               generic_args =\n                                                               [];\n                                                               trait_refs =\n                                                               []})\n                                                           ]\n                                                         }\n                                                       }}\n                                                   }),\n                                              false));\n                                          safety = Types.Safe }\n                                        })\n                                   };\n                                 generic_args = [];\n                                 trait =\n                                 (Some ({ Types.args = [];\n                                          impl =\n                                          Types.Concrete {generics = [];\n                                            id =\n                                            { Types.index = (5, 4829);\n                                              krate = \"alloc\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ffi\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"c_str\");\n                                                  disambiguator = 0 };\n                                                { Types.data = Types.Impl;\n                                                  disambiguator = 3 }\n                                                ]\n                                              }};\n                                          trait =\n                                          { Types.def_id =\n                                            { Types.index = (2, 3453);\n                                              krate = \"core\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ops\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"deref\");\n                                                  disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"Deref\");\n                                                  disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args =\n                                            [(Types.Type\n                                                Types.Adt {\n                                                  def_id =\n                                                  { Types.index = (5, 7722);\n                                                    krate = \"alloc\";\n                                                    path =\n                                                    [{ Types.data =\n                                                       (Types.TypeNs \"ffi\");\n                                                       disambiguator = 0 };\n                                                      { Types.data =\n                                                        (Types.TypeNs \"c_str\");\n                                                        disambiguator = 0 };\n                                                      { Types.data =\n                                                        (Types.TypeNs\n                                                           \"CString\");\n                                                        disambiguator = 0 }\n                                                      ]\n                                                    };\n                                                  generic_args = [];\n                                                  trait_refs = []})\n                                              ]\n                                            }\n                                          },\n                                        [(Types.Type\n                                            Types.Adt {\n                                              def_id =\n                                              { Types.index = (5, 7722);\n                                                krate = \"alloc\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"ffi\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"c_str\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"CString\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args = [];\n                                              trait_refs = []})\n                                          ]));\n                                 ty =\n                                 (Types.Arrow\n                                    { Types.bound_vars =\n                                      [(Types.Region\n                                          (Types.BrNamed\n                                             ({ Types.index = (2, 55519);\n                                                krate = \"core\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"ops\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"deref\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"Deref\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.ValueNs \"deref\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.LifetimeNs \"'_\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                },\n                                              \"'_\")))\n                                        ];\n                                      value =\n                                      { Types.abi = Types.Abi {todo = \"Rust\"};\n                                        c_variadic = false;\n                                        inputs =\n                                        [(Types.Ref\n                                            ({ Types.kind =\n                                               (Types.ReBound\n                                                  (\"0\",\n                                                   { Types.kind =\n                                                     (Types.BrNamed\n                                                        ({ Types.index =\n                                                           (2, 55519);\n                                                           krate = \"core\";\n                                                           path =\n                                                           [{ Types.data =\n                                                              (Types.TypeNs\n                                                                 \"ops\");\n                                                              disambiguator =\n                                                              0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"deref\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"Deref\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               (Types.ValueNs\n                                                                  \"deref\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               (Types.LifetimeNs\n                                                                  \"'_\");\n                                                               disambiguator =\n                                                               0 }\n                                                             ]\n                                                           },\n                                                         \"'_\"));\n                                                     var = \"0\" }))\n                                               },\n                                             Types.Adt {\n                                               def_id =\n                                               { Types.index = (5, 7722);\n                                                 krate = \"alloc\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"ffi\");\n                                                    disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"c_str\");\n                                                     disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"CString\");\n                                                     disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []},\n                                             false))\n                                          ];\n                                        output =\n                                        (Types.Ref\n                                           ({ Types.kind =\n                                              (Types.ReBound\n                                                 (\"0\",\n                                                  { Types.kind =\n                                                    (Types.BrNamed\n                                                       ({ Types.index =\n                                                          (2, 55519);\n                                                          krate = \"core\";\n                                                          path =\n                                                          [{ Types.data =\n                                                             (Types.TypeNs\n                                                                \"ops\");\n                                                             disambiguator =\n                                                             0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"deref\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.TypeNs\n                                                                 \"Deref\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.ValueNs\n                                                                 \"deref\");\n                                                              disambiguator =\n                                                              0 };\n                                                            { Types.data =\n                                                              (Types.LifetimeNs\n                                                                 \"'_\");\n                                                              disambiguator =\n                                                              0 }\n                                                            ]\n                                                          },\n                                                        \"'_\"));\n                                                    var = \"0\" }))\n                                              },\n                                            (Types.Alias\n                                               { Types.args =\n                                                 [(Types.Type\n                                                     Types.Adt {\n                                                       def_id =\n                                                       { Types.index =\n                                                         (5, 7722);\n                                                         krate = \"alloc\";\n                                                         path =\n                                                         [{ Types.data =\n                                                            (Types.TypeNs\n                                                               \"ffi\");\n                                                            disambiguator = 0\n                                                            };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"c_str\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"CString\");\n                                                             disambiguator =\n                                                             0 }\n                                                           ]\n                                                         };\n                                                       generic_args = [];\n                                                       trait_refs = []})\n                                                   ];\n                                                 def_id =\n                                                 { Types.index = (2, 3454);\n                                                   krate = \"core\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs \"ops\");\n                                                      disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs \"deref\");\n                                                       disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs \"Deref\");\n                                                       disambiguator = 0 };\n                                                     { Types.data =\n                                                       (Types.TypeNs \"Target\");\n                                                       disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 kind =\n                                                 Types.Projection {\n                                                   assoc_item =\n                                                   { Types.container =\n                                                     Types.TraitContainer;\n                                                     def_id =\n                                                     { Types.index =\n                                                       (2, 3454);\n                                                       krate = \"core\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs \"ops\");\n                                                          disambiguator = 0 };\n                                                         { Types.data =\n                                                           (Types.TypeNs\n                                                              \"deref\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.TypeNs\n                                                              \"Deref\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.TypeNs\n                                                              \"Target\");\n                                                           disambiguator = 0\n                                                           }\n                                                         ]\n                                                       };\n                                                     fn_has_self_parameter =\n                                                     false;\n                                                     kind = Types.Type;\n                                                     name = \"Target\";\n                                                     opt_rpitit_info = None;\n                                                     trait_item_def_id = None\n                                                     };\n                                                   impl_expr =\n                                                   { Types.args = [];\n                                                     impl =\n                                                     Types.Concrete {\n                                                       generics = [];\n                                                       id =\n                                                       { Types.index =\n                                                         (5, 4829);\n                                                         krate = \"alloc\";\n                                                         path =\n                                                         [{ Types.data =\n                                                            (Types.TypeNs\n                                                               \"ffi\");\n                                                            disambiguator = 0\n                                                            };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"c_str\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             Types.Impl;\n                                                             disambiguator =\n                                                             3 }\n                                                           ]\n                                                         }};\n                                                     trait =\n                                                     { Types.def_id =\n                                                       { Types.index =\n                                                         (2, 3453);\n                                                         krate = \"core\";\n                                                         path =\n                                                         [{ Types.data =\n                                                            (Types.TypeNs\n                                                               \"ops\");\n                                                            disambiguator = 0\n                                                            };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"deref\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"Deref\");\n                                                             disambiguator =\n                                                             0 }\n                                                           ]\n                                                         };\n                                                       generic_args =\n                                                       [(Types.Type\n                                                           Types.Adt {\n                                                             def_id =\n                                                             { Types.index =\n                                                               (5, 7722);\n                                                               krate =\n                                                               \"alloc\";\n                                                               path =\n                                                               [{ Types.data =\n                                                                  (Types.TypeNs\n                                                                    \"ffi\");\n                                                                  disambiguator =\n                                                                  0 };\n                                                                 { Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"c_str\");\n                                                                   disambiguator =\n                                                                   0 };\n                                                                 { Types.data =\n                                                                   (Types.TypeNs\n                                                                    \"CString\");\n                                                                   disambiguator =\n                                                                   0 }\n                                                                 ]\n                                                               };\n                                                             generic_args =\n                                                             [];\n                                                             trait_refs = []})\n                                                         ]\n                                                       }\n                                                     }}\n                                                 }),\n                                            false));\n                                        safety = Types.Safe }\n                                      })};\n                               hir_id = None;\n                               span =\n                               { Types.filename =\n                                 (Types.Real\n                                    (Types.LocalPath\n                                       \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                 hi = { Types.col = \"85\"; line = \"294\" };\n                                 lo = { Types.col = \"72\"; line = \"294\" } };\n                               ty =\n                               (Types.Ref\n                                  ({ Types.kind = Types.ReErased },\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (2, 34717);\n                                       krate = \"core\";\n                                       path =\n                                       [{ Types.data = (Types.TypeNs \"ffi\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"c_str\");\n                                           disambiguator = 0 };\n                                         { Types.data = (Types.TypeNs \"CStr\");\n                                           disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []},\n                                   false))\n                               }};\n                           hir_id = None;\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"76\"; line = \"294\" };\n                             lo = { Types.col = \"72\"; line = \"294\" } };\n                           ty =\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (2, 34717); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ffi\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"c_str\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"CStr\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []}\n                           };\n                         borrow_kind = Types.Shared};\n                       hir_id = (Some (\"254\", \"119\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3/tunnel/context.rs\"));\n                         hi = { Types.col = \"76\"; line = \"294\" };\n                         lo = { Types.col = \"72\"; line = \"294\" } };\n                       ty =\n                       (Types.Ref\n                          ({ Types.kind = Types.ReErased },\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (2, 34717); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ffi\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"c_str\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"CStr\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           false))\n                       }\n                      ];\n                    bounds_impls = [];\n                    fn_span =\n                    { Types.filename =\n                      (Types.Real\n                         (Types.LocalPath\n                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                      hi = { Types.col = \"85\"; line = \"294\" };\n                      lo = { Types.col = \"77\"; line = \"294\" } };\n                    from_hir_call = true;\n                    fun' =\n                    { Types.attributes = [];\n                      contents =\n                      Types.GlobalName {\n                        id =\n                        { Types.index = (2, 5266); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ffi\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"c_str\");\n                              disambiguator = 0 };\n                            { Types.data = Types.Impl; disambiguator = 6 };\n                            { Types.data = (Types.ValueNs \"as_ptr\");\n                              disambiguator = 0 }\n                            ]\n                          }};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"83\"; line = \"294\" };\n                        lo = { Types.col = \"77\"; line = \"294\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars =\n                           [(Types.Region\n                               (Types.BrNamed\n                                  ({ Types.index = (2, 56097);\n                                     krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ffi\");\n                                        disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"c_str\");\n                                         disambiguator = 0 };\n                                       { Types.data = Types.Impl;\n                                         disambiguator = 6 };\n                                       { Types.data =\n                                         (Types.ValueNs \"as_ptr\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.LifetimeNs \"'_\");\n                                         disambiguator = 0 }\n                                       ]\n                                     },\n                                   \"'_\")))\n                             ];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [(Types.Ref\n                                 ({ Types.kind =\n                                    (Types.ReBound\n                                       (\"0\",\n                                        { Types.kind =\n                                          (Types.BrNamed\n                                             ({ Types.index = (2, 56097);\n                                                krate = \"core\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"ffi\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"c_str\");\n                                                    disambiguator = 0 };\n                                                  { Types.data = Types.Impl;\n                                                    disambiguator = 6 };\n                                                  { Types.data =\n                                                    (Types.ValueNs \"as_ptr\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.LifetimeNs \"'_\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                },\n                                              \"'_\"));\n                                          var = \"0\" }))\n                                    },\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (2, 34717);\n                                      krate = \"core\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"ffi\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"c_str\");\n                                          disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"CStr\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                               ];\n                             output =\n                             (Types.RawPtr ((Types.Int Types.I8), false));\n                             safety = Types.Safe }\n                           })\n                      };\n                    generic_args = []; trait = None;\n                    ty =\n                    (Types.Arrow\n                       { Types.bound_vars =\n                         [(Types.Region\n                             (Types.BrNamed\n                                ({ Types.index = (2, 56097); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ffi\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"c_str\");\n                                       disambiguator = 0 };\n                                     { Types.data = Types.Impl;\n                                       disambiguator = 6 };\n                                     { Types.data = (Types.ValueNs \"as_ptr\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.LifetimeNs \"'_\");\n                                       disambiguator = 0 }\n                                     ]\n                                   },\n                                 \"'_\")))\n                           ];\n                         value =\n                         { Types.abi = Types.Abi {todo = \"Rust\"};\n                           c_variadic = false;\n                           inputs =\n                           [(Types.Ref\n                               ({ Types.kind =\n                                  (Types.ReBound\n                                     (\"0\",\n                                      { Types.kind =\n                                        (Types.BrNamed\n                                           ({ Types.index = (2, 56097);\n                                              krate = \"core\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ffi\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"c_str\");\n                                                  disambiguator = 0 };\n                                                { Types.data = Types.Impl;\n                                                  disambiguator = 6 };\n                                                { Types.data =\n                                                  (Types.ValueNs \"as_ptr\");\n                                                  disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.LifetimeNs \"'_\");\n                                                  disambiguator = 0 }\n                                                ]\n                                              },\n                                            \"'_\"));\n                                        var = \"0\" }))\n                                  },\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (2, 34717); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ffi\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"c_str\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"CStr\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                false))\n                             ];\n                           output =\n                           (Types.RawPtr ((Types.Int Types.I8), false));\n                           safety = Types.Safe }\n                         })};\n                  hir_id = (Some (\"254\", \"117\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"85\"; line = \"294\" };\n                    lo = { Types.col = \"72\"; line = \"294\" } };\n                  ty = (Types.RawPtr ((Types.Int Types.I8), false)) }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"86\"; line = \"294\" };\n                lo = { Types.col = \"20\"; line = \"294\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18218); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3209 };\n                      { Types.data =\n                        (Types.ValueNs \"SSL_CTX_set_ciphersuites\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"54\"; line = \"294\" };\n                  lo = { Types.col = \"20\"; line = \"294\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.RawPtr ((Types.Int Types.I8), false))];\n                       output = (Types.Int Types.I32); safety = Types.Unsafe\n                       }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.RawPtr ((Types.Int Types.I8), false))];\n                     output = (Types.Int Types.I32); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"254\", \"108\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"86\"; line = \"294\" };\n              lo = { Types.col = \"20\"; line = \"294\" } };\n            ty = (Types.Int Types.I32) });\n    region_scope = { Types.data = Types.Node; id = \"121\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"88\"; line = \"294\" };\n      lo = { Types.col = \"11\"; line = \"294\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"254\", \"107\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"88\"; line = \"294\" };\n    lo = { Types.col = \"11\"; line = \"294\" } };\n  ty = (Types.Int Types.I32) }"

            <:
            i32) =.
          1l
        then
          Core.Result.Result_Ok (() <: Prims.unit)
          <:
          Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
        else
          let res:Alloc.String.t_String =
            Alloc.Fmt.format (Core.Fmt.impl_2__new_v1 (sz 1)
                  (sz 1)
                  (let list = ["failed to set the ciphersuites: "] in
                    FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                    Rust_primitives.Hax.array_of_list 1 list)
                  (let list =
                      [
                        Core.Fmt.Rt.impl_1__new_display #Alloc.String.t_String
                          (Sandwich.Implementation.Openssl3.errstr () <: Alloc.String.t_String)
                        <:
                        Core.Fmt.Rt.t_Argument
                      ]
                    in
                    FStar.Pervasives.assert_norm (Prims.eq2 (List.Tot.length list) 1);
                    Rust_primitives.Hax.array_of_list 1 list)
                <:
                Core.Fmt.t_Arguments)
          in
          Core.Result.Result_Err
          (Core.Convert.f_into #(Sandwich_proto.Errors.t_TLSConfigurationError &
                Alloc.String.t_String)
              #Sandwich.Error.t_Error
              #FStar.Tactics.Typeclasses.solve
              ((Sandwich_proto.Errors.TLSConfigurationError_TLSCONFIGURATIONERROR_UNSUPPORTED_CIPHERSUITE
                  <:
                  Sandwich_proto.Errors.t_TLSConfigurationError),
                res
                <:
                (Sandwich_proto.Errors.t_TLSConfigurationError & Alloc.String.t_String)))
          <:
          Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
      | Core.Result.Result_Err err ->
        Core.Result.Result_Err (Core.Convert.f_from #FStar.Tactics.Typeclasses.solve err)
        <:
        Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
  | Core.Result.Result_Err err ->
    Core.Result.Result_Err err <: Core.Result.t_Result Prims.unit Sandwich.Error.t_Error

let impl__SslContext__configure_tls13
      (self: t_SslContext)
      (tls13_config: Core.Option.t_Option Sandwich_api_proto.Tls.t_TLSv13Config)
     =
  Rust_primitives.Hax.Control_flow_monad.Mexception.run (match tls13_config with
      | Core.Option.Option_Some config ->
        (match
            impl__SslContext__set_kes #Alloc.String.t_String
              self
              (Core.Ops.Deref.f_deref #(Alloc.Vec.t_Vec Alloc.String.t_String Alloc.Alloc.t_Global)
                  #FStar.Tactics.Typeclasses.solve
                  config.Sandwich_api_proto.Tls.f_ke
                <:
                t_Slice Alloc.String.t_String)
            <:
            Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
          with
          | Core.Result.Result_Ok _ ->
            let! _:Prims.unit =
              if
                Alloc.Vec.impl_1__is_empty #Alloc.String.t_String
                  #Alloc.Alloc.t_Global
                  config.Sandwich_api_proto.Tls.f_ciphersuite
              then
                match impl__SslContext__set_default_ciphersuites self with
                | Core.Result.Result_Ok _ ->
                  Core.Ops.Control_flow.ControlFlow_Continue ()
                  <:
                  Core.Ops.Control_flow.t_ControlFlow
                    (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
                | Core.Result.Result_Err err ->
                  Core.Ops.Control_flow.ControlFlow_Break
                  (Core.Result.Result_Err err
                    <:
                    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
                  <:
                  Core.Ops.Control_flow.t_ControlFlow
                    (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
              else
                match
                  impl__SslContext__set_ciphersuites #Alloc.String.t_String
                    #(Alloc.Vec.t_Vec Alloc.String.t_String Alloc.Alloc.t_Global)
                    self
                    config.Sandwich_api_proto.Tls.f_ciphersuite
                with
                | Core.Result.Result_Ok _ ->
                  Core.Ops.Control_flow.ControlFlow_Continue ()
                  <:
                  Core.Ops.Control_flow.t_ControlFlow
                    (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
                | Core.Result.Result_Err err ->
                  Core.Ops.Control_flow.ControlFlow_Break
                  (Core.Result.Result_Err err
                    <:
                    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
                  <:
                  Core.Ops.Control_flow.t_ControlFlow
                    (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Prims.unit
            in
            Core.Ops.Control_flow.ControlFlow_Continue
            (Core.Result.Result_Ok (() <: Prims.unit)
              <:
              Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
              (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          | Core.Result.Result_Err err ->
            Core.Ops.Control_flow.ControlFlow_Continue
            (Core.Result.Result_Err err <: Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
              (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error))
      | _ ->
        let! _:Rust_primitives.Hax.t_Never =
          Core.Ops.Control_flow.ControlFlow_Break
          (Core.Result.Result_Ok (() <: Prims.unit)
            <:
            Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          <:
          Core.Ops.Control_flow.t_ControlFlow
            (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Rust_primitives.Hax.t_Never
        in
        Core.Ops.Control_flow.ControlFlow_Continue ()
        <:
        Core.Ops.Control_flow.t_ControlFlow (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          Prims.unit)

let impl__SslContext__fill_certificate_trust_store
      (self: t_SslContext)
      (lib_ctx: Sandwich.Implementation.Openssl3.t_LibCtx)
      (x509_verifier: Core.Option.t_Option Sandwich_api_proto.Verifiers.t_X509Verifier)
     =
  Rust_primitives.Hax.Control_flow_monad.Mexception.run (match x509_verifier with
      | Core.Option.Option_Some x509_verifier ->
        Core.Ops.Control_flow.ControlFlow_Continue
        (match
            Core.Option.impl__ok_or #(Core.Ptr.Non_null.t_NonNull Openssl3.t_x509_store_st)
              #(Sandwich_proto.Errors.t_SystemError & string)
              (Rust_primitives.Hax.failure "(RefMut) Fatal error: something we considered as impossible occurred! \027[1mPlease report this by submitting an issue on GitHub!\027[0m\nDetails: expected an arrow type here"
                  "rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"core::ptr::non_null::impl_3__new\")::<openssl3::t_x509_store_st>(rust_primitives::hax::failure(\"(reject_RawOrMutPointer) ExplicitRejection { reason: \\\"a node of kind [Raw_pointer] have been found in the AST\\\" }\",\"rust_primitives::hax::failure(\\n        \\\"(AST import) Unsafe blocks are not allowed.\\\",\\n        \\\"{ Types.attributes = [];\\\\n  contents =\\\\n  Types.Block {\\\\n    expr =\\\\n    (Some { Types.attributes = [];\\\\n            contents =\\\\n            Types.Call {\\\\n              args =\\\\n              [{ Types.attributes = [];\\\\n                 contents =\\\\n                 Types.PointerCoercion {cast = Types.MutToConstPointer;\\\\n                   source =\\\\n                   { Types.attributes = [];\\\\n                     contents =\\\\n                     Types.Call {\\\\n                       args =\\\\n                       [{ Types.attributes = [];\\\\n                          contents =\\\\n                          Types.Field {\\\\n                            field =\\\\n                            { Types.index = (0, 237); krate = \\\\\\\"sandwich\\\\\\\";\\\\n                              path =\\\\n                              [{ Types.data = (Types.TypeNs \\\\\\\"implementation\\\\\\\");\\\\n                                 disambiguator = 0 };\\\\n                                { Types.data = (Types.TypeNs \\\\\\\"openssl3\\\\\\\");\\\\n                                  disambiguator = 0 };\\\\n                                { Types.data = (Types.TypeNs \\\\\\\"tunnel\\\\\\\");\\\\n                                  disambiguator = 0 };\\\\n                                { Types.data = (Types.TypeNs \\\\\\\"context\\\\\\\");\\\\n                                  disambiguator = 0 };\\\\n                                { Types.data = (Types.TypeNs \\\\\\\"SslContext\\\\\\\");\\\\n                                  disambiguator = 0 };\\\\n                                { Types.data = (Types.ValueNs \\\\\\\"0\\\\\\\");\\\\n                                  disambiguator = 0 }\\\\n                                ]\\\\n                              };\\\\n                            lhs =\\\\n                            { Types.attributes = [];\\\\n                              contents =\\\\n                              Types.Deref {\\\\n                                arg =\\\\n                                { Types.attributes = [];\\\\n                                  contents =\\\\n                                  Types.VarRef {\\\\n                                    id =\\\\n                                    { Types.id =\\\\n                                      { Types.local_id = \\\\\\\"2\\\\\\\";\\\\n                                        owner =\\\\n                                        { Types.index = (0, 276);\\\\n                                          krate = \\\\\\\"sandwich\\\\\\\";\\\\n                                          path =\\\\n                                          [{ Types.data =\\\\n                                             (Types.TypeNs \\\\\\\"implementation\\\\\\\");\\\\n                                             disambiguator = 0 };\\\\n                                            { Types.data =\\\\n                                              (Types.TypeNs \\\\\\\"openssl3\\\\\\\");\\\\n                                              disambiguator = 0 };\\\\n                                            { Types.data =\\\\n                                              (Types.TypeNs \\\\\\\"tunnel\\\\\\\");\\\\n                                              disambiguator = 0 };\\\\n                                            { Types.data =\\\\n                                              (Types.TypeNs \\\\\\\"context\\\\\\\");\\\\n                                              disambiguator = 0 };\\\\n                                            { Types.data = Types.Impl;\\\\n                                              disambiguator = 4 };\\\\n                                            { Types.data =\\\\n                                              (Types.ValueNs\\\\n                                                 \\\\\\\"fill_certificate_trust_store\\\\\\\");\\\\n                                              disambiguator = 0 }\\\\n                                            ]\\\\n                                          }\\\\n                                        };\\\\n                                      name = \\\\\\\"self\\\\\\\" }};\\\\n                                  hir_id = None;\\\\n                                  span =\\\\n                                  { Types.filename =\\\\n                                    (Types.Real\\\\n                                       (Types.LocalPath\\\\n                                          \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                                    hi = { Types.col = \\\\\\\"79\\\\\\\"; line = \\\\\\\"580\\\\\\\" };\\\\n                                    lo = { Types.col = \\\\\\\"75\\\\\\\"; line = \\\\\\\"580\\\\\\\" } };\\\\n                                  ty =\\\\n                                  (Types.Ref\\\\n                                     ({ Types.kind = Types.ReErased },\\\\n                                      Types.Adt {\\\\n                                        def_id =\\\\n                                        { Types.index = (0, 235);\\\\n                                          krate = \\\\\\\"sandwich\\\\\\\";\\\\n                                          path =\\\\n                                          [{ Types.data =\\\\n                                             (Types.TypeNs \\\\\\\"implementation\\\\\\\");\\\\n                                             disambiguator = 0 };\\\\n                                            { Types.data =\\\\n                                              (Types.TypeNs \\\\\\\"openssl3\\\\\\\");\\\\n                                              disambiguator = 0 };\\\\n                                            { Types.data =\\\\n                                              (Types.TypeNs \\\\\\\"tunnel\\\\\\\");\\\\n                                              disambiguator = 0 };\\\\n                                            { Types.data =\\\\n                                              (Types.TypeNs \\\\\\\"context\\\\\\\");\\\\n                                              disambiguator = 0 };\\\\n                                            { Types.data =\\\\n                                              (Types.TypeNs \\\\\\\"SslContext\\\\\\\");\\\\n                                              disambiguator = 0 }\\\\n                                            ]\\\\n                                          };\\\\n                                        generic_args = []; trait_refs = []},\\\\n                                      false))\\\\n                                  }};\\\\n                              hir_id = (Some (\\\\\\\"276\\\\\\\", \\\\\\\"38\\\\\\\"));\\\\n                              span =\\\\n                              { Types.filename =\\\\n                                (Types.Real\\\\n                                   (Types.LocalPath\\\\n                                      \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                                hi = { Types.col = \\\\\\\"79\\\\\\\"; line = \\\\\\\"580\\\\\\\" };\\\\n                                lo = { Types.col = \\\\\\\"75\\\\\\\"; line = \\\\\\\"580\\\\\\\" } };\\\\n                              ty =\\\\n                              Types.Adt {\\\\n                                def_id =\\\\n                                { Types.index = (0, 235); krate = \\\\\\\"sandwich\\\\\\\";\\\\n                                  path =\\\\n                                  [{ Types.data =\\\\n                                     (Types.TypeNs \\\\\\\"implementation\\\\\\\");\\\\n                                     disambiguator = 0 };\\\\n                                    { Types.data = (Types.TypeNs \\\\\\\"openssl3\\\\\\\");\\\\n                                      disambiguator = 0 };\\\\n                                    { Types.data = (Types.TypeNs \\\\\\\"tunnel\\\\\\\");\\\\n                                      disambiguator = 0 };\\\\n                                    { Types.data = (Types.TypeNs \\\\\\\"context\\\\\\\");\\\\n                                      disambiguator = 0 };\\\\n                                    { Types.data =\\\\n                                      (Types.TypeNs \\\\\\\"SslContext\\\\\\\");\\\\n                                      disambiguator = 0 }\\\\n                                    ]\\\\n                                  };\\\\n                                generic_args = []; trait_refs = []}\\\\n                              }};\\\\n                          hir_id = (Some (\\\\\\\"276\\\\\\\", \\\\\\\"37\\\\\\\"));\\\\n                          span =\\\\n                          { Types.filename =\\\\n                            (Types.Real\\\\n                               (Types.LocalPath\\\\n                                  \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                            hi = { Types.col = \\\\\\\"81\\\\\\\"; line = \\\\\\\"580\\\\\\\" };\\\\n                            lo = { Types.col = \\\\\\\"75\\\\\\\"; line = \\\\\\\"580\\\\\\\" } };\\\\n                          ty =\\\\n                          Types.Adt {\\\\n                            def_id =\\\\n                            { Types.index = (2, 2222); krate = \\\\\\\"core\\\\\\\";\\\\n                              path =\\\\n                              [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\");\\\\n                                 disambiguator = 0 };\\\\n                                { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\");\\\\n                                  disambiguator = 0 };\\\\n                                { Types.data = (Types.TypeNs \\\\\\\"NonNull\\\\\\\");\\\\n                                  disambiguator = 0 }\\\\n                                ]\\\\n                              };\\\\n                            generic_args =\\\\n                            [(Types.Type\\\\n                                Types.Adt {\\\\n                                  def_id =\\\\n                                  { Types.index = (27, 21403);\\\\n                                    krate = \\\\\\\"openssl3\\\\\\\";\\\\n                                    path =\\\\n                                    [{ Types.data =\\\\n                                       (Types.TypeNs \\\\\\\"ssl_ctx_st\\\\\\\");\\\\n                                       disambiguator = 0 }\\\\n                                      ]\\\\n                                    };\\\\n                                  generic_args = []; trait_refs = []})\\\\n                              ];\\\\n                            trait_refs = []}\\\\n                          }\\\\n                         ];\\\\n                       bounds_impls = [];\\\\n                       fn_span =\\\\n                       { Types.filename =\\\\n                         (Types.Real\\\\n                            (Types.LocalPath\\\\n                               \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                         hi = { Types.col = \\\\\\\"90\\\\\\\"; line = \\\\\\\"580\\\\\\\" };\\\\n                         lo = { Types.col = \\\\\\\"82\\\\\\\"; line = \\\\\\\"580\\\\\\\" } };\\\\n                       from_hir_call = true;\\\\n                       fun' =\\\\n                       { Types.attributes = [];\\\\n                         contents =\\\\n                         Types.GlobalName {\\\\n                           id =\\\\n                           { Types.index = (2, 2245); krate = \\\\\\\"core\\\\\\\";\\\\n                             path =\\\\n                             [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\");\\\\n                                disambiguator = 0 };\\\\n                               { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\");\\\\n                                 disambiguator = 0 };\\\\n                               { Types.data = Types.Impl; disambiguator = 3 };\\\\n                               { Types.data = (Types.ValueNs \\\\\\\"as_ptr\\\\\\\");\\\\n                                 disambiguator = 0 }\\\\n                               ]\\\\n                             }};\\\\n                         hir_id = None;\\\\n                         span =\\\\n                         { Types.filename =\\\\n                           (Types.Real\\\\n                              (Types.LocalPath\\\\n                                 \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                           hi = { Types.col = \\\\\\\"88\\\\\\\"; line = \\\\\\\"580\\\\\\\" };\\\\n                           lo = { Types.col = \\\\\\\"82\\\\\\\"; line = \\\\\\\"580\\\\\\\" } };\\\\n                         ty =\\\\n                         (Types.Arrow\\\\n                            { Types.bound_vars = [];\\\\n                              value =\\\\n                              { Types.abi = Types.Abi {todo = \\\\\\\"Rust\\\\\\\"};\\\\n                                c_variadic = false;\\\\n                                inputs =\\\\n                                [Types.Adt {\\\\n                                   def_id =\\\\n                                   { Types.index = (2, 2222); krate = \\\\\\\"core\\\\\\\";\\\\n                                     path =\\\\n                                     [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\");\\\\n                                        disambiguator = 0 };\\\\n                                       { Types.data =\\\\n                                         (Types.TypeNs \\\\\\\"non_null\\\\\\\");\\\\n                                         disambiguator = 0 };\\\\n                                       { Types.data =\\\\n                                         (Types.TypeNs \\\\\\\"NonNull\\\\\\\");\\\\n                                         disambiguator = 0 }\\\\n                                       ]\\\\n                                     };\\\\n                                   generic_args =\\\\n                                   [(Types.Type\\\\n                                       Types.Adt {\\\\n                                         def_id =\\\\n                                         { Types.index = (27, 21403);\\\\n                                           krate = \\\\\\\"openssl3\\\\\\\";\\\\n                                           path =\\\\n                                           [{ Types.data =\\\\n                                              (Types.TypeNs \\\\\\\"ssl_ctx_st\\\\\\\");\\\\n                                              disambiguator = 0 }\\\\n                                             ]\\\\n                                           };\\\\n                                         generic_args = []; trait_refs = []})\\\\n                                     ];\\\\n                                   trait_refs = []}\\\\n                                  ];\\\\n                                output =\\\\n                                (Types.RawPtr\\\\n                                   (Types.Adt {\\\\n                                      def_id =\\\\n                                      { Types.index = (27, 21403);\\\\n                                        krate = \\\\\\\"openssl3\\\\\\\";\\\\n                                        path =\\\\n                                        [{ Types.data =\\\\n                                           (Types.TypeNs \\\\\\\"ssl_ctx_st\\\\\\\");\\\\n                                           disambiguator = 0 }\\\\n                                          ]\\\\n                                        };\\\\n                                      generic_args = []; trait_refs = []},\\\\n                                    true));\\\\n                                safety = Types.Safe }\\\\n                              })\\\\n                         };\\\\n                       generic_args =\\\\n                       [(Types.Type\\\\n                           Types.Adt {\\\\n                             def_id =\\\\n                             { Types.index = (27, 21403); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                               path =\\\\n                               [{ Types.data = (Types.TypeNs \\\\\\\"ssl_ctx_st\\\\\\\");\\\\n                                  disambiguator = 0 }\\\\n                                 ]\\\\n                               };\\\\n                             generic_args = []; trait_refs = []})\\\\n                         ];\\\\n                       trait = None;\\\\n                       ty =\\\\n                       (Types.Arrow\\\\n                          { Types.bound_vars = [];\\\\n                            value =\\\\n                            { Types.abi = Types.Abi {todo = \\\\\\\"Rust\\\\\\\"};\\\\n                              c_variadic = false;\\\\n                              inputs =\\\\n                              [Types.Adt {\\\\n                                 def_id =\\\\n                                 { Types.index = (2, 2222); krate = \\\\\\\"core\\\\\\\";\\\\n                                   path =\\\\n                                   [{ Types.data = (Types.TypeNs \\\\\\\"ptr\\\\\\\");\\\\n                                      disambiguator = 0 };\\\\n                                     { Types.data = (Types.TypeNs \\\\\\\"non_null\\\\\\\");\\\\n                                       disambiguator = 0 };\\\\n                                     { Types.data = (Types.TypeNs \\\\\\\"NonNull\\\\\\\");\\\\n                                       disambiguator = 0 }\\\\n                                     ]\\\\n                                   };\\\\n                                 generic_args =\\\\n                                 [(Types.Type\\\\n                                     Types.Adt {\\\\n                                       def_id =\\\\n                                       { Types.index = (27, 21403);\\\\n                                         krate = \\\\\\\"openssl3\\\\\\\";\\\\n                                         path =\\\\n                                         [{ Types.data =\\\\n                                            (Types.TypeNs \\\\\\\"ssl_ctx_st\\\\\\\");\\\\n                                            disambiguator = 0 }\\\\n                                           ]\\\\n                                         };\\\\n                                       generic_args = []; trait_refs = []})\\\\n                                   ];\\\\n                                 trait_refs = []}\\\\n                                ];\\\\n                              output =\\\\n                              (Types.RawPtr\\\\n                                 (Types.Adt {\\\\n                                    def_id =\\\\n                                    { Types.index = (27, 21403);\\\\n                                      krate = \\\\\\\"openssl3\\\\\\\";\\\\n                                      path =\\\\n                                      [{ Types.data =\\\\n                                         (Types.TypeNs \\\\\\\"ssl_ctx_st\\\\\\\");\\\\n                                         disambiguator = 0 }\\\\n                                        ]\\\\n                                      };\\\\n                                    generic_args = []; trait_refs = []},\\\\n                                  true));\\\\n                              safety = Types.Safe }\\\\n                            })};\\\\n                     hir_id = None;\\\\n                     span =\\\\n                     { Types.filename =\\\\n                       (Types.Real\\\\n                          (Types.LocalPath\\\\n                             \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                       hi = { Types.col = \\\\\\\"90\\\\\\\"; line = \\\\\\\"580\\\\\\\" };\\\\n                       lo = { Types.col = \\\\\\\"75\\\\\\\"; line = \\\\\\\"580\\\\\\\" } };\\\\n                     ty =\\\\n                     (Types.RawPtr\\\\n                        (Types.Adt {\\\\n                           def_id =\\\\n                           { Types.index = (27, 21403); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                             path =\\\\n                             [{ Types.data = (Types.TypeNs \\\\\\\"ssl_ctx_st\\\\\\\");\\\\n                                disambiguator = 0 }\\\\n                               ]\\\\n                             };\\\\n                           generic_args = []; trait_refs = []},\\\\n                         true))\\\\n                     }};\\\\n                 hir_id = (Some (\\\\\\\"276\\\\\\\", \\\\\\\"35\\\\\\\"));\\\\n                 span =\\\\n                 { Types.filename =\\\\n                   (Types.Real\\\\n                      (Types.LocalPath\\\\n                         \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                   hi = { Types.col = \\\\\\\"90\\\\\\\"; line = \\\\\\\"580\\\\\\\" };\\\\n                   lo = { Types.col = \\\\\\\"75\\\\\\\"; line = \\\\\\\"580\\\\\\\" } };\\\\n                 ty =\\\\n                 (Types.RawPtr\\\\n                    (Types.Adt {\\\\n                       def_id =\\\\n                       { Types.index = (27, 21403); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                         path =\\\\n                         [{ Types.data = (Types.TypeNs \\\\\\\"ssl_ctx_st\\\\\\\");\\\\n                            disambiguator = 0 }\\\\n                           ]\\\\n                         };\\\\n                       generic_args = []; trait_refs = []},\\\\n                     false))\\\\n                 }\\\\n                ];\\\\n              bounds_impls = [];\\\\n              fn_span =\\\\n              { Types.filename =\\\\n                (Types.Real\\\\n                   (Types.LocalPath\\\\n                      \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                hi = { Types.col = \\\\\\\"91\\\\\\\"; line = \\\\\\\"580\\\\\\\" };\\\\n                lo = { Types.col = \\\\\\\"42\\\\\\\"; line = \\\\\\\"580\\\\\\\" } };\\\\n              from_hir_call = true;\\\\n              fun' =\\\\n              { Types.attributes = [];\\\\n                contents =\\\\n                Types.GlobalName {\\\\n                  id =\\\\n                  { Types.index = (27, 18152); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                    path =\\\\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3176 };\\\\n                      { Types.data = (Types.ValueNs \\\\\\\"SSL_CTX_get_cert_store\\\\\\\");\\\\n                        disambiguator = 0 }\\\\n                      ]\\\\n                    }};\\\\n                hir_id = None;\\\\n                span =\\\\n                { Types.filename =\\\\n                  (Types.Real\\\\n                     (Types.LocalPath\\\\n                        \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n                  hi = { Types.col = \\\\\\\"74\\\\\\\"; line = \\\\\\\"580\\\\\\\" };\\\\n                  lo = { Types.col = \\\\\\\"42\\\\\\\"; line = \\\\\\\"580\\\\\\\" } };\\\\n                ty =\\\\n                (Types.Arrow\\\\n                   { Types.bound_vars = [];\\\\n                     value =\\\\n                     { Types.abi = Types.Abi {todo = \\\\\\\"C { unwind: false }\\\\\\\"};\\\\n                       c_variadic = false;\\\\n                       inputs =\\\\n                       [(Types.RawPtr\\\\n                           (Types.Adt {\\\\n                              def_id =\\\\n                              { Types.index = (27, 21403);\\\\n                                krate = \\\\\\\"openssl3\\\\\\\";\\\\n                                path =\\\\n                                [{ Types.data = (Types.TypeNs \\\\\\\"ssl_ctx_st\\\\\\\");\\\\n                                   disambiguator = 0 }\\\\n                                  ]\\\\n                                };\\\\n                              generic_args = []; trait_refs = []},\\\\n                            false))\\\\n                         ];\\\\n                       output =\\\\n                       (Types.RawPtr\\\\n                          (Types.Adt {\\\\n                             def_id =\\\\n                             { Types.index = (27, 21277); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                               path =\\\\n                               [{ Types.data = (Types.TypeNs \\\\\\\"x509_store_st\\\\\\\");\\\\n                                  disambiguator = 0 }\\\\n                                 ]\\\\n                               };\\\\n                             generic_args = []; trait_refs = []},\\\\n                           true));\\\\n                       safety = Types.Unsafe }\\\\n                     })\\\\n                };\\\\n              generic_args = []; trait = None;\\\\n              ty =\\\\n              (Types.Arrow\\\\n                 { Types.bound_vars = [];\\\\n                   value =\\\\n                   { Types.abi = Types.Abi {todo = \\\\\\\"C { unwind: false }\\\\\\\"};\\\\n                     c_variadic = false;\\\\n                     inputs =\\\\n                     [(Types.RawPtr\\\\n                         (Types.Adt {\\\\n                            def_id =\\\\n                            { Types.index = (27, 21403); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                              path =\\\\n                              [{ Types.data = (Types.TypeNs \\\\\\\"ssl_ctx_st\\\\\\\");\\\\n                                 disambiguator = 0 }\\\\n                                ]\\\\n                              };\\\\n                            generic_args = []; trait_refs = []},\\\\n                          false))\\\\n                       ];\\\\n                     output =\\\\n                     (Types.RawPtr\\\\n                        (Types.Adt {\\\\n                           def_id =\\\\n                           { Types.index = (27, 21277); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                             path =\\\\n                             [{ Types.data = (Types.TypeNs \\\\\\\"x509_store_st\\\\\\\");\\\\n                                disambiguator = 0 }\\\\n                               ]\\\\n                             };\\\\n                           generic_args = []; trait_refs = []},\\\\n                         true));\\\\n                     safety = Types.Unsafe }\\\\n                   })};\\\\n            hir_id = (Some (\\\\\\\"276\\\\\\\", \\\\\\\"31\\\\\\\"));\\\\n            span =\\\\n            { Types.filename =\\\\n              (Types.Real\\\\n                 (Types.LocalPath\\\\n                    \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n              hi = { Types.col = \\\\\\\"91\\\\\\\"; line = \\\\\\\"580\\\\\\\" };\\\\n              lo = { Types.col = \\\\\\\"42\\\\\\\"; line = \\\\\\\"580\\\\\\\" } };\\\\n            ty =\\\\n            (Types.RawPtr\\\\n               (Types.Adt {\\\\n                  def_id =\\\\n                  { Types.index = (27, 21277); krate = \\\\\\\"openssl3\\\\\\\";\\\\n                    path =\\\\n                    [{ Types.data = (Types.TypeNs \\\\\\\"x509_store_st\\\\\\\");\\\\n                       disambiguator = 0 }\\\\n                      ]\\\\n                    };\\\\n                  generic_args = []; trait_refs = []},\\\\n                true))\\\\n            });\\\\n    region_scope = { Types.data = Types.Node; id = \\\\\\\"40\\\\\\\" };\\\\n    safety_mode = Types.ExplicitUnsafe;\\\\n    span =\\\\n    { Types.filename =\\\\n      (Types.Real\\\\n         (Types.LocalPath \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n      hi = { Types.col = \\\\\\\"93\\\\\\\"; line = \\\\\\\"580\\\\\\\" };\\\\n      lo = { Types.col = \\\\\\\"33\\\\\\\"; line = \\\\\\\"580\\\\\\\" } };\\\\n    stmts = []; targeted_by_break = false};\\\\n  hir_id = (Some (\\\\\\\"276\\\\\\\", \\\\\\\"30\\\\\\\"));\\\\n  span =\\\\n  { Types.filename =\\\\n    (Types.Real\\\\n       (Types.LocalPath \\\\\\\"rust/implementation/openssl3/tunnel/context.rs\\\\\\\"));\\\\n    hi = { Types.col = \\\\\\\"93\\\\\\\"; line = \\\\\\\"580\\\\\\\" };\\\\n    lo = { Types.col = \\\\\\\"33\\\\\\\"; line = \\\\\\\"580\\\\\\\" } };\\\\n  ty =\\\\n  (Types.RawPtr\\\\n     (Types.Adt {\\\\n        def_id =\\\\n        { Types.index = (27, 21277); krate = \\\\\\\"openssl3\\\\\\\";\\\\n          path =\\\\n          [{ Types.data = (Types.TypeNs \\\\\\\"x509_store_st\\\\\\\"); disambiguator = 0 }\\\\n            ]\\\\n          };\\\\n        generic_args = []; trait_refs = []},\\\\n      true))\\\\n  }\\\",\\n    )\"))"

                <:
                Core.Option.t_Option (Core.Ptr.Non_null.t_NonNull Openssl3.t_x509_store_st))
              ((Sandwich_proto.Errors.SystemError_SYSTEMERROR_MEMORY
                  <:
                  Sandwich_proto.Errors.t_SystemError),
                "SSL_CTX does not have a certificate store"
                <:
                (Sandwich_proto.Errors.t_SystemError & string))
            <:
            Core.Result.t_Result (Core.Ptr.Non_null.t_NonNull Openssl3.t_x509_store_st)
              (Sandwich_proto.Errors.t_SystemError & string)
          with
          | Core.Result.Result_Ok store ->
            let _:Prims.unit =
              Rust_primitives.Hax.failure "(FunctionalizeLoops) something is not implemented yet.\nLoop without mutation?"
                "{\n        for certificate in (core::iter::traits::collect::f_into_iter(\n            core::slice::impl__iter::<\n                sandwich_api_proto::certificate::t_Certificate,\n            >(\n                core::ops::deref::f_deref(\n                    proj_sandwich_api_proto::verifiers::f_trusted_cas(x509_verifier),\n                ),\n            ),\n        )) {\n            (match (sandwich::tunnel::tls::support::configuration_read_certificate(\n                certificate,\n            )) {\n                core::result::Result_Ok(Tuple2(format, data_source)) => {\n                    (match (sandwich::implementation::openssl3::v_BIO_from_buffer::<\n                        sandwich::support::data_source::t_DataSource,\n                    >(data_source)) {\n                        core::result::Result_Ok(bio) => {\n                            core::ops::control_flow::ControlFlow_Continue({\n                                while core::ops::bit::Not::not(\n                                    sandwich::implementation::openssl3::is_BIO_eof(\n                                        sandwich::support::pimpl::impl_2__as_nonnull::<\n                                            openssl3::t_bio_st,\n                                        >(bio),\n                                    ),\n                                ) {\n                                    (match (sandwich::implementation::openssl3::v_X509_from_BIO(\n                                        lib_ctx,\n                                        sandwich::support::pimpl::impl_2__as_nonnull::<\n                                            openssl3::t_bio_st,\n                                        >(bio),\n                                        format,\n                                    )) {\n                                        core::result::Result_Ok(x509) => {\n                                            core::ops::control_flow::ControlFlow_Continue({\n                                                let _: int = {\n                                                    rust_primitives::hax::failure(\n                                                        \"(AST import) Unsafe blocks are not allowed.\",\n                                                        \"{ Types.attributes = [];\\n  contents =\\n  Types.Block {\\n    expr =\\n    (Some { Types.attributes = [];\\n            contents =\\n            Types.Call {\\n              args =\\n              [{ Types.attributes = [];\\n                 contents =\\n                 Types.Call {\\n                   args =\\n                   [{ Types.attributes = [];\\n                      contents =\\n                      Types.VarRef {\\n                        id =\\n                        { Types.id =\\n                          { Types.local_id = \\\"65\\\";\\n                            owner =\\n                            { Types.index = (0, 276); krate = \\\"sandwich\\\";\\n                              path =\\n                              [{ Types.data = (Types.TypeNs \\\"implementation\\\");\\n                                 disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"openssl3\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"tunnel\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = (Types.TypeNs \\\"context\\\");\\n                                  disambiguator = 0 };\\n                                { Types.data = Types.Impl; disambiguator = 4\\n                                  };\\n                                { Types.data =\\n                                  (Types.ValueNs\\n                                     \\\"fill_certificate_trust_store\\\");\\n                                  disambiguator = 0 }\\n                                ]\\n                              }\\n                            };\\n                          name = \\\"store\\\" }};\\n                      hir_id = (Some (\\\"276\\\", \\\"190\\\"));\\n                      span =\\n                      { Types.filename =\\n                        (Types.Real\\n                           (Types.LocalPath\\n                              \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n                        hi = { Types.col = \\\"55\\\"; line = \\\"593\\\" };\\n                        lo = { Types.col = \\\"50\\\"; line = \\\"593\\\" } };\\n                      ty =\\n                      Types.Adt {\\n                        def_id =\\n                        { Types.index = (2, 2222); krate = \\\"core\\\";\\n                          path =\\n                          [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                             disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                              disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                              disambiguator = 0 }\\n                            ]\\n                          };\\n                        generic_args =\\n                        [(Types.Type\\n                            Types.Adt {\\n                              def_id =\\n                              { Types.index = (27, 21277);\\n                                krate = \\\"openssl3\\\";\\n                                path =\\n                                [{ Types.data =\\n                                   (Types.TypeNs \\\"x509_store_st\\\");\\n                                   disambiguator = 0 }\\n                                  ]\\n                                };\\n                              generic_args = []; trait_refs = []})\\n                          ];\\n                        trait_refs = []}\\n                      }\\n                     ];\\n                   bounds_impls = [];\\n                   fn_span =\\n                   { Types.filename =\\n                     (Types.Real\\n                        (Types.LocalPath\\n                           \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n                     hi = { Types.col = \\\"64\\\"; line = \\\"593\\\" };\\n                     lo = { Types.col = \\\"56\\\"; line = \\\"593\\\" } };\\n                   from_hir_call = true;\\n                   fun' =\\n                   { Types.attributes = [];\\n                     contents =\\n                     Types.GlobalName {\\n                       id =\\n                       { Types.index = (2, 2245); krate = \\\"core\\\";\\n                         path =\\n                         [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                            disambiguator = 0 };\\n                           { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                             disambiguator = 0 };\\n                           { Types.data = Types.Impl; disambiguator = 3 };\\n                           { Types.data = (Types.ValueNs \\\"as_ptr\\\");\\n                             disambiguator = 0 }\\n                           ]\\n                         }};\\n                     hir_id = None;\\n                     span =\\n                     { Types.filename =\\n                       (Types.Real\\n                          (Types.LocalPath\\n                             \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n                       hi = { Types.col = \\\"62\\\"; line = \\\"593\\\" };\\n                       lo = { Types.col = \\\"56\\\"; line = \\\"593\\\" } };\\n                     ty =\\n                     (Types.Arrow\\n                        { Types.bound_vars = [];\\n                          value =\\n                          { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                            c_variadic = false;\\n                            inputs =\\n                            [Types.Adt {\\n                               def_id =\\n                               { Types.index = (2, 2222); krate = \\\"core\\\";\\n                                 path =\\n                                 [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                    disambiguator = 0 };\\n                                   { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                                     disambiguator = 0 };\\n                                   { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                                     disambiguator = 0 }\\n                                   ]\\n                                 };\\n                               generic_args =\\n                               [(Types.Type\\n                                   Types.Adt {\\n                                     def_id =\\n                                     { Types.index = (27, 21277);\\n                                       krate = \\\"openssl3\\\";\\n                                       path =\\n                                       [{ Types.data =\\n                                          (Types.TypeNs \\\"x509_store_st\\\");\\n                                          disambiguator = 0 }\\n                                         ]\\n                                       };\\n                                     generic_args = []; trait_refs = []})\\n                                 ];\\n                               trait_refs = []}\\n                              ];\\n                            output =\\n                            (Types.RawPtr\\n                               (Types.Adt {\\n                                  def_id =\\n                                  { Types.index = (27, 21277);\\n                                    krate = \\\"openssl3\\\";\\n                                    path =\\n                                    [{ Types.data =\\n                                       (Types.TypeNs \\\"x509_store_st\\\");\\n                                       disambiguator = 0 }\\n                                      ]\\n                                    };\\n                                  generic_args = []; trait_refs = []},\\n                                true));\\n                            safety = Types.Safe }\\n                          })\\n                     };\\n                   generic_args =\\n                   [(Types.Type\\n                       Types.Adt {\\n                         def_id =\\n                         { Types.index = (27, 21277); krate = \\\"openssl3\\\";\\n                           path =\\n                           [{ Types.data = (Types.TypeNs \\\"x509_store_st\\\");\\n                              disambiguator = 0 }\\n                             ]\\n                           };\\n                         generic_args = []; trait_refs = []})\\n                     ];\\n                   trait = None;\\n                   ty =\\n                   (Types.Arrow\\n                      { Types.bound_vars = [];\\n                        value =\\n                        { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                          c_variadic = false;\\n                          inputs =\\n                          [Types.Adt {\\n                             def_id =\\n                             { Types.index = (2, 2222); krate = \\\"core\\\";\\n                               path =\\n                               [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                  disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                                   disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                                   disambiguator = 0 }\\n                                 ]\\n                               };\\n                             generic_args =\\n                             [(Types.Type\\n                                 Types.Adt {\\n                                   def_id =\\n                                   { Types.index = (27, 21277);\\n                                     krate = \\\"openssl3\\\";\\n                                     path =\\n                                     [{ Types.data =\\n                                        (Types.TypeNs \\\"x509_store_st\\\");\\n                                        disambiguator = 0 }\\n                                       ]\\n                                     };\\n                                   generic_args = []; trait_refs = []})\\n                               ];\\n                             trait_refs = []}\\n                            ];\\n                          output =\\n                          (Types.RawPtr\\n                             (Types.Adt {\\n                                def_id =\\n                                { Types.index = (27, 21277);\\n                                  krate = \\\"openssl3\\\";\\n                                  path =\\n                                  [{ Types.data =\\n                                     (Types.TypeNs \\\"x509_store_st\\\");\\n                                     disambiguator = 0 }\\n                                    ]\\n                                  };\\n                                generic_args = []; trait_refs = []},\\n                              true));\\n                          safety = Types.Safe }\\n                        })};\\n                 hir_id = (Some (\\\"276\\\", \\\"188\\\"));\\n                 span =\\n                 { Types.filename =\\n                   (Types.Real\\n                      (Types.LocalPath\\n                         \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n                   hi = { Types.col = \\\"64\\\"; line = \\\"593\\\" };\\n                   lo = { Types.col = \\\"50\\\"; line = \\\"593\\\" } };\\n                 ty =\\n                 (Types.RawPtr\\n                    (Types.Adt {\\n                       def_id =\\n                       { Types.index = (27, 21277); krate = \\\"openssl3\\\";\\n                         path =\\n                         [{ Types.data = (Types.TypeNs \\\"x509_store_st\\\");\\n                            disambiguator = 0 }\\n                           ]\\n                         };\\n                       generic_args = []; trait_refs = []},\\n                     true))\\n                 };\\n                { Types.attributes = [];\\n                  contents =\\n                  Types.Call {\\n                    args =\\n                    [{ Types.attributes = [];\\n                       contents =\\n                       Types.Call {\\n                         args =\\n                         [{ Types.attributes = [];\\n                            contents =\\n                            Types.Borrow {\\n                              arg =\\n                              { Types.attributes = [];\\n                                contents =\\n                                Types.VarRef {\\n                                  id =\\n                                  { Types.id =\\n                                    { Types.local_id = \\\"182\\\";\\n                                      owner =\\n                                      { Types.index = (0, 276);\\n                                        krate = \\\"sandwich\\\";\\n                                        path =\\n                                        [{ Types.data =\\n                                           (Types.TypeNs \\\"implementation\\\");\\n                                           disambiguator = 0 };\\n                                          { Types.data =\\n                                            (Types.TypeNs \\\"openssl3\\\");\\n                                            disambiguator = 0 };\\n                                          { Types.data =\\n                                            (Types.TypeNs \\\"tunnel\\\");\\n                                            disambiguator = 0 };\\n                                          { Types.data =\\n                                            (Types.TypeNs \\\"context\\\");\\n                                            disambiguator = 0 };\\n                                          { Types.data = Types.Impl;\\n                                            disambiguator = 4 };\\n                                          { Types.data =\\n                                            (Types.ValueNs\\n                                               \\\"fill_certificate_trust_store\\\");\\n                                            disambiguator = 0 }\\n                                          ]\\n                                        }\\n                                      };\\n                                    name = \\\"x509\\\" }};\\n                                hir_id = None;\\n                                span =\\n                                { Types.filename =\\n                                  (Types.Real\\n                                     (Types.LocalPath\\n                                        \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n                                  hi = { Types.col = \\\"70\\\"; line = \\\"593\\\" };\\n                                  lo = { Types.col = \\\"66\\\"; line = \\\"593\\\" } };\\n                                ty =\\n                                Types.Adt {\\n                                  def_id =\\n                                  { Types.index = (0, 608);\\n                                    krate = \\\"sandwich\\\";\\n                                    path =\\n                                    [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                                       disambiguator = 0 };\\n                                      { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                                        disambiguator = 0 };\\n                                      { Types.data = (Types.TypeNs \\\"Pimpl\\\");\\n                                        disambiguator = 0 }\\n                                      ]\\n                                    };\\n                                  generic_args =\\n                                  [(Types.Lifetime\\n                                      { Types.kind = Types.ReErased });\\n                                    (Types.Type\\n                                       Types.Adt {\\n                                         def_id =\\n                                         { Types.index = (27, 21223);\\n                                           krate = \\\"openssl3\\\";\\n                                           path =\\n                                           [{ Types.data =\\n                                              (Types.TypeNs \\\"x509_st\\\");\\n                                              disambiguator = 0 }\\n                                             ]\\n                                           };\\n                                         generic_args = []; trait_refs = []})\\n                                    ];\\n                                  trait_refs =\\n                                  [{ Types.args = [];\\n                                     impl =\\n                                     Types.Builtin {\\n                                       trait =\\n                                       { Types.def_id =\\n                                         { Types.index = (2, 26413);\\n                                           krate = \\\"core\\\";\\n                                           path =\\n                                           [{ Types.data =\\n                                              (Types.TypeNs \\\"marker\\\");\\n                                              disambiguator = 0 };\\n                                             { Types.data =\\n                                               (Types.TypeNs \\\"Sized\\\");\\n                                               disambiguator = 0 }\\n                                             ]\\n                                           };\\n                                         generic_args =\\n                                         [(Types.Type\\n                                             Types.Adt {\\n                                               def_id =\\n                                               { Types.index = (27, 21223);\\n                                                 krate = \\\"openssl3\\\";\\n                                                 path =\\n                                                 [{ Types.data =\\n                                                    (Types.TypeNs \\\"x509_st\\\");\\n                                                    disambiguator = 0 }\\n                                                   ]\\n                                                 };\\n                                               generic_args = [];\\n                                               trait_refs = []})\\n                                           ]\\n                                         }};\\n                                     trait =\\n                                     { Types.def_id =\\n                                       { Types.index = (2, 26413);\\n                                         krate = \\\"core\\\";\\n                                         path =\\n                                         [{ Types.data =\\n                                            (Types.TypeNs \\\"marker\\\");\\n                                            disambiguator = 0 };\\n                                           { Types.data =\\n                                             (Types.TypeNs \\\"Sized\\\");\\n                                             disambiguator = 0 }\\n                                           ]\\n                                         };\\n                                       generic_args =\\n                                       [(Types.Type\\n                                           Types.Adt {\\n                                             def_id =\\n                                             { Types.index = (27, 21223);\\n                                               krate = \\\"openssl3\\\";\\n                                               path =\\n                                               [{ Types.data =\\n                                                  (Types.TypeNs \\\"x509_st\\\");\\n                                                  disambiguator = 0 }\\n                                                 ]\\n                                               };\\n                                             generic_args = [];\\n                                             trait_refs = []})\\n                                         ]\\n                                       }\\n                                     }\\n                                    ]}\\n                                };\\n                              borrow_kind = Types.Shared};\\n                            hir_id = (Some (\\\"276\\\", \\\"196\\\"));\\n                            span =\\n                            { Types.filename =\\n                              (Types.Real\\n                                 (Types.LocalPath\\n                                    \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n                              hi = { Types.col = \\\"70\\\"; line = \\\"593\\\" };\\n                              lo = { Types.col = \\\"66\\\"; line = \\\"593\\\" } };\\n                            ty =\\n                            (Types.Ref\\n                               ({ Types.kind = Types.ReErased },\\n                                Types.Adt {\\n                                  def_id =\\n                                  { Types.index = (0, 608);\\n                                    krate = \\\"sandwich\\\";\\n                                    path =\\n                                    [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                                       disambiguator = 0 };\\n                                      { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                                        disambiguator = 0 };\\n                                      { Types.data = (Types.TypeNs \\\"Pimpl\\\");\\n                                        disambiguator = 0 }\\n                                      ]\\n                                    };\\n                                  generic_args =\\n                                  [(Types.Lifetime\\n                                      { Types.kind = Types.ReErased });\\n                                    (Types.Type\\n                                       Types.Adt {\\n                                         def_id =\\n                                         { Types.index = (27, 21223);\\n                                           krate = \\\"openssl3\\\";\\n                                           path =\\n                                           [{ Types.data =\\n                                              (Types.TypeNs \\\"x509_st\\\");\\n                                              disambiguator = 0 }\\n                                             ]\\n                                           };\\n                                         generic_args = []; trait_refs = []})\\n                                    ];\\n                                  trait_refs =\\n                                  [{ Types.args = [];\\n                                     impl =\\n                                     Types.Builtin {\\n                                       trait =\\n                                       { Types.def_id =\\n                                         { Types.index = (2, 26413);\\n                                           krate = \\\"core\\\";\\n                                           path =\\n                                           [{ Types.data =\\n                                              (Types.TypeNs \\\"marker\\\");\\n                                              disambiguator = 0 };\\n                                             { Types.data =\\n                                               (Types.TypeNs \\\"Sized\\\");\\n                                               disambiguator = 0 }\\n                                             ]\\n                                           };\\n                                         generic_args =\\n                                         [(Types.Type\\n                                             Types.Adt {\\n                                               def_id =\\n                                               { Types.index = (27, 21223);\\n                                                 krate = \\\"openssl3\\\";\\n                                                 path =\\n                                                 [{ Types.data =\\n                                                    (Types.TypeNs \\\"x509_st\\\");\\n                                                    disambiguator = 0 }\\n                                                   ]\\n                                                 };\\n                                               generic_args = [];\\n                                               trait_refs = []})\\n                                           ]\\n                                         }};\\n                                     trait =\\n                                     { Types.def_id =\\n                                       { Types.index = (2, 26413);\\n                                         krate = \\\"core\\\";\\n                                         path =\\n                                         [{ Types.data =\\n                                            (Types.TypeNs \\\"marker\\\");\\n                                            disambiguator = 0 };\\n                                           { Types.data =\\n                                             (Types.TypeNs \\\"Sized\\\");\\n                                             disambiguator = 0 }\\n                                           ]\\n                                         };\\n                                       generic_args =\\n                                       [(Types.Type\\n                                           Types.Adt {\\n                                             def_id =\\n                                             { Types.index = (27, 21223);\\n                                               krate = \\\"openssl3\\\";\\n                                               path =\\n                                               [{ Types.data =\\n                                                  (Types.TypeNs \\\"x509_st\\\");\\n                                                  disambiguator = 0 }\\n                                                 ]\\n                                               };\\n                                             generic_args = [];\\n                                             trait_refs = []})\\n                                         ]\\n                                       }\\n                                     }\\n                                    ]},\\n                                false))\\n                            }\\n                           ];\\n                         bounds_impls = [];\\n                         fn_span =\\n                         { Types.filename =\\n                           (Types.Real\\n                              (Types.LocalPath\\n                                 \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n                           hi = { Types.col = \\\"83\\\"; line = \\\"593\\\" };\\n                           lo = { Types.col = \\\"71\\\"; line = \\\"593\\\" } };\\n                         from_hir_call = true;\\n                         fun' =\\n                         { Types.attributes = [];\\n                           contents =\\n                           Types.GlobalName {\\n                             id =\\n                             { Types.index = (0, 624); krate = \\\"sandwich\\\";\\n                               path =\\n                               [{ Types.data = (Types.TypeNs \\\"support\\\");\\n                                  disambiguator = 0 };\\n                                 { Types.data = (Types.TypeNs \\\"pimpl\\\");\\n                                   disambiguator = 0 };\\n                                 { Types.data = Types.Impl; disambiguator = 2\\n                                   };\\n                                 { Types.data = (Types.ValueNs \\\"as_nonnull\\\");\\n                                   disambiguator = 0 }\\n                                 ]\\n                               }};\\n                           hir_id = None;\\n                           span =\\n                           { Types.filename =\\n                             (Types.Real\\n                                (Types.LocalPath\\n                                   \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n                             hi = { Types.col = \\\"81\\\"; line = \\\"593\\\" };\\n                             lo = { Types.col = \\\"71\\\"; line = \\\"593\\\" } };\\n                           ty =\\n                           (Types.Arrow\\n                              { Types.bound_vars =\\n                                [(Types.Region\\n                                    (Types.BrNamed\\n                                       ({ Types.index = (0, 1658);\\n                                          krate = \\\"sandwich\\\";\\n                                          path =\\n                                          [{ Types.data =\\n                                             (Types.TypeNs \\\"support\\\");\\n                                             disambiguator = 0 };\\n                                            { Types.data =\\n                                              (Types.TypeNs \\\"pimpl\\\");\\n                                              disambiguator = 0 };\\n                                            { Types.data = Types.Impl;\\n                                              disambiguator = 2 };\\n                                            { Types.data =\\n                                              (Types.ValueNs \\\"as_nonnull\\\");\\n                                              disambiguator = 0 };\\n                                            { Types.data =\\n                                              (Types.LifetimeNs \\\"'_\\\");\\n                                              disambiguator = 0 }\\n                                            ]\\n                                          },\\n                                        \\\"'_\\\")))\\n                                  ];\\n                                value =\\n                                { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                                  c_variadic = false;\\n                                  inputs =\\n                                  [(Types.Ref\\n                                      ({ Types.kind =\\n                                         (Types.ReBound\\n                                            (\\\"0\\\",\\n                                             { Types.kind =\\n                                               (Types.BrNamed\\n                                                  ({ Types.index = (0, 1658);\\n                                                     krate = \\\"sandwich\\\";\\n                                                     path =\\n                                                     [{ Types.data =\\n                                                        (Types.TypeNs\\n                                                           \\\"support\\\");\\n                                                        disambiguator = 0 };\\n                                                       { Types.data =\\n                                                         (Types.TypeNs\\n                                                            \\\"pimpl\\\");\\n                                                         disambiguator = 0 };\\n                                                       { Types.data =\\n                                                         Types.Impl;\\n                                                         disambiguator = 2 };\\n                                                       { Types.data =\\n                                                         (Types.ValueNs\\n                                                            \\\"as_nonnull\\\");\\n                                                         disambiguator = 0 };\\n                                                       { Types.data =\\n                                                         (Types.LifetimeNs\\n                                                            \\\"'_\\\");\\n                                                         disambiguator = 0 }\\n                                                       ]\\n                                                     },\\n                                                   \\\"'_\\\"));\\n                                               var = \\\"0\\\" }))\\n                                         },\\n                                       Types.Adt {\\n                                         def_id =\\n                                         { Types.index = (0, 608);\\n                                           krate = \\\"sandwich\\\";\\n                                           path =\\n                                           [{ Types.data =\\n                                              (Types.TypeNs \\\"support\\\");\\n                                              disambiguator = 0 };\\n                                             { Types.data =\\n                                               (Types.TypeNs \\\"pimpl\\\");\\n                                               disambiguator = 0 };\\n                                             { Types.data =\\n                                               (Types.TypeNs \\\"Pimpl\\\");\\n                                               disambiguator = 0 }\\n                                             ]\\n                                           };\\n                                         generic_args =\\n                                         [(Types.Lifetime\\n                                             { Types.kind = Types.ReErased });\\n                                           (Types.Type\\n                                              Types.Adt {\\n                                                def_id =\\n                                                { Types.index = (27, 21223);\\n                                                  krate = \\\"openssl3\\\";\\n                                                  path =\\n                                                  [{ Types.data =\\n                                                     (Types.TypeNs \\\"x509_st\\\");\\n                                                     disambiguator = 0 }\\n                                                    ]\\n                                                  };\\n                                                generic_args = [];\\n                                                trait_refs = []})\\n                                           ];\\n                                         trait_refs =\\n                                         [{ Types.args = [];\\n                                            impl =\\n                                            Types.Builtin {\\n                                              trait =\\n                                              { Types.def_id =\\n                                                { Types.index = (2, 26413);\\n                                                  krate = \\\"core\\\";\\n                                                  path =\\n                                                  [{ Types.data =\\n                                                     (Types.TypeNs \\\"marker\\\");\\n                                                     disambiguator = 0 };\\n                                                    { Types.data =\\n                                                      (Types.TypeNs \\\"Sized\\\");\\n                                                      disambiguator = 0 }\\n                                                    ]\\n                                                  };\\n                                                generic_args =\\n                                                [(Types.Type\\n                                                    Types.Adt {\\n                                                      def_id =\\n                                                      { Types.index =\\n                                                        (27, 21223);\\n                                                        krate = \\\"openssl3\\\";\\n                                                        path =\\n                                                        [{ Types.data =\\n                                                           (Types.TypeNs\\n                                                              \\\"x509_st\\\");\\n                                                           disambiguator = 0\\n                                                           }\\n                                                          ]\\n                                                        };\\n                                                      generic_args = [];\\n                                                      trait_refs = []})\\n                                                  ]\\n                                                }};\\n                                            trait =\\n                                            { Types.def_id =\\n                                              { Types.index = (2, 26413);\\n                                                krate = \\\"core\\\";\\n                                                path =\\n                                                [{ Types.data =\\n                                                   (Types.TypeNs \\\"marker\\\");\\n                                                   disambiguator = 0 };\\n                                                  { Types.data =\\n                                                    (Types.TypeNs \\\"Sized\\\");\\n                                                    disambiguator = 0 }\\n                                                  ]\\n                                                };\\n                                              generic_args =\\n                                              [(Types.Type\\n                                                  Types.Adt {\\n                                                    def_id =\\n                                                    { Types.index =\\n                                                      (27, 21223);\\n                                                      krate = \\\"openssl3\\\";\\n                                                      path =\\n                                                      [{ Types.data =\\n                                                         (Types.TypeNs\\n                                                            \\\"x509_st\\\");\\n                                                         disambiguator = 0 }\\n                                                        ]\\n                                                      };\\n                                                    generic_args = [];\\n                                                    trait_refs = []})\\n                                                ]\\n                                              }\\n                                            }\\n                                           ]},\\n                                       false))\\n                                    ];\\n                                  output =\\n                                  Types.Adt {\\n                                    def_id =\\n                                    { Types.index = (2, 2222);\\n                                      krate = \\\"core\\\";\\n                                      path =\\n                                      [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                         disambiguator = 0 };\\n                                        { Types.data =\\n                                          (Types.TypeNs \\\"non_null\\\");\\n                                          disambiguator = 0 };\\n                                        { Types.data =\\n                                          (Types.TypeNs \\\"NonNull\\\");\\n                                          disambiguator = 0 }\\n                                        ]\\n                                      };\\n                                    generic_args =\\n                                    [(Types.Type\\n                                        Types.Adt {\\n                                          def_id =\\n                                          { Types.index = (27, 21223);\\n                                            krate = \\\"openssl3\\\";\\n                                            path =\\n                                            [{ Types.data =\\n                                               (Types.TypeNs \\\"x509_st\\\");\\n                                               disambiguator = 0 }\\n                                              ]\\n                                            };\\n                                          generic_args = []; trait_refs = []})\\n                                      ];\\n                                    trait_refs = []};\\n                                  safety = Types.Safe }\\n                                })\\n                           };\\n                         generic_args =\\n                         [(Types.Lifetime { Types.kind = Types.ReErased });\\n                           (Types.Type\\n                              Types.Adt {\\n                                def_id =\\n                                { Types.index = (27, 21223);\\n                                  krate = \\\"openssl3\\\";\\n                                  path =\\n                                  [{ Types.data = (Types.TypeNs \\\"x509_st\\\");\\n                                     disambiguator = 0 }\\n                                    ]\\n                                  };\\n                                generic_args = []; trait_refs = []})\\n                           ];\\n                         trait = None;\\n                         ty =\\n                         (Types.Arrow\\n                            { Types.bound_vars =\\n                              [(Types.Region\\n                                  (Types.BrNamed\\n                                     ({ Types.index = (0, 1658);\\n                                        krate = \\\"sandwich\\\";\\n                                        path =\\n                                        [{ Types.data =\\n                                           (Types.TypeNs \\\"support\\\");\\n                                           disambiguator = 0 };\\n                                          { Types.data =\\n                                            (Types.TypeNs \\\"pimpl\\\");\\n                                            disambiguator = 0 };\\n                                          { Types.data = Types.Impl;\\n                                            disambiguator = 2 };\\n                                          { Types.data =\\n                                            (Types.ValueNs \\\"as_nonnull\\\");\\n                                            disambiguator = 0 };\\n                                          { Types.data =\\n                                            (Types.LifetimeNs \\\"'_\\\");\\n                                            disambiguator = 0 }\\n                                          ]\\n                                        },\\n                                      \\\"'_\\\")))\\n                                ];\\n                              value =\\n                              { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                                c_variadic = false;\\n                                inputs =\\n                                [(Types.Ref\\n                                    ({ Types.kind =\\n                                       (Types.ReBound\\n                                          (\\\"0\\\",\\n                                           { Types.kind =\\n                                             (Types.BrNamed\\n                                                ({ Types.index = (0, 1658);\\n                                                   krate = \\\"sandwich\\\";\\n                                                   path =\\n                                                   [{ Types.data =\\n                                                      (Types.TypeNs \\\"support\\\");\\n                                                      disambiguator = 0 };\\n                                                     { Types.data =\\n                                                       (Types.TypeNs \\\"pimpl\\\");\\n                                                       disambiguator = 0 };\\n                                                     { Types.data =\\n                                                       Types.Impl;\\n                                                       disambiguator = 2 };\\n                                                     { Types.data =\\n                                                       (Types.ValueNs\\n                                                          \\\"as_nonnull\\\");\\n                                                       disambiguator = 0 };\\n                                                     { Types.data =\\n                                                       (Types.LifetimeNs \\\"'_\\\");\\n                                                       disambiguator = 0 }\\n                                                     ]\\n                                                   },\\n                                                 \\\"'_\\\"));\\n                                             var = \\\"0\\\" }))\\n                                       },\\n                                     Types.Adt {\\n                                       def_id =\\n                                       { Types.index = (0, 608);\\n                                         krate = \\\"sandwich\\\";\\n                                         path =\\n                                         [{ Types.data =\\n                                            (Types.TypeNs \\\"support\\\");\\n                                            disambiguator = 0 };\\n                                           { Types.data =\\n                                             (Types.TypeNs \\\"pimpl\\\");\\n                                             disambiguator = 0 };\\n                                           { Types.data =\\n                                             (Types.TypeNs \\\"Pimpl\\\");\\n                                             disambiguator = 0 }\\n                                           ]\\n                                         };\\n                                       generic_args =\\n                                       [(Types.Lifetime\\n                                           { Types.kind = Types.ReErased });\\n                                         (Types.Type\\n                                            Types.Adt {\\n                                              def_id =\\n                                              { Types.index = (27, 21223);\\n                                                krate = \\\"openssl3\\\";\\n                                                path =\\n                                                [{ Types.data =\\n                                                   (Types.TypeNs \\\"x509_st\\\");\\n                                                   disambiguator = 0 }\\n                                                  ]\\n                                                };\\n                                              generic_args = [];\\n                                              trait_refs = []})\\n                                         ];\\n                                       trait_refs =\\n                                       [{ Types.args = [];\\n                                          impl =\\n                                          Types.Builtin {\\n                                            trait =\\n                                            { Types.def_id =\\n                                              { Types.index = (2, 26413);\\n                                                krate = \\\"core\\\";\\n                                                path =\\n                                                [{ Types.data =\\n                                                   (Types.TypeNs \\\"marker\\\");\\n                                                   disambiguator = 0 };\\n                                                  { Types.data =\\n                                                    (Types.TypeNs \\\"Sized\\\");\\n                                                    disambiguator = 0 }\\n                                                  ]\\n                                                };\\n                                              generic_args =\\n                                              [(Types.Type\\n                                                  Types.Adt {\\n                                                    def_id =\\n                                                    { Types.index =\\n                                                      (27, 21223);\\n                                                      krate = \\\"openssl3\\\";\\n                                                      path =\\n                                                      [{ Types.data =\\n                                                         (Types.TypeNs\\n                                                            \\\"x509_st\\\");\\n                                                         disambiguator = 0 }\\n                                                        ]\\n                                                      };\\n                                                    generic_args = [];\\n                                                    trait_refs = []})\\n                                                ]\\n                                              }};\\n                                          trait =\\n                                          { Types.def_id =\\n                                            { Types.index = (2, 26413);\\n                                              krate = \\\"core\\\";\\n                                              path =\\n                                              [{ Types.data =\\n                                                 (Types.TypeNs \\\"marker\\\");\\n                                                 disambiguator = 0 };\\n                                                { Types.data =\\n                                                  (Types.TypeNs \\\"Sized\\\");\\n                                                  disambiguator = 0 }\\n                                                ]\\n                                              };\\n                                            generic_args =\\n                                            [(Types.Type\\n                                                Types.Adt {\\n                                                  def_id =\\n                                                  { Types.index = (27, 21223);\\n                                                    krate = \\\"openssl3\\\";\\n                                                    path =\\n                                                    [{ Types.data =\\n                                                       (Types.TypeNs\\n                                                          \\\"x509_st\\\");\\n                                                       disambiguator = 0 }\\n                                                      ]\\n                                                    };\\n                                                  generic_args = [];\\n                                                  trait_refs = []})\\n                                              ]\\n                                            }\\n                                          }\\n                                         ]},\\n                                     false))\\n                                  ];\\n                                output =\\n                                Types.Adt {\\n                                  def_id =\\n                                  { Types.index = (2, 2222); krate = \\\"core\\\";\\n                                    path =\\n                                    [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                       disambiguator = 0 };\\n                                      { Types.data =\\n                                        (Types.TypeNs \\\"non_null\\\");\\n                                        disambiguator = 0 };\\n                                      { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                                        disambiguator = 0 }\\n                                      ]\\n                                    };\\n                                  generic_args =\\n                                  [(Types.Type\\n                                      Types.Adt {\\n                                        def_id =\\n                                        { Types.index = (27, 21223);\\n                                          krate = \\\"openssl3\\\";\\n                                          path =\\n                                          [{ Types.data =\\n                                             (Types.TypeNs \\\"x509_st\\\");\\n                                             disambiguator = 0 }\\n                                            ]\\n                                          };\\n                                        generic_args = []; trait_refs = []})\\n                                    ];\\n                                  trait_refs = []};\\n                                safety = Types.Safe }\\n                              })};\\n                       hir_id = (Some (\\\"276\\\", \\\"194\\\"));\\n                       span =\\n                       { Types.filename =\\n                         (Types.Real\\n                            (Types.LocalPath\\n                               \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n                         hi = { Types.col = \\\"83\\\"; line = \\\"593\\\" };\\n                         lo = { Types.col = \\\"66\\\"; line = \\\"593\\\" } };\\n                       ty =\\n                       Types.Adt {\\n                         def_id =\\n                         { Types.index = (2, 2222); krate = \\\"core\\\";\\n                           path =\\n                           [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                              disambiguator = 0 };\\n                             { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                               disambiguator = 0 };\\n                             { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                               disambiguator = 0 }\\n                             ]\\n                           };\\n                         generic_args =\\n                         [(Types.Type\\n                             Types.Adt {\\n                               def_id =\\n                               { Types.index = (27, 21223);\\n                                 krate = \\\"openssl3\\\";\\n                                 path =\\n                                 [{ Types.data = (Types.TypeNs \\\"x509_st\\\");\\n                                    disambiguator = 0 }\\n                                   ]\\n                                 };\\n                               generic_args = []; trait_refs = []})\\n                           ];\\n                         trait_refs = []}\\n                       }\\n                      ];\\n                    bounds_impls = [];\\n                    fn_span =\\n                    { Types.filename =\\n                      (Types.Real\\n                         (Types.LocalPath\\n                            \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n                      hi = { Types.col = \\\"92\\\"; line = \\\"593\\\" };\\n                      lo = { Types.col = \\\"84\\\"; line = \\\"593\\\" } };\\n                    from_hir_call = true;\\n                    fun' =\\n                    { Types.attributes = [];\\n                      contents =\\n                      Types.GlobalName {\\n                        id =\\n                        { Types.index = (2, 2245); krate = \\\"core\\\";\\n                          path =\\n                          [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                             disambiguator = 0 };\\n                            { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                              disambiguator = 0 };\\n                            { Types.data = Types.Impl; disambiguator = 3 };\\n                            { Types.data = (Types.ValueNs \\\"as_ptr\\\");\\n                              disambiguator = 0 }\\n                            ]\\n                          }};\\n                      hir_id = None;\\n                      span =\\n                      { Types.filename =\\n                        (Types.Real\\n                           (Types.LocalPath\\n                              \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n                        hi = { Types.col = \\\"90\\\"; line = \\\"593\\\" };\\n                        lo = { Types.col = \\\"84\\\"; line = \\\"593\\\" } };\\n                      ty =\\n                      (Types.Arrow\\n                         { Types.bound_vars = [];\\n                           value =\\n                           { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                             c_variadic = false;\\n                             inputs =\\n                             [Types.Adt {\\n                                def_id =\\n                                { Types.index = (2, 2222); krate = \\\"core\\\";\\n                                  path =\\n                                  [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                     disambiguator = 0 };\\n                                    { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                                      disambiguator = 0 };\\n                                    { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                                      disambiguator = 0 }\\n                                    ]\\n                                  };\\n                                generic_args =\\n                                [(Types.Type\\n                                    Types.Adt {\\n                                      def_id =\\n                                      { Types.index = (27, 21223);\\n                                        krate = \\\"openssl3\\\";\\n                                        path =\\n                                        [{ Types.data =\\n                                           (Types.TypeNs \\\"x509_st\\\");\\n                                           disambiguator = 0 }\\n                                          ]\\n                                        };\\n                                      generic_args = []; trait_refs = []})\\n                                  ];\\n                                trait_refs = []}\\n                               ];\\n                             output =\\n                             (Types.RawPtr\\n                                (Types.Adt {\\n                                   def_id =\\n                                   { Types.index = (27, 21223);\\n                                     krate = \\\"openssl3\\\";\\n                                     path =\\n                                     [{ Types.data = (Types.TypeNs \\\"x509_st\\\");\\n                                        disambiguator = 0 }\\n                                       ]\\n                                     };\\n                                   generic_args = []; trait_refs = []},\\n                                 true));\\n                             safety = Types.Safe }\\n                           })\\n                      };\\n                    generic_args =\\n                    [(Types.Type\\n                        Types.Adt {\\n                          def_id =\\n                          { Types.index = (27, 21223); krate = \\\"openssl3\\\";\\n                            path =\\n                            [{ Types.data = (Types.TypeNs \\\"x509_st\\\");\\n                               disambiguator = 0 }\\n                              ]\\n                            };\\n                          generic_args = []; trait_refs = []})\\n                      ];\\n                    trait = None;\\n                    ty =\\n                    (Types.Arrow\\n                       { Types.bound_vars = [];\\n                         value =\\n                         { Types.abi = Types.Abi {todo = \\\"Rust\\\"};\\n                           c_variadic = false;\\n                           inputs =\\n                           [Types.Adt {\\n                              def_id =\\n                              { Types.index = (2, 2222); krate = \\\"core\\\";\\n                                path =\\n                                [{ Types.data = (Types.TypeNs \\\"ptr\\\");\\n                                   disambiguator = 0 };\\n                                  { Types.data = (Types.TypeNs \\\"non_null\\\");\\n                                    disambiguator = 0 };\\n                                  { Types.data = (Types.TypeNs \\\"NonNull\\\");\\n                                    disambiguator = 0 }\\n                                  ]\\n                                };\\n                              generic_args =\\n                              [(Types.Type\\n                                  Types.Adt {\\n                                    def_id =\\n                                    { Types.index = (27, 21223);\\n                                      krate = \\\"openssl3\\\";\\n                                      path =\\n                                      [{ Types.data =\\n                                         (Types.TypeNs \\\"x509_st\\\");\\n                                         disambiguator = 0 }\\n                                        ]\\n                                      };\\n                                    generic_args = []; trait_refs = []})\\n                                ];\\n                              trait_refs = []}\\n                             ];\\n                           output =\\n                           (Types.RawPtr\\n                              (Types.Adt {\\n                                 def_id =\\n                                 { Types.index = (27, 21223);\\n                                   krate = \\\"openssl3\\\";\\n                                   path =\\n                                   [{ Types.data = (Types.TypeNs \\\"x509_st\\\");\\n                                      disambiguator = 0 }\\n                                     ]\\n                                   };\\n                                 generic_args = []; trait_refs = []},\\n                               true));\\n                           safety = Types.Safe }\\n                         })};\\n                  hir_id = (Some (\\\"276\\\", \\\"192\\\"));\\n                  span =\\n                  { Types.filename =\\n                    (Types.Real\\n                       (Types.LocalPath\\n                          \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n                    hi = { Types.col = \\\"92\\\"; line = \\\"593\\\" };\\n                    lo = { Types.col = \\\"66\\\"; line = \\\"593\\\" } };\\n                  ty =\\n                  (Types.RawPtr\\n                     (Types.Adt {\\n                        def_id =\\n                        { Types.index = (27, 21223); krate = \\\"openssl3\\\";\\n                          path =\\n                          [{ Types.data = (Types.TypeNs \\\"x509_st\\\");\\n                             disambiguator = 0 }\\n                            ]\\n                          };\\n                        generic_args = []; trait_refs = []},\\n                      true))\\n                  }\\n                ];\\n              bounds_impls = [];\\n              fn_span =\\n              { Types.filename =\\n                (Types.Real\\n                   (Types.LocalPath\\n                      \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n                hi = { Types.col = \\\"93\\\"; line = \\\"593\\\" };\\n                lo = { Types.col = \\\"20\\\"; line = \\\"593\\\" } };\\n              from_hir_call = true;\\n              fun' =\\n              { Types.attributes = [];\\n                contents =\\n                Types.GlobalName {\\n                  id =\\n                  { Types.index = (27, 16127); krate = \\\"openssl3\\\";\\n                    path =\\n                    [{ Types.data = Types.ForeignMod; disambiguator = 2222 };\\n                      { Types.data = (Types.ValueNs \\\"X509_STORE_add_cert\\\");\\n                        disambiguator = 0 }\\n                      ]\\n                    }};\\n                hir_id = None;\\n                span =\\n                { Types.filename =\\n                  (Types.Real\\n                     (Types.LocalPath\\n                        \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n                  hi = { Types.col = \\\"49\\\"; line = \\\"593\\\" };\\n                  lo = { Types.col = \\\"20\\\"; line = \\\"593\\\" } };\\n                ty =\\n                (Types.Arrow\\n                   { Types.bound_vars = [];\\n                     value =\\n                     { Types.abi = Types.Abi {todo = \\\"C { unwind: false }\\\"};\\n                       c_variadic = false;\\n                       inputs =\\n                       [(Types.RawPtr\\n                           (Types.Adt {\\n                              def_id =\\n                              { Types.index = (27, 21277);\\n                                krate = \\\"openssl3\\\";\\n                                path =\\n                                [{ Types.data =\\n                                   (Types.TypeNs \\\"x509_store_st\\\");\\n                                   disambiguator = 0 }\\n                                  ]\\n                                };\\n                              generic_args = []; trait_refs = []},\\n                            true));\\n                         (Types.RawPtr\\n                            (Types.Adt {\\n                               def_id =\\n                               { Types.index = (27, 21223);\\n                                 krate = \\\"openssl3\\\";\\n                                 path =\\n                                 [{ Types.data = (Types.TypeNs \\\"x509_st\\\");\\n                                    disambiguator = 0 }\\n                                   ]\\n                                 };\\n                               generic_args = []; trait_refs = []},\\n                             true))\\n                         ];\\n                       output = (Types.Int Types.I32); safety = Types.Unsafe\\n                       }\\n                     })\\n                };\\n              generic_args = []; trait = None;\\n              ty =\\n              (Types.Arrow\\n                 { Types.bound_vars = [];\\n                   value =\\n                   { Types.abi = Types.Abi {todo = \\\"C { unwind: false }\\\"};\\n                     c_variadic = false;\\n                     inputs =\\n                     [(Types.RawPtr\\n                         (Types.Adt {\\n                            def_id =\\n                            { Types.index = (27, 21277); krate = \\\"openssl3\\\";\\n                              path =\\n                              [{ Types.data = (Types.TypeNs \\\"x509_store_st\\\");\\n                                 disambiguator = 0 }\\n                                ]\\n                              };\\n                            generic_args = []; trait_refs = []},\\n                          true));\\n                       (Types.RawPtr\\n                          (Types.Adt {\\n                             def_id =\\n                             { Types.index = (27, 21223); krate = \\\"openssl3\\\";\\n                               path =\\n                               [{ Types.data = (Types.TypeNs \\\"x509_st\\\");\\n                                  disambiguator = 0 }\\n                                 ]\\n                               };\\n                             generic_args = []; trait_refs = []},\\n                           true))\\n                       ];\\n                     output = (Types.Int Types.I32); safety = Types.Unsafe }\\n                   })};\\n            hir_id = (Some (\\\"276\\\", \\\"184\\\"));\\n            span =\\n            { Types.filename =\\n              (Types.Real\\n                 (Types.LocalPath\\n                    \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n              hi = { Types.col = \\\"93\\\"; line = \\\"593\\\" };\\n              lo = { Types.col = \\\"20\\\"; line = \\\"593\\\" } };\\n            ty = (Types.Int Types.I32) });\\n    region_scope = { Types.data = Types.Node; id = \\\"198\\\" };\\n    safety_mode = Types.ExplicitUnsafe;\\n    span =\\n    { Types.filename =\\n      (Types.Real\\n         (Types.LocalPath \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n      hi = { Types.col = \\\"17\\\"; line = \\\"594\\\" };\\n      lo = { Types.col = \\\"16\\\"; line = \\\"592\\\" } };\\n    stmts = []; targeted_by_break = false};\\n  hir_id = (Some (\\\"276\\\", \\\"183\\\"));\\n  span =\\n  { Types.filename =\\n    (Types.Real\\n       (Types.LocalPath \\\"rust/implementation/openssl3/tunnel/context.rs\\\"));\\n    hi = { Types.col = \\\"17\\\"; line = \\\"594\\\" };\\n    lo = { Types.col = \\\"16\\\"; line = \\\"592\\\" } };\\n  ty = (Types.Int Types.I32) }\",\n                                                    )\n                                                };\n                                                Tuple0\n                                            })\n                                        }\n                                        core::result::Result_Err(err) => {\n                                            core::ops::control_flow::ControlFlow_Break(\n                                                core::result::Result_Err(err),\n                                            )\n                                        }\n                                    })\n                                }\n                            })\n                        }\n                        core::result::Result_Err(err) => {\n                            core::ops::control_flow::ControlFlow_Break(\n                                core::result::Result_Err(err),\n                            )\n                        }\n                    })\n                }\n                core::result::Result_Err(err) => {\n                    core::ops::control_flow::ControlFlow_Break(\n                        core::result::Result_Err(err),\n                    )\n                }\n            })\n        }\n    }"

            in
            Core.Result.Result_Ok (() <: Prims.unit)
            <:
            Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
          | Core.Result.Result_Err err ->
            Core.Result.Result_Err
            (Core.Convert.f_from #FStar.Tactics.Typeclasses.solve err
              <:
              (Sandwich_proto.Errors.t_SystemError & string) -> Sandwich.Error.t_Error)
            <:
            Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
        <:
        Core.Ops.Control_flow.t_ControlFlow (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
      | _ ->
        let! _:Rust_primitives.Hax.t_Never =
          Core.Ops.Control_flow.ControlFlow_Break
          (Core.Result.Result_Ok (() <: Prims.unit)
            <:
            Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          <:
          Core.Ops.Control_flow.t_ControlFlow
            (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Rust_primitives.Hax.t_Never
        in
        Core.Ops.Control_flow.ControlFlow_Continue ()
        <:
        Core.Ops.Control_flow.t_ControlFlow (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          Prims.unit)

let impl__SslContext__set_identity
      (self: t_SslContext)
      (lib_ctx: Sandwich.Implementation.Openssl3.t_LibCtx)
      (identity: Core.Option.t_Option Sandwich_api_proto.Tls.t_X509Identity)
     =
  Rust_primitives.Hax.Control_flow_monad.Mexception.run (match identity with
      | Core.Option.Option_Some identity ->
        Core.Ops.Control_flow.ControlFlow_Continue
        (match
            Core.Result.impl__map_err #(Sandwich_api_proto.Encoding_format.t_ASN1EncodingFormat &
                Sandwich.Support.Data_source.t_DataSource)
              #Sandwich.Error.t_Error
              #Sandwich.Error.t_Error
              (Core.Result.impl__and_then #Sandwich_api_proto.Certificate.t_Certificate
                  #Sandwich.Error.t_Error
                  #(Sandwich_api_proto.Encoding_format.t_ASN1EncodingFormat &
                    Sandwich.Support.Data_source.t_DataSource)
                  (Core.Option.impl__ok_or #Sandwich_api_proto.Certificate.t_Certificate
                      #Sandwich.Error.t_Error
                      (Protobuf.Message_field.impl__as_ref #Sandwich_api_proto.Certificate.t_Certificate
                          identity.Sandwich_api_proto.Tls.f_certificate
                        <:
                        Core.Option.t_Option Sandwich_api_proto.Certificate.t_Certificate)
                      (Core.Convert.f_into #Sandwich_proto.Errors.t_CertificateError
                          #Sandwich.Error.t_Error
                          #FStar.Tactics.Typeclasses.solve
                          (Sandwich_proto.Errors.CertificateError_CERTIFICATEERROR_MALFORMED
                            <:
                            Sandwich_proto.Errors.t_CertificateError)
                        <:
                        Sandwich.Error.t_Error)
                    <:
                    Core.Result.t_Result Sandwich_api_proto.Certificate.t_Certificate
                      Sandwich.Error.t_Error)
                  Sandwich.Tunnel.Tls.Support.configuration_read_certificate
                <:
                Core.Result.t_Result
                  (Sandwich_api_proto.Encoding_format.t_ASN1EncodingFormat &
                    Sandwich.Support.Data_source.t_DataSource) Sandwich.Error.t_Error)
              (fun e ->
                  let e:Sandwich.Error.t_Error = e in
                  e >>!
                  (Sandwich_proto.Errors.TLSConfigurationError_TLSCONFIGURATIONERROR_INVALID
                    <:
                    Sandwich_proto.Errors.t_TLSConfigurationError)
                  <:
                  Sandwich.Error.t_Error)
            <:
            Core.Result.t_Result
              (Sandwich_api_proto.Encoding_format.t_ASN1EncodingFormat &
                Sandwich.Support.Data_source.t_DataSource) Sandwich.Error.t_Error
          with
          | Core.Result.Result_Ok (certificate_chain_format, data_source) ->
            (match
                Sandwich.Implementation.Openssl3.v_BIO_from_buffer #Sandwich.Support.Data_source.t_DataSource
                  data_source
                <:
                Core.Result.t_Result (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_bio_st)
                  Sandwich.Error.t_Error
              with
              | Core.Result.Result_Ok cert_chain_bio ->
                (match
                    Sandwich.Implementation.Openssl3.v_X509_from_BIO lib_ctx
                      (Sandwich.Support.Pimpl.impl_2__as_nonnull #Openssl3.t_bio_st cert_chain_bio
                        <:
                        Core.Ptr.Non_null.t_NonNull Openssl3.t_bio_st)
                      certificate_chain_format
                    <:
                    Core.Result.t_Result (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_x509_st)
                      Sandwich.Error.t_Error
                  with
                  | Core.Result.Result_Ok leaf_certificate ->
                    (match
                        impl__SslContext__set_certificate self
                          (Sandwich.Support.Pimpl.impl_2__as_nonnull #Openssl3.t_x509_st
                              leaf_certificate
                            <:
                            Core.Ptr.Non_null.t_NonNull Openssl3.t_x509_st)
                        <:
                        Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
                      with
                      | Core.Result.Result_Ok _ ->
                        (match
                            Core.Result.impl__map_err #(Sandwich_api_proto.Encoding_format.t_ASN1EncodingFormat &
                                Sandwich.Support.Data_source.t_DataSource)
                              #Sandwich.Error.t_Error
                              #Sandwich.Error.t_Error
                              (Core.Result.impl__and_then #Sandwich_api_proto.Private_key.t_PrivateKey
                                  #Sandwich.Error.t_Error
                                  #(Sandwich_api_proto.Encoding_format.t_ASN1EncodingFormat &
                                    Sandwich.Support.Data_source.t_DataSource)
                                  (Core.Option.impl__ok_or #Sandwich_api_proto.Private_key.t_PrivateKey
                                      #Sandwich.Error.t_Error
                                      (Protobuf.Message_field.impl__as_ref #Sandwich_api_proto.Private_key.t_PrivateKey
                                          identity.Sandwich_api_proto.Tls.f_private_key
                                        <:
                                        Core.Option.t_Option
                                        Sandwich_api_proto.Private_key.t_PrivateKey)
                                      (Core.Convert.f_into #Sandwich_proto.Errors.t_PrivateKeyError
                                          #Sandwich.Error.t_Error
                                          #FStar.Tactics.Typeclasses.solve
                                          (Sandwich_proto.Errors.PrivateKeyError_PRIVATEKEYERROR_MALFORMED
                                            <:
                                            Sandwich_proto.Errors.t_PrivateKeyError)
                                        <:
                                        Sandwich.Error.t_Error)
                                    <:
                                    Core.Result.t_Result Sandwich_api_proto.Private_key.t_PrivateKey
                                      Sandwich.Error.t_Error)
                                  Sandwich.Tunnel.Tls.Support.configuration_read_private_key
                                <:
                                Core.Result.t_Result
                                  (Sandwich_api_proto.Encoding_format.t_ASN1EncodingFormat &
                                    Sandwich.Support.Data_source.t_DataSource)
                                  Sandwich.Error.t_Error)
                              (fun e ->
                                  let e:Sandwich.Error.t_Error = e in
                                  e >>!
                                  (Sandwich_proto.Errors.TLSConfigurationError_TLSCONFIGURATIONERROR_INVALID
                                    <:
                                    Sandwich_proto.Errors.t_TLSConfigurationError)
                                  <:
                                  Sandwich.Error.t_Error)
                            <:
                            Core.Result.t_Result
                              (Sandwich_api_proto.Encoding_format.t_ASN1EncodingFormat &
                                Sandwich.Support.Data_source.t_DataSource) Sandwich.Error.t_Error
                          with
                          | Core.Result.Result_Ok (format, data_source) ->
                            (match
                                Sandwich.Implementation.Openssl3.v_BIO_from_buffer #Sandwich.Support.Data_source.t_DataSource
                                  data_source
                                <:
                                Core.Result.t_Result
                                  (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_bio_st)
                                  Sandwich.Error.t_Error
                              with
                              | Core.Result.Result_Ok bio ->
                                (match
                                    Sandwich.Implementation.Openssl3.v_EVP_PKEY_from_BIO lib_ctx
                                      (Sandwich.Support.Pimpl.impl_2__as_nonnull #Openssl3.t_bio_st
                                          bio
                                        <:
                                        Core.Ptr.Non_null.t_NonNull Openssl3.t_bio_st)
                                      format
                                    <:
                                    Core.Result.t_Result
                                      (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_evp_pkey_st)
                                      Sandwich.Error.t_Error
                                  with
                                  | Core.Result.Result_Ok private_key ->
                                    (match
                                        impl__SslContext__set_private_key self
                                          (Sandwich.Support.Pimpl.impl_2__as_nonnull #Openssl3.t_evp_pkey_st
                                              private_key
                                            <:
                                            Core.Ptr.Non_null.t_NonNull Openssl3.t_evp_pkey_st)
                                        <:
                                        Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
                                      with
                                      | Core.Result.Result_Ok _ ->
                                        let _:Prims.unit =
                                          Rust_primitives.Hax.failure "(FunctionalizeLoops) something is not implemented yet.\nLoop without mutation?"
                                            "{\n        while core::ops::bit::Not::not(\n            sandwich::implementation::openssl3::is_BIO_eof(\n                sandwich::support::pimpl::impl_2__as_nonnull::<\n                    openssl3::t_bio_st,\n                >(cert_chain_bio),\n            ),\n        ) {\n            (match (sandwich::implementation::openssl3::v_X509_from_BIO(\n                lib_ctx,\n                sandwich::support::pimpl::impl_2__as_nonnull::<\n                    openssl3::t_bio_st,\n                >(cert_chain_bio),\n                certificate_chain_format,\n            )) {\n                core::result::Result_Ok(certificate_in_chain) => {\n                    (match (sandwich::implementation::openssl3::tunnel::context::impl__SslContext__add_extra_chain_cert(\n                        self,\n                        certificate_in_chain,\n                    )) {\n                        core::result::Result_Ok(_) => {\n                            core::ops::control_flow::ControlFlow_Continue(Tuple0)\n                        }\n                        core::result::Result_Err(err) => {\n                            core::ops::control_flow::ControlFlow_Break(\n                                core::result::Result_Err(err),\n                            )\n                        }\n                    })\n                }\n                core::result::Result_Err(err) => {\n                    core::ops::control_flow::ControlFlow_Break(\n                        core::result::Result_Err(err),\n                    )\n                }\n            })\n        }\n    }"

                                        in
                                        Core.Result.Result_Ok (() <: Prims.unit)
                                        <:
                                        Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
                                      | Core.Result.Result_Err err ->
                                        Core.Result.Result_Err err
                                        <:
                                        Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
                                  | Core.Result.Result_Err err ->
                                    Core.Result.Result_Err err
                                    <:
                                    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
                              | Core.Result.Result_Err err ->
                                Core.Result.Result_Err err
                                <:
                                Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
                          | Core.Result.Result_Err err ->
                            Core.Result.Result_Err err
                            <:
                            Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
                      | Core.Result.Result_Err err ->
                        Core.Result.Result_Err err
                        <:
                        Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
                  | Core.Result.Result_Err err ->
                    Core.Result.Result_Err err
                    <:
                    Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
              | Core.Result.Result_Err err ->
                Core.Result.Result_Err err <: Core.Result.t_Result Prims.unit Sandwich.Error.t_Error
            )
          | Core.Result.Result_Err err ->
            Core.Result.Result_Err err <: Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
        <:
        Core.Ops.Control_flow.t_ControlFlow (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
      | _ ->
        let! _:Rust_primitives.Hax.t_Never =
          Core.Ops.Control_flow.ControlFlow_Break
          (Core.Result.Result_Ok (() <: Prims.unit)
            <:
            Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          <:
          Core.Ops.Control_flow.t_ControlFlow
            (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error) Rust_primitives.Hax.t_Never
        in
        Core.Ops.Control_flow.ControlFlow_Continue ()
        <:
        Core.Ops.Control_flow.t_ControlFlow (Core.Result.t_Result Prims.unit Sandwich.Error.t_Error)
          Prims.unit)

let impl_5__new_ssl (self: t_Context) =
  match ssl_context_new_ssl self.f_ssl_ctx with
  | Core.Result.Result_Ok ssl ->
    let _:Prims.unit =
      match self.f_mode with
      | Sandwich.Tunnel.Context.Mode_Client  ->
        Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
          "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Call {\n                        args =\n                        [{ Types.attributes = [];\n                           contents =\n                           Types.Borrow {\n                             arg =\n                             { Types.attributes = [];\n                               contents =\n                               Types.VarRef {\n                                 id =\n                                 { Types.id =\n                                   { Types.local_id = \"30\";\n                                     owner =\n                                     { Types.index = (0, 291);\n                                       krate = \"sandwich\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"implementation\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"openssl3\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"tunnel\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"context\");\n                                           disambiguator = 0 };\n                                         { Types.data = Types.Impl;\n                                           disambiguator = 5 };\n                                         { Types.data =\n                                           (Types.ValueNs \"new_ssl\");\n                                           disambiguator = 0 }\n                                         ]\n                                       }\n                                     };\n                                   name = \"ssl\" }};\n                               hir_id = None;\n                               span =\n                               { Types.filename =\n                                 (Types.Real\n                                    (Types.LocalPath\n                                       \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                 hi = { Types.col = \"72\"; line = \"741\" };\n                                 lo = { Types.col = \"69\"; line = \"741\" } };\n                               ty =\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (0, 608);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"support\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"pimpl\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"Pimpl\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args =\n                                 [(Types.Lifetime\n                                     { Types.kind = Types.ReErased });\n                                   (Types.Type\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (27, 21394);\n                                          krate = \"openssl3\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"ssl_st\");\n                                             disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args = []; trait_refs = []})\n                                   ];\n                                 trait_refs =\n                                 [{ Types.args = [];\n                                    impl =\n                                    Types.Builtin {\n                                      trait =\n                                      { Types.def_id =\n                                        { Types.index = (2, 26413);\n                                          krate = \"core\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"marker\");\n                                             disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"Sized\");\n                                              disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args =\n                                        [(Types.Type\n                                            Types.Adt {\n                                              def_id =\n                                              { Types.index = (27, 21394);\n                                                krate = \"openssl3\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"ssl_st\");\n                                                   disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args = [];\n                                              trait_refs = []})\n                                          ]\n                                        }};\n                                    trait =\n                                    { Types.def_id =\n                                      { Types.index = (2, 26413);\n                                        krate = \"core\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"marker\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"Sized\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Type\n                                          Types.Adt {\n                                            def_id =\n                                            { Types.index = (27, 21394);\n                                              krate = \"openssl3\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ssl_st\");\n                                                 disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args = [];\n                                            trait_refs = []})\n                                        ]\n                                      }\n                                    }\n                                   ]}\n                               };\n                             borrow_kind = Types.Shared};\n                           hir_id = (Some (\"291\", \"48\"));\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"72\"; line = \"741\" };\n                             lo = { Types.col = \"69\"; line = \"741\" } };\n                           ty =\n                           (Types.Ref\n                              ({ Types.kind = Types.ReErased },\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (0, 608);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"support\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"pimpl\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"Pimpl\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args =\n                                 [(Types.Lifetime\n                                     { Types.kind = Types.ReErased });\n                                   (Types.Type\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (27, 21394);\n                                          krate = \"openssl3\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"ssl_st\");\n                                             disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args = []; trait_refs = []})\n                                   ];\n                                 trait_refs =\n                                 [{ Types.args = [];\n                                    impl =\n                                    Types.Builtin {\n                                      trait =\n                                      { Types.def_id =\n                                        { Types.index = (2, 26413);\n                                          krate = \"core\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"marker\");\n                                             disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"Sized\");\n                                              disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args =\n                                        [(Types.Type\n                                            Types.Adt {\n                                              def_id =\n                                              { Types.index = (27, 21394);\n                                                krate = \"openssl3\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"ssl_st\");\n                                                   disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args = [];\n                                              trait_refs = []})\n                                          ]\n                                        }};\n                                    trait =\n                                    { Types.def_id =\n                                      { Types.index = (2, 26413);\n                                        krate = \"core\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"marker\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"Sized\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Type\n                                          Types.Adt {\n                                            def_id =\n                                            { Types.index = (27, 21394);\n                                              krate = \"openssl3\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ssl_st\");\n                                                 disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args = [];\n                                            trait_refs = []})\n                                        ]\n                                      }\n                                    }\n                                   ]},\n                               false))\n                           }\n                          ];\n                        bounds_impls = [];\n                        fn_span =\n                        { Types.filename =\n                          (Types.Real\n                             (Types.LocalPath\n                                \"rust/implementation/openssl3/tunnel/context.rs\"));\n                          hi = { Types.col = \"85\"; line = \"741\" };\n                          lo = { Types.col = \"73\"; line = \"741\" } };\n                        from_hir_call = true;\n                        fun' =\n                        { Types.attributes = [];\n                          contents =\n                          Types.GlobalName {\n                            id =\n                            { Types.index = (0, 624); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"support\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"pimpl\");\n                                  disambiguator = 0 };\n                                { Types.data = Types.Impl; disambiguator = 2\n                                  };\n                                { Types.data = (Types.ValueNs \"as_nonnull\");\n                                  disambiguator = 0 }\n                                ]\n                              }};\n                          hir_id = None;\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"83\"; line = \"741\" };\n                            lo = { Types.col = \"73\"; line = \"741\" } };\n                          ty =\n                          (Types.Arrow\n                             { Types.bound_vars =\n                               [(Types.Region\n                                   (Types.BrNamed\n                                      ({ Types.index = (0, 1658);\n                                         krate = \"sandwich\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"support\");\n                                            disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"pimpl\");\n                                             disambiguator = 0 };\n                                           { Types.data = Types.Impl;\n                                             disambiguator = 2 };\n                                           { Types.data =\n                                             (Types.ValueNs \"as_nonnull\");\n                                             disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.LifetimeNs \"'_\");\n                                             disambiguator = 0 }\n                                           ]\n                                         },\n                                       \"'_\")))\n                                 ];\n                               value =\n                               { Types.abi = Types.Abi {todo = \"Rust\"};\n                                 c_variadic = false;\n                                 inputs =\n                                 [(Types.Ref\n                                     ({ Types.kind =\n                                        (Types.ReBound\n                                           (\"0\",\n                                            { Types.kind =\n                                              (Types.BrNamed\n                                                 ({ Types.index = (0, 1658);\n                                                    krate = \"sandwich\";\n                                                    path =\n                                                    [{ Types.data =\n                                                       (Types.TypeNs\n                                                          \"support\");\n                                                       disambiguator = 0 };\n                                                      { Types.data =\n                                                        (Types.TypeNs \"pimpl\");\n                                                        disambiguator = 0 };\n                                                      { Types.data =\n                                                        Types.Impl;\n                                                        disambiguator = 2 };\n                                                      { Types.data =\n                                                        (Types.ValueNs\n                                                           \"as_nonnull\");\n                                                        disambiguator = 0 };\n                                                      { Types.data =\n                                                        (Types.LifetimeNs\n                                                           \"'_\");\n                                                        disambiguator = 0 }\n                                                      ]\n                                                    },\n                                                  \"'_\"));\n                                              var = \"0\" }))\n                                        },\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (0, 608);\n                                          krate = \"sandwich\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"support\");\n                                             disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"pimpl\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"Pimpl\");\n                                              disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args =\n                                        [(Types.Lifetime\n                                            { Types.kind = Types.ReErased });\n                                          (Types.Type\n                                             Types.Adt {\n                                               def_id =\n                                               { Types.index = (27, 21394);\n                                                 krate = \"openssl3\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"ssl_st\");\n                                                    disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []})\n                                          ];\n                                        trait_refs =\n                                        [{ Types.args = [];\n                                           impl =\n                                           Types.Builtin {\n                                             trait =\n                                             { Types.def_id =\n                                               { Types.index = (2, 26413);\n                                                 krate = \"core\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"marker\");\n                                                    disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"Sized\");\n                                                     disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args =\n                                               [(Types.Type\n                                                   Types.Adt {\n                                                     def_id =\n                                                     { Types.index =\n                                                       (27, 21394);\n                                                       krate = \"openssl3\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs\n                                                             \"ssl_st\");\n                                                          disambiguator = 0 }\n                                                         ]\n                                                       };\n                                                     generic_args = [];\n                                                     trait_refs = []})\n                                                 ]\n                                               }};\n                                           trait =\n                                           { Types.def_id =\n                                             { Types.index = (2, 26413);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"marker\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"Sized\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args =\n                                             [(Types.Type\n                                                 Types.Adt {\n                                                   def_id =\n                                                   { Types.index =\n                                                     (27, 21394);\n                                                     krate = \"openssl3\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"ssl_st\");\n                                                        disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args = [];\n                                                   trait_refs = []})\n                                               ]\n                                             }\n                                           }\n                                          ]},\n                                      false))\n                                   ];\n                                 output =\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (2, 2222); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ptr\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"non_null\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"NonNull\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type\n                                       Types.Adt {\n                                         def_id =\n                                         { Types.index = (27, 21394);\n                                           krate = \"openssl3\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"ssl_st\");\n                                              disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args = []; trait_refs = []})\n                                     ];\n                                   trait_refs = []};\n                                 safety = Types.Safe }\n                               })\n                          };\n                        generic_args =\n                        [(Types.Lifetime { Types.kind = Types.ReErased });\n                          (Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (27, 21394);\n                                 krate = \"openssl3\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                    disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []})\n                          ];\n                        trait = None;\n                        ty =\n                        (Types.Arrow\n                           { Types.bound_vars =\n                             [(Types.Region\n                                 (Types.BrNamed\n                                    ({ Types.index = (0, 1658);\n                                       krate = \"sandwich\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"support\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"pimpl\");\n                                           disambiguator = 0 };\n                                         { Types.data = Types.Impl;\n                                           disambiguator = 2 };\n                                         { Types.data =\n                                           (Types.ValueNs \"as_nonnull\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.LifetimeNs \"'_\");\n                                           disambiguator = 0 }\n                                         ]\n                                       },\n                                     \"'_\")))\n                               ];\n                             value =\n                             { Types.abi = Types.Abi {todo = \"Rust\"};\n                               c_variadic = false;\n                               inputs =\n                               [(Types.Ref\n                                   ({ Types.kind =\n                                      (Types.ReBound\n                                         (\"0\",\n                                          { Types.kind =\n                                            (Types.BrNamed\n                                               ({ Types.index = (0, 1658);\n                                                  krate = \"sandwich\";\n                                                  path =\n                                                  [{ Types.data =\n                                                     (Types.TypeNs \"support\");\n                                                     disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.TypeNs \"pimpl\");\n                                                      disambiguator = 0 };\n                                                    { Types.data = Types.Impl;\n                                                      disambiguator = 2 };\n                                                    { Types.data =\n                                                      (Types.ValueNs\n                                                         \"as_nonnull\");\n                                                      disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.LifetimeNs \"'_\");\n                                                      disambiguator = 0 }\n                                                    ]\n                                                  },\n                                                \"'_\"));\n                                            var = \"0\" }))\n                                      },\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (0, 608);\n                                        krate = \"sandwich\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"support\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"pimpl\");\n                                            disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"Pimpl\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Lifetime\n                                          { Types.kind = Types.ReErased });\n                                        (Types.Type\n                                           Types.Adt {\n                                             def_id =\n                                             { Types.index = (27, 21394);\n                                               krate = \"openssl3\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"ssl_st\");\n                                                  disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args = [];\n                                             trait_refs = []})\n                                        ];\n                                      trait_refs =\n                                      [{ Types.args = [];\n                                         impl =\n                                         Types.Builtin {\n                                           trait =\n                                           { Types.def_id =\n                                             { Types.index = (2, 26413);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"marker\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"Sized\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args =\n                                             [(Types.Type\n                                                 Types.Adt {\n                                                   def_id =\n                                                   { Types.index =\n                                                     (27, 21394);\n                                                     krate = \"openssl3\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"ssl_st\");\n                                                        disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args = [];\n                                                   trait_refs = []})\n                                               ]\n                                             }};\n                                         trait =\n                                         { Types.def_id =\n                                           { Types.index = (2, 26413);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"marker\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"Sized\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args =\n                                           [(Types.Type\n                                               Types.Adt {\n                                                 def_id =\n                                                 { Types.index = (27, 21394);\n                                                   krate = \"openssl3\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs \"ssl_st\");\n                                                      disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 generic_args = [];\n                                                 trait_refs = []})\n                                             ]\n                                           }\n                                         }\n                                        ]},\n                                    false))\n                                 ];\n                               output =\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 2222); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ptr\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"non_null\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"NonNull\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args =\n                                 [(Types.Type\n                                     Types.Adt {\n                                       def_id =\n                                       { Types.index = (27, 21394);\n                                         krate = \"openssl3\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"ssl_st\");\n                                            disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args = []; trait_refs = []})\n                                   ];\n                                 trait_refs = []};\n                               safety = Types.Safe }\n                             })};\n                      hir_id = (Some (\"291\", \"46\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"85\"; line = \"741\" };\n                        lo = { Types.col = \"69\"; line = \"741\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21394);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"94\"; line = \"741\" };\n                     lo = { Types.col = \"86\"; line = \"741\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"92\"; line = \"741\" };\n                       lo = { Types.col = \"86\"; line = \"741\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21394);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21394);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21394); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21394);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21394);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"291\", \"44\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"94\"; line = \"741\" };\n                   lo = { Types.col = \"69\"; line = \"741\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21394); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"95\"; line = \"741\" };\n                lo = { Types.col = \"37\"; line = \"741\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18639); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3419 };\n                      { Types.data = (Types.ValueNs \"SSL_set_connect_state\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"68\"; line = \"741\" };\n                  lo = { Types.col = \"37\"; line = \"741\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21394);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true))\n                         ];\n                       output = (Types.Tuple []); safety = Types.Unsafe }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21394); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true))\n                       ];\n                     output = (Types.Tuple []); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"291\", \"40\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"95\"; line = \"741\" };\n              lo = { Types.col = \"37\"; line = \"741\" } };\n            ty = (Types.Tuple []) });\n    region_scope = { Types.data = Types.Node; id = \"50\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"97\"; line = \"741\" };\n      lo = { Types.col = \"28\"; line = \"741\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"291\", \"39\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"97\"; line = \"741\" };\n    lo = { Types.col = \"28\"; line = \"741\" } };\n  ty = (Types.Tuple []) }"

      | Sandwich.Tunnel.Context.Mode_Server  ->
        Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
          "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Call {\n                        args =\n                        [{ Types.attributes = [];\n                           contents =\n                           Types.Borrow {\n                             arg =\n                             { Types.attributes = [];\n                               contents =\n                               Types.VarRef {\n                                 id =\n                                 { Types.id =\n                                   { Types.local_id = \"30\";\n                                     owner =\n                                     { Types.index = (0, 291);\n                                       krate = \"sandwich\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"implementation\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"openssl3\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"tunnel\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"context\");\n                                           disambiguator = 0 };\n                                         { Types.data = Types.Impl;\n                                           disambiguator = 5 };\n                                         { Types.data =\n                                           (Types.ValueNs \"new_ssl\");\n                                           disambiguator = 0 }\n                                         ]\n                                       }\n                                     };\n                                   name = \"ssl\" }};\n                               hir_id = None;\n                               span =\n                               { Types.filename =\n                                 (Types.Real\n                                    (Types.LocalPath\n                                       \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                 hi = { Types.col = \"71\"; line = \"742\" };\n                                 lo = { Types.col = \"68\"; line = \"742\" } };\n                               ty =\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (0, 608);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"support\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"pimpl\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"Pimpl\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args =\n                                 [(Types.Lifetime\n                                     { Types.kind = Types.ReErased });\n                                   (Types.Type\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (27, 21394);\n                                          krate = \"openssl3\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"ssl_st\");\n                                             disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args = []; trait_refs = []})\n                                   ];\n                                 trait_refs =\n                                 [{ Types.args = [];\n                                    impl =\n                                    Types.Builtin {\n                                      trait =\n                                      { Types.def_id =\n                                        { Types.index = (2, 26413);\n                                          krate = \"core\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"marker\");\n                                             disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"Sized\");\n                                              disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args =\n                                        [(Types.Type\n                                            Types.Adt {\n                                              def_id =\n                                              { Types.index = (27, 21394);\n                                                krate = \"openssl3\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"ssl_st\");\n                                                   disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args = [];\n                                              trait_refs = []})\n                                          ]\n                                        }};\n                                    trait =\n                                    { Types.def_id =\n                                      { Types.index = (2, 26413);\n                                        krate = \"core\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"marker\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"Sized\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Type\n                                          Types.Adt {\n                                            def_id =\n                                            { Types.index = (27, 21394);\n                                              krate = \"openssl3\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ssl_st\");\n                                                 disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args = [];\n                                            trait_refs = []})\n                                        ]\n                                      }\n                                    }\n                                   ]}\n                               };\n                             borrow_kind = Types.Shared};\n                           hir_id = (Some (\"291\", \"64\"));\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"71\"; line = \"742\" };\n                             lo = { Types.col = \"68\"; line = \"742\" } };\n                           ty =\n                           (Types.Ref\n                              ({ Types.kind = Types.ReErased },\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (0, 608);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"support\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"pimpl\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"Pimpl\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args =\n                                 [(Types.Lifetime\n                                     { Types.kind = Types.ReErased });\n                                   (Types.Type\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (27, 21394);\n                                          krate = \"openssl3\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"ssl_st\");\n                                             disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args = []; trait_refs = []})\n                                   ];\n                                 trait_refs =\n                                 [{ Types.args = [];\n                                    impl =\n                                    Types.Builtin {\n                                      trait =\n                                      { Types.def_id =\n                                        { Types.index = (2, 26413);\n                                          krate = \"core\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"marker\");\n                                             disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"Sized\");\n                                              disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args =\n                                        [(Types.Type\n                                            Types.Adt {\n                                              def_id =\n                                              { Types.index = (27, 21394);\n                                                krate = \"openssl3\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs \"ssl_st\");\n                                                   disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args = [];\n                                              trait_refs = []})\n                                          ]\n                                        }};\n                                    trait =\n                                    { Types.def_id =\n                                      { Types.index = (2, 26413);\n                                        krate = \"core\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"marker\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"Sized\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Type\n                                          Types.Adt {\n                                            def_id =\n                                            { Types.index = (27, 21394);\n                                              krate = \"openssl3\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ssl_st\");\n                                                 disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args = [];\n                                            trait_refs = []})\n                                        ]\n                                      }\n                                    }\n                                   ]},\n                               false))\n                           }\n                          ];\n                        bounds_impls = [];\n                        fn_span =\n                        { Types.filename =\n                          (Types.Real\n                             (Types.LocalPath\n                                \"rust/implementation/openssl3/tunnel/context.rs\"));\n                          hi = { Types.col = \"84\"; line = \"742\" };\n                          lo = { Types.col = \"72\"; line = \"742\" } };\n                        from_hir_call = true;\n                        fun' =\n                        { Types.attributes = [];\n                          contents =\n                          Types.GlobalName {\n                            id =\n                            { Types.index = (0, 624); krate = \"sandwich\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"support\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"pimpl\");\n                                  disambiguator = 0 };\n                                { Types.data = Types.Impl; disambiguator = 2\n                                  };\n                                { Types.data = (Types.ValueNs \"as_nonnull\");\n                                  disambiguator = 0 }\n                                ]\n                              }};\n                          hir_id = None;\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"82\"; line = \"742\" };\n                            lo = { Types.col = \"72\"; line = \"742\" } };\n                          ty =\n                          (Types.Arrow\n                             { Types.bound_vars =\n                               [(Types.Region\n                                   (Types.BrNamed\n                                      ({ Types.index = (0, 1658);\n                                         krate = \"sandwich\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"support\");\n                                            disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"pimpl\");\n                                             disambiguator = 0 };\n                                           { Types.data = Types.Impl;\n                                             disambiguator = 2 };\n                                           { Types.data =\n                                             (Types.ValueNs \"as_nonnull\");\n                                             disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.LifetimeNs \"'_\");\n                                             disambiguator = 0 }\n                                           ]\n                                         },\n                                       \"'_\")))\n                                 ];\n                               value =\n                               { Types.abi = Types.Abi {todo = \"Rust\"};\n                                 c_variadic = false;\n                                 inputs =\n                                 [(Types.Ref\n                                     ({ Types.kind =\n                                        (Types.ReBound\n                                           (\"0\",\n                                            { Types.kind =\n                                              (Types.BrNamed\n                                                 ({ Types.index = (0, 1658);\n                                                    krate = \"sandwich\";\n                                                    path =\n                                                    [{ Types.data =\n                                                       (Types.TypeNs\n                                                          \"support\");\n                                                       disambiguator = 0 };\n                                                      { Types.data =\n                                                        (Types.TypeNs \"pimpl\");\n                                                        disambiguator = 0 };\n                                                      { Types.data =\n                                                        Types.Impl;\n                                                        disambiguator = 2 };\n                                                      { Types.data =\n                                                        (Types.ValueNs\n                                                           \"as_nonnull\");\n                                                        disambiguator = 0 };\n                                                      { Types.data =\n                                                        (Types.LifetimeNs\n                                                           \"'_\");\n                                                        disambiguator = 0 }\n                                                      ]\n                                                    },\n                                                  \"'_\"));\n                                              var = \"0\" }))\n                                        },\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (0, 608);\n                                          krate = \"sandwich\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"support\");\n                                             disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"pimpl\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"Pimpl\");\n                                              disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args =\n                                        [(Types.Lifetime\n                                            { Types.kind = Types.ReErased });\n                                          (Types.Type\n                                             Types.Adt {\n                                               def_id =\n                                               { Types.index = (27, 21394);\n                                                 krate = \"openssl3\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"ssl_st\");\n                                                    disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []})\n                                          ];\n                                        trait_refs =\n                                        [{ Types.args = [];\n                                           impl =\n                                           Types.Builtin {\n                                             trait =\n                                             { Types.def_id =\n                                               { Types.index = (2, 26413);\n                                                 krate = \"core\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs \"marker\");\n                                                    disambiguator = 0 };\n                                                   { Types.data =\n                                                     (Types.TypeNs \"Sized\");\n                                                     disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args =\n                                               [(Types.Type\n                                                   Types.Adt {\n                                                     def_id =\n                                                     { Types.index =\n                                                       (27, 21394);\n                                                       krate = \"openssl3\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs\n                                                             \"ssl_st\");\n                                                          disambiguator = 0 }\n                                                         ]\n                                                       };\n                                                     generic_args = [];\n                                                     trait_refs = []})\n                                                 ]\n                                               }};\n                                           trait =\n                                           { Types.def_id =\n                                             { Types.index = (2, 26413);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"marker\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"Sized\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args =\n                                             [(Types.Type\n                                                 Types.Adt {\n                                                   def_id =\n                                                   { Types.index =\n                                                     (27, 21394);\n                                                     krate = \"openssl3\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"ssl_st\");\n                                                        disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args = [];\n                                                   trait_refs = []})\n                                               ]\n                                             }\n                                           }\n                                          ]},\n                                      false))\n                                   ];\n                                 output =\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (2, 2222); krate = \"core\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ptr\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"non_null\");\n                                         disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"NonNull\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args =\n                                   [(Types.Type\n                                       Types.Adt {\n                                         def_id =\n                                         { Types.index = (27, 21394);\n                                           krate = \"openssl3\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"ssl_st\");\n                                              disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args = []; trait_refs = []})\n                                     ];\n                                   trait_refs = []};\n                                 safety = Types.Safe }\n                               })\n                          };\n                        generic_args =\n                        [(Types.Lifetime { Types.kind = Types.ReErased });\n                          (Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (27, 21394);\n                                 krate = \"openssl3\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                    disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []})\n                          ];\n                        trait = None;\n                        ty =\n                        (Types.Arrow\n                           { Types.bound_vars =\n                             [(Types.Region\n                                 (Types.BrNamed\n                                    ({ Types.index = (0, 1658);\n                                       krate = \"sandwich\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"support\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"pimpl\");\n                                           disambiguator = 0 };\n                                         { Types.data = Types.Impl;\n                                           disambiguator = 2 };\n                                         { Types.data =\n                                           (Types.ValueNs \"as_nonnull\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.LifetimeNs \"'_\");\n                                           disambiguator = 0 }\n                                         ]\n                                       },\n                                     \"'_\")))\n                               ];\n                             value =\n                             { Types.abi = Types.Abi {todo = \"Rust\"};\n                               c_variadic = false;\n                               inputs =\n                               [(Types.Ref\n                                   ({ Types.kind =\n                                      (Types.ReBound\n                                         (\"0\",\n                                          { Types.kind =\n                                            (Types.BrNamed\n                                               ({ Types.index = (0, 1658);\n                                                  krate = \"sandwich\";\n                                                  path =\n                                                  [{ Types.data =\n                                                     (Types.TypeNs \"support\");\n                                                     disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.TypeNs \"pimpl\");\n                                                      disambiguator = 0 };\n                                                    { Types.data = Types.Impl;\n                                                      disambiguator = 2 };\n                                                    { Types.data =\n                                                      (Types.ValueNs\n                                                         \"as_nonnull\");\n                                                      disambiguator = 0 };\n                                                    { Types.data =\n                                                      (Types.LifetimeNs \"'_\");\n                                                      disambiguator = 0 }\n                                                    ]\n                                                  },\n                                                \"'_\"));\n                                            var = \"0\" }))\n                                      },\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (0, 608);\n                                        krate = \"sandwich\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"support\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"pimpl\");\n                                            disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"Pimpl\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Lifetime\n                                          { Types.kind = Types.ReErased });\n                                        (Types.Type\n                                           Types.Adt {\n                                             def_id =\n                                             { Types.index = (27, 21394);\n                                               krate = \"openssl3\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"ssl_st\");\n                                                  disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args = [];\n                                             trait_refs = []})\n                                        ];\n                                      trait_refs =\n                                      [{ Types.args = [];\n                                         impl =\n                                         Types.Builtin {\n                                           trait =\n                                           { Types.def_id =\n                                             { Types.index = (2, 26413);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"marker\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"Sized\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args =\n                                             [(Types.Type\n                                                 Types.Adt {\n                                                   def_id =\n                                                   { Types.index =\n                                                     (27, 21394);\n                                                     krate = \"openssl3\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"ssl_st\");\n                                                        disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args = [];\n                                                   trait_refs = []})\n                                               ]\n                                             }};\n                                         trait =\n                                         { Types.def_id =\n                                           { Types.index = (2, 26413);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"marker\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"Sized\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args =\n                                           [(Types.Type\n                                               Types.Adt {\n                                                 def_id =\n                                                 { Types.index = (27, 21394);\n                                                   krate = \"openssl3\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs \"ssl_st\");\n                                                      disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 generic_args = [];\n                                                 trait_refs = []})\n                                             ]\n                                           }\n                                         }\n                                        ]},\n                                    false))\n                                 ];\n                               output =\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (2, 2222); krate = \"core\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"ptr\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"non_null\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"NonNull\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args =\n                                 [(Types.Type\n                                     Types.Adt {\n                                       def_id =\n                                       { Types.index = (27, 21394);\n                                         krate = \"openssl3\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"ssl_st\");\n                                            disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args = []; trait_refs = []})\n                                   ];\n                                 trait_refs = []};\n                               safety = Types.Safe }\n                             })};\n                      hir_id = (Some (\"291\", \"62\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"84\"; line = \"742\" };\n                        lo = { Types.col = \"68\"; line = \"742\" } };\n                      ty =\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (2, 2222); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ptr\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"non_null\");\n                              disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"NonNull\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21394);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait_refs = []}\n                      }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"93\"; line = \"742\" };\n                     lo = { Types.col = \"85\"; line = \"742\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (2, 2245); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ptr\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"non_null\");\n                             disambiguator = 0 };\n                           { Types.data = Types.Impl; disambiguator = 3 };\n                           { Types.data = (Types.ValueNs \"as_ptr\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"91\"; line = \"742\" };\n                       lo = { Types.col = \"85\"; line = \"742\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi = Types.Abi {todo = \"Rust\"};\n                            c_variadic = false;\n                            inputs =\n                            [Types.Adt {\n                               def_id =\n                               { Types.index = (2, 2222); krate = \"core\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ptr\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"non_null\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"NonNull\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Type\n                                   Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21394);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs = []}\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21394);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Safe }\n                          })\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (27, 21394); krate = \"openssl3\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"ssl_st\");\n                              disambiguator = 0 }\n                             ]\n                           };\n                         generic_args = []; trait_refs = []})\n                     ];\n                   trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi = Types.Abi {todo = \"Rust\"};\n                          c_variadic = false;\n                          inputs =\n                          [Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21394);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21394);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Safe }\n                        })};\n                 hir_id = (Some (\"291\", \"60\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"93\"; line = \"742\" };\n                   lo = { Types.col = \"68\"; line = \"742\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21394); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"94\"; line = \"742\" };\n                lo = { Types.col = \"37\"; line = \"742\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (27, 18641); krate = \"openssl3\";\n                    path =\n                    [{ Types.data = Types.ForeignMod; disambiguator = 3420 };\n                      { Types.data = (Types.ValueNs \"SSL_set_accept_state\");\n                        disambiguator = 0 }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"67\"; line = \"742\" };\n                  lo = { Types.col = \"37\"; line = \"742\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21394);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true))\n                         ];\n                       output = (Types.Tuple []); safety = Types.Unsafe }\n                     })\n                };\n              generic_args = []; trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"C { unwind: false }\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21394); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true))\n                       ];\n                     output = (Types.Tuple []); safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"291\", \"56\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"94\"; line = \"742\" };\n              lo = { Types.col = \"37\"; line = \"742\" } };\n            ty = (Types.Tuple []) });\n    region_scope = { Types.data = Types.Node; id = \"66\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"96\"; line = \"742\" };\n      lo = { Types.col = \"28\"; line = \"742\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"291\", \"55\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"96\"; line = \"742\" };\n    lo = { Types.col = \"28\"; line = \"742\" } };\n  ty = (Types.Tuple []) }"

    in
    Core.Result.Result_Ok ssl
    <:
    Core.Result.t_Result (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_ssl_st) Sandwich.Error.t_Error
  | Core.Result.Result_Err err ->
    Core.Result.Result_Err err
    <:
    Core.Result.t_Result (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_ssl_st) Sandwich.Error.t_Error

let impl_5__security_requirements (self: t_Context) =
  Core.Borrow.f_borrow #t_Context
    #Sandwich.Tunnel.Tls.t_TunnelSecurityRequirements
    #FStar.Tactics.Typeclasses.solve
    self

let new_ssl_context (ctx: Sandwich.t_Context) (mode: Sandwich.Tunnel.Context.t_Mode) =
  Core.Option.impl__ok_or_else #(Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_ssl_ctx_st)
    #Sandwich.Error.t_Error
    (Rust_primitives.Hax.failure "(AST import) Unsafe blocks are not allowed."
        "{ Types.attributes = [];\n  contents =\n  Types.Block {\n    expr =\n    (Some { Types.attributes = [];\n            contents =\n            Types.Call {\n              args =\n              [{ Types.attributes = [];\n                 contents =\n                 Types.Call {\n                   args =\n                   [{ Types.attributes = [];\n                      contents =\n                      Types.Call {\n                        args =\n                        [{ Types.attributes = [];\n                           contents =\n                           Types.Call {\n                             args =\n                             [{ Types.attributes = [];\n                                contents =\n                                Types.Borrow {\n                                  arg =\n                                  { Types.attributes = [];\n                                    contents =\n                                    Types.Deref {\n                                      arg =\n                                      { Types.attributes = [];\n                                        contents =\n                                        Types.Call {\n                                          args =\n                                          [{ Types.attributes = [];\n                                             contents =\n                                             Types.Borrow {\n                                               arg =\n                                               { Types.attributes = [];\n                                                 contents =\n                                                 Types.Deref {\n                                                   arg =\n                                                   { Types.attributes = [];\n                                                     contents =\n                                                     Types.VarRef {\n                                                       id =\n                                                       { Types.id =\n                                                         { Types.local_id =\n                                                           \"2\";\n                                                           owner =\n                                                           { Types.index =\n                                                             (0, 228);\n                                                             krate =\n                                                             \"sandwich\";\n                                                             path =\n                                                             [{ Types.data =\n                                                                (Types.TypeNs\n                                                                   \"implementation\");\n                                                                disambiguator =\n                                                                0 };\n                                                               { Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"openssl3\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                               { Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"tunnel\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                               { Types.data =\n                                                                 (Types.TypeNs\n                                                                    \"context\");\n                                                                 disambiguator =\n                                                                 0 };\n                                                               { Types.data =\n                                                                 (Types.ValueNs\n                                                                    \"new_ssl_context\");\n                                                                 disambiguator =\n                                                                 0 }\n                                                               ]\n                                                             }\n                                                           };\n                                                         name = \"ctx\" }};\n                                                     hir_id = None;\n                                                     span =\n                                                     { Types.filename =\n                                                       (Types.Real\n                                                          (Types.LocalPath\n                                                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                                       hi =\n                                                       { Types.col = \"19\";\n                                                         line = \"56\" };\n                                                       lo =\n                                                       { Types.col = \"16\";\n                                                         line = \"56\" }\n                                                       };\n                                                     ty =\n                                                     (Types.Ref\n                                                        ({ Types.kind =\n                                                           Types.ReErased },\n                                                         Types.Adt {\n                                                           def_id =\n                                                           { Types.index =\n                                                             (0, 853);\n                                                             krate =\n                                                             \"sandwich\";\n                                                             path =\n                                                             [{ Types.data =\n                                                                (Types.TypeNs\n                                                                   \"Context\");\n                                                                disambiguator =\n                                                                0 }\n                                                               ]\n                                                             };\n                                                           generic_args = [];\n                                                           trait_refs = []},\n                                                         false))\n                                                     }};\n                                                 hir_id = None;\n                                                 span =\n                                                 { Types.filename =\n                                                   (Types.Real\n                                                      (Types.LocalPath\n                                                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                                   hi =\n                                                   { Types.col = \"19\";\n                                                     line = \"56\" };\n                                                   lo =\n                                                   { Types.col = \"16\";\n                                                     line = \"56\" }\n                                                   };\n                                                 ty =\n                                                 Types.Adt {\n                                                   def_id =\n                                                   { Types.index = (0, 853);\n                                                     krate = \"sandwich\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"Context\");\n                                                        disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args = [];\n                                                   trait_refs = []}\n                                                 };\n                                               borrow_kind = Types.Shared};\n                                             hir_id = (Some (\"228\", \"24\"));\n                                             span =\n                                             { Types.filename =\n                                               (Types.Real\n                                                  (Types.LocalPath\n                                                     \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                               hi =\n                                               { Types.col = \"19\";\n                                                 line = \"56\" };\n                                               lo =\n                                               { Types.col = \"16\";\n                                                 line = \"56\" }\n                                               };\n                                             ty =\n                                             (Types.Ref\n                                                ({ Types.kind =\n                                                   Types.ReErased },\n                                                 Types.Adt {\n                                                   def_id =\n                                                   { Types.index = (0, 853);\n                                                     krate = \"sandwich\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"Context\");\n                                                        disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args = [];\n                                                   trait_refs = []},\n                                                 false))\n                                             }\n                                            ];\n                                          bounds_impls = [];\n                                          fn_span =\n                                          { Types.filename =\n                                            (Types.Real\n                                               (Types.LocalPath\n                                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                            hi =\n                                            { Types.col = \"42\"; line = \"56\" };\n                                            lo =\n                                            { Types.col = \"20\"; line = \"56\" }\n                                            };\n                                          from_hir_call = true;\n                                          fun' =\n                                          { Types.attributes = [];\n                                            contents =\n                                            Types.GlobalName {\n                                              id =\n                                              { Types.index = (0, 859);\n                                                krate = \"sandwich\";\n                                                path =\n                                                [{ Types.data = Types.Impl;\n                                                   disambiguator = 1 };\n                                                  { Types.data =\n                                                    (Types.ValueNs\n                                                       \"get_openssl3_lib_ctx\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                }};\n                                            hir_id = None;\n                                            span =\n                                            { Types.filename =\n                                              (Types.Real\n                                                 (Types.LocalPath\n                                                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                              hi =\n                                              { Types.col = \"40\"; line = \"56\"\n                                                };\n                                              lo =\n                                              { Types.col = \"20\"; line = \"56\"\n                                                }\n                                              };\n                                            ty =\n                                            (Types.Arrow\n                                               { Types.bound_vars =\n                                                 [(Types.Region\n                                                     (Types.BrNamed\n                                                        ({ Types.index =\n                                                           (0, 1741);\n                                                           krate = \"sandwich\";\n                                                           path =\n                                                           [{ Types.data =\n                                                              Types.Impl;\n                                                              disambiguator =\n                                                              1 };\n                                                             { Types.data =\n                                                               (Types.ValueNs\n                                                                  \"get_openssl3_lib_ctx\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               (Types.LifetimeNs\n                                                                  \"'_\");\n                                                               disambiguator =\n                                                               0 }\n                                                             ]\n                                                           },\n                                                         \"'_\")))\n                                                   ];\n                                                 value =\n                                                 { Types.abi =\n                                                   Types.Abi {todo = \"Rust\"};\n                                                   c_variadic = false;\n                                                   inputs =\n                                                   [(Types.Ref\n                                                       ({ Types.kind =\n                                                          (Types.ReBound\n                                                             (\"0\",\n                                                              { Types.kind =\n                                                                (Types.BrNamed\n                                                                   ({ Types.index =\n                                                                    (0, 1741);\n                                                                    krate =\n                                                                    \"sandwich\";\n                                                                    path =\n                                                                    [{ Types.data =\n                                                                    Types.Impl;\n                                                                    disambiguator =\n                                                                    1 };\n                                                                    { Types.data =\n                                                                    (Types.ValueNs\n                                                                    \"get_openssl3_lib_ctx\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.LifetimeNs\n                                                                    \"'_\");\n                                                                    disambiguator =\n                                                                    0 }] },\n                                                                    \"'_\"));\n                                                                var = \"0\" }))\n                                                          },\n                                                        Types.Adt {\n                                                          def_id =\n                                                          { Types.index =\n                                                            (0, 853);\n                                                            krate =\n                                                            \"sandwich\";\n                                                            path =\n                                                            [{ Types.data =\n                                                               (Types.TypeNs\n                                                                  \"Context\");\n                                                               disambiguator =\n                                                               0 }\n                                                              ]\n                                                            };\n                                                          generic_args = [];\n                                                          trait_refs = []},\n                                                        false))\n                                                     ];\n                                                   output =\n                                                   (Types.Ref\n                                                      ({ Types.kind =\n                                                         (Types.ReBound\n                                                            (\"0\",\n                                                             { Types.kind =\n                                                               (Types.BrNamed\n                                                                  ({ Types.index =\n                                                                    (0, 1741);\n                                                                    krate =\n                                                                    \"sandwich\";\n                                                                    path =\n                                                                    [{ Types.data =\n                                                                    Types.Impl;\n                                                                    disambiguator =\n                                                                    1 };\n                                                                    { Types.data =\n                                                                    (Types.ValueNs\n                                                                    \"get_openssl3_lib_ctx\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.LifetimeNs\n                                                                    \"'_\");\n                                                                    disambiguator =\n                                                                    0 }] },\n                                                                   \"'_\"));\n                                                               var = \"0\" }))\n                                                         },\n                                                       Types.Adt {\n                                                         def_id =\n                                                         { Types.index =\n                                                           (0, 458);\n                                                           krate = \"sandwich\";\n                                                           path =\n                                                           [{ Types.data =\n                                                              (Types.TypeNs\n                                                                 \"implementation\");\n                                                              disambiguator =\n                                                              0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"openssl3\");\n                                                               disambiguator =\n                                                               0 };\n                                                             { Types.data =\n                                                               (Types.TypeNs\n                                                                  \"LibCtx\");\n                                                               disambiguator =\n                                                               0 }\n                                                             ]\n                                                           };\n                                                         generic_args =\n                                                         [(Types.Lifetime\n                                                             { Types.kind =\n                                                               Types.ReStatic\n                                                               })\n                                                           ];\n                                                         trait_refs = []},\n                                                       false));\n                                                   safety = Types.Safe }\n                                                 })\n                                            };\n                                          generic_args = []; trait = None;\n                                          ty =\n                                          (Types.Arrow\n                                             { Types.bound_vars =\n                                               [(Types.Region\n                                                   (Types.BrNamed\n                                                      ({ Types.index =\n                                                         (0, 1741);\n                                                         krate = \"sandwich\";\n                                                         path =\n                                                         [{ Types.data =\n                                                            Types.Impl;\n                                                            disambiguator = 1\n                                                            };\n                                                           { Types.data =\n                                                             (Types.ValueNs\n                                                                \"get_openssl3_lib_ctx\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             (Types.LifetimeNs\n                                                                \"'_\");\n                                                             disambiguator =\n                                                             0 }\n                                                           ]\n                                                         },\n                                                       \"'_\")))\n                                                 ];\n                                               value =\n                                               { Types.abi =\n                                                 Types.Abi {todo = \"Rust\"};\n                                                 c_variadic = false;\n                                                 inputs =\n                                                 [(Types.Ref\n                                                     ({ Types.kind =\n                                                        (Types.ReBound\n                                                           (\"0\",\n                                                            { Types.kind =\n                                                              (Types.BrNamed\n                                                                 ({ Types.index =\n                                                                    (\n                                                                    0, 1741);\n                                                                    krate =\n                                                                    \"sandwich\";\n                                                                    path =\n                                                                    [{ Types.data =\n                                                                    Types.Impl;\n                                                                    disambiguator =\n                                                                    1 };\n                                                                    { Types.data =\n                                                                    (Types.ValueNs\n                                                                    \"get_openssl3_lib_ctx\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.LifetimeNs\n                                                                    \"'_\");\n                                                                    disambiguator =\n                                                                    0 }] },\n                                                                  \"'_\"));\n                                                              var = \"0\" }))\n                                                        },\n                                                      Types.Adt {\n                                                        def_id =\n                                                        { Types.index =\n                                                          (0, 853);\n                                                          krate = \"sandwich\";\n                                                          path =\n                                                          [{ Types.data =\n                                                             (Types.TypeNs\n                                                                \"Context\");\n                                                             disambiguator =\n                                                             0 }\n                                                            ]\n                                                          };\n                                                        generic_args = [];\n                                                        trait_refs = []},\n                                                      false))\n                                                   ];\n                                                 output =\n                                                 (Types.Ref\n                                                    ({ Types.kind =\n                                                       (Types.ReBound\n                                                          (\"0\",\n                                                           { Types.kind =\n                                                             (Types.BrNamed\n                                                                ({ Types.index =\n                                                                   (0, 1741);\n                                                                   krate =\n                                                                   \"sandwich\";\n                                                                   path =\n                                                                   [{ Types.data =\n                                                                    Types.Impl;\n                                                                    disambiguator =\n                                                                    1 };\n                                                                    { Types.data =\n                                                                    (Types.ValueNs\n                                                                    \"get_openssl3_lib_ctx\");\n                                                                    disambiguator =\n                                                                    0 };\n                                                                    { Types.data =\n                                                                    (Types.LifetimeNs\n                                                                    \"'_\");\n                                                                    disambiguator =\n                                                                    0 }]\n                                                                   },\n                                                                 \"'_\"));\n                                                             var = \"0\" }))\n                                                       },\n                                                     Types.Adt {\n                                                       def_id =\n                                                       { Types.index =\n                                                         (0, 458);\n                                                         krate = \"sandwich\";\n                                                         path =\n                                                         [{ Types.data =\n                                                            (Types.TypeNs\n                                                               \"implementation\");\n                                                            disambiguator = 0\n                                                            };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"openssl3\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"LibCtx\");\n                                                             disambiguator =\n                                                             0 }\n                                                           ]\n                                                         };\n                                                       generic_args =\n                                                       [(Types.Lifetime\n                                                           { Types.kind =\n                                                             Types.ReStatic })\n                                                         ];\n                                                       trait_refs = []},\n                                                     false));\n                                                 safety = Types.Safe }\n                                               })};\n                                        hir_id = None;\n                                        span =\n                                        { Types.filename =\n                                          (Types.Real\n                                             (Types.LocalPath\n                                                \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                          hi =\n                                          { Types.col = \"42\"; line = \"56\" };\n                                          lo =\n                                          { Types.col = \"16\"; line = \"56\" } };\n                                        ty =\n                                        (Types.Ref\n                                           ({ Types.kind = Types.ReErased },\n                                            Types.Adt {\n                                              def_id =\n                                              { Types.index = (0, 458);\n                                                krate = \"sandwich\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs\n                                                      \"implementation\");\n                                                   disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"openssl3\");\n                                                    disambiguator = 0 };\n                                                  { Types.data =\n                                                    (Types.TypeNs \"LibCtx\");\n                                                    disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args =\n                                              [(Types.Lifetime\n                                                  { Types.kind =\n                                                    Types.ReErased })\n                                                ];\n                                              trait_refs = []},\n                                            false))\n                                        }};\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath\n                                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                      hi = { Types.col = \"42\"; line = \"56\" };\n                                      lo = { Types.col = \"16\"; line = \"56\" }\n                                      };\n                                    ty =\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (0, 458);\n                                        krate = \"sandwich\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"implementation\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"openssl3\");\n                                            disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"LibCtx\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Lifetime\n                                          { Types.kind = Types.ReErased })\n                                        ];\n                                      trait_refs = []}\n                                    };\n                                  borrow_kind = Types.Shared};\n                                hir_id = (Some (\"228\", \"22\"));\n                                span =\n                                { Types.filename =\n                                  (Types.Real\n                                     (Types.LocalPath\n                                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                  hi = { Types.col = \"42\"; line = \"56\" };\n                                  lo = { Types.col = \"16\"; line = \"56\" } };\n                                ty =\n                                (Types.Ref\n                                   ({ Types.kind = Types.ReErased },\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (0, 458);\n                                        krate = \"sandwich\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"implementation\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"openssl3\");\n                                            disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"LibCtx\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Lifetime\n                                          { Types.kind = Types.ReErased })\n                                        ];\n                                      trait_refs = []},\n                                    false))\n                                }\n                               ];\n                             bounds_impls = [];\n                             fn_span =\n                             { Types.filename =\n                               (Types.Real\n                                  (Types.LocalPath\n                                     \"rust/implementation/openssl3/tunnel/context.rs\"));\n                               hi = { Types.col = \"55\"; line = \"56\" };\n                               lo = { Types.col = \"43\"; line = \"56\" } };\n                             from_hir_call = true;\n                             fun' =\n                             { Types.attributes = [];\n                               contents =\n                               Types.GlobalName {\n                                 id =\n                                 { Types.index = (0, 467);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data =\n                                      (Types.TypeNs \"implementation\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"openssl3\");\n                                       disambiguator = 0 };\n                                     { Types.data = Types.Impl;\n                                       disambiguator = 2 };\n                                     { Types.data =\n                                       (Types.ValueNs \"as_nonnull\");\n                                       disambiguator = 0 }\n                                     ]\n                                   }};\n                               hir_id = None;\n                               span =\n                               { Types.filename =\n                                 (Types.Real\n                                    (Types.LocalPath\n                                       \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                 hi = { Types.col = \"53\"; line = \"56\" };\n                                 lo = { Types.col = \"43\"; line = \"56\" } };\n                               ty =\n                               (Types.Arrow\n                                  { Types.bound_vars =\n                                    [(Types.Region\n                                        (Types.BrNamed\n                                           ({ Types.index = (0, 1629);\n                                              krate = \"sandwich\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs\n                                                    \"implementation\");\n                                                 disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.TypeNs \"openssl3\");\n                                                  disambiguator = 0 };\n                                                { Types.data = Types.Impl;\n                                                  disambiguator = 2 };\n                                                { Types.data =\n                                                  (Types.ValueNs \"as_nonnull\");\n                                                  disambiguator = 0 };\n                                                { Types.data =\n                                                  (Types.LifetimeNs \"'_\");\n                                                  disambiguator = 0 }\n                                                ]\n                                              },\n                                            \"'_\")))\n                                      ];\n                                    value =\n                                    { Types.abi = Types.Abi {todo = \"Rust\"};\n                                      c_variadic = false;\n                                      inputs =\n                                      [(Types.Ref\n                                          ({ Types.kind =\n                                             (Types.ReBound\n                                                (\"0\",\n                                                 { Types.kind =\n                                                   (Types.BrNamed\n                                                      ({ Types.index =\n                                                         (0, 1629);\n                                                         krate = \"sandwich\";\n                                                         path =\n                                                         [{ Types.data =\n                                                            (Types.TypeNs\n                                                               \"implementation\");\n                                                            disambiguator = 0\n                                                            };\n                                                           { Types.data =\n                                                             (Types.TypeNs\n                                                                \"openssl3\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             Types.Impl;\n                                                             disambiguator =\n                                                             2 };\n                                                           { Types.data =\n                                                             (Types.ValueNs\n                                                                \"as_nonnull\");\n                                                             disambiguator =\n                                                             0 };\n                                                           { Types.data =\n                                                             (Types.LifetimeNs\n                                                                \"'_\");\n                                                             disambiguator =\n                                                             0 }\n                                                           ]\n                                                         },\n                                                       \"'_\"));\n                                                   var = \"0\" }))\n                                             },\n                                           Types.Adt {\n                                             def_id =\n                                             { Types.index = (0, 458);\n                                               krate = \"sandwich\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs\n                                                     \"implementation\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"openssl3\");\n                                                   disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"LibCtx\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args =\n                                             [(Types.Lifetime\n                                                 { Types.kind =\n                                                   Types.ReErased })\n                                               ];\n                                             trait_refs = []},\n                                           false))\n                                        ];\n                                      output =\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (2, 2222);\n                                          krate = \"core\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"ptr\");\n                                             disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"non_null\");\n                                              disambiguator = 0 };\n                                            { Types.data =\n                                              (Types.TypeNs \"NonNull\");\n                                              disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args =\n                                        [(Types.Type\n                                            Types.Adt {\n                                              def_id =\n                                              { Types.index = (27, 21556);\n                                                krate = \"openssl3\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs\n                                                      \"ossl_lib_ctx_st\");\n                                                   disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args = [];\n                                              trait_refs = []})\n                                          ];\n                                        trait_refs = []};\n                                      safety = Types.Safe }\n                                    })\n                               };\n                             generic_args =\n                             [(Types.Lifetime { Types.kind = Types.ReErased })\n                               ];\n                             trait = None;\n                             ty =\n                             (Types.Arrow\n                                { Types.bound_vars =\n                                  [(Types.Region\n                                      (Types.BrNamed\n                                         ({ Types.index = (0, 1629);\n                                            krate = \"sandwich\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"implementation\");\n                                               disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"openssl3\");\n                                                disambiguator = 0 };\n                                              { Types.data = Types.Impl;\n                                                disambiguator = 2 };\n                                              { Types.data =\n                                                (Types.ValueNs \"as_nonnull\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.LifetimeNs \"'_\");\n                                                disambiguator = 0 }\n                                              ]\n                                            },\n                                          \"'_\")))\n                                    ];\n                                  value =\n                                  { Types.abi = Types.Abi {todo = \"Rust\"};\n                                    c_variadic = false;\n                                    inputs =\n                                    [(Types.Ref\n                                        ({ Types.kind =\n                                           (Types.ReBound\n                                              (\"0\",\n                                               { Types.kind =\n                                                 (Types.BrNamed\n                                                    ({ Types.index =\n                                                       (0, 1629);\n                                                       krate = \"sandwich\";\n                                                       path =\n                                                       [{ Types.data =\n                                                          (Types.TypeNs\n                                                             \"implementation\");\n                                                          disambiguator = 0 };\n                                                         { Types.data =\n                                                           (Types.TypeNs\n                                                              \"openssl3\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           Types.Impl;\n                                                           disambiguator = 2\n                                                           };\n                                                         { Types.data =\n                                                           (Types.ValueNs\n                                                              \"as_nonnull\");\n                                                           disambiguator = 0\n                                                           };\n                                                         { Types.data =\n                                                           (Types.LifetimeNs\n                                                              \"'_\");\n                                                           disambiguator = 0\n                                                           }\n                                                         ]\n                                                       },\n                                                     \"'_\"));\n                                                 var = \"0\" }))\n                                           },\n                                         Types.Adt {\n                                           def_id =\n                                           { Types.index = (0, 458);\n                                             krate = \"sandwich\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs\n                                                   \"implementation\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"openssl3\");\n                                                 disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"LibCtx\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args =\n                                           [(Types.Lifetime\n                                               { Types.kind = Types.ReErased\n                                                 })\n                                             ];\n                                           trait_refs = []},\n                                         false))\n                                      ];\n                                    output =\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (2, 2222);\n                                        krate = \"core\";\n                                        path =\n                                        [{ Types.data = (Types.TypeNs \"ptr\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"non_null\");\n                                            disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"NonNull\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Type\n                                          Types.Adt {\n                                            def_id =\n                                            { Types.index = (27, 21556);\n                                              krate = \"openssl3\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs\n                                                    \"ossl_lib_ctx_st\");\n                                                 disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args = [];\n                                            trait_refs = []})\n                                        ];\n                                      trait_refs = []};\n                                    safety = Types.Safe }\n                                  })};\n                           hir_id = (Some (\"228\", \"20\"));\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"55\"; line = \"56\" };\n                             lo = { Types.col = \"16\"; line = \"56\" } };\n                           ty =\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (2, 2222); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"non_null\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"NonNull\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Type\n                                 Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21556);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ossl_lib_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs = []}\n                           }\n                          ];\n                        bounds_impls = [];\n                        fn_span =\n                        { Types.filename =\n                          (Types.Real\n                             (Types.LocalPath\n                                \"rust/implementation/openssl3/tunnel/context.rs\"));\n                          hi = { Types.col = \"64\"; line = \"56\" };\n                          lo = { Types.col = \"56\"; line = \"56\" } };\n                        from_hir_call = true;\n                        fun' =\n                        { Types.attributes = [];\n                          contents =\n                          Types.GlobalName {\n                            id =\n                            { Types.index = (2, 2245); krate = \"core\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ptr\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"non_null\");\n                                  disambiguator = 0 };\n                                { Types.data = Types.Impl; disambiguator = 3\n                                  };\n                                { Types.data = (Types.ValueNs \"as_ptr\");\n                                  disambiguator = 0 }\n                                ]\n                              }};\n                          hir_id = None;\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"62\"; line = \"56\" };\n                            lo = { Types.col = \"56\"; line = \"56\" } };\n                          ty =\n                          (Types.Arrow\n                             { Types.bound_vars = [];\n                               value =\n                               { Types.abi = Types.Abi {todo = \"Rust\"};\n                                 c_variadic = false;\n                                 inputs =\n                                 [Types.Adt {\n                                    def_id =\n                                    { Types.index = (2, 2222);\n                                      krate = \"core\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"ptr\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"non_null\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"NonNull\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Type\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (27, 21556);\n                                            krate = \"openssl3\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs\n                                                  \"ossl_lib_ctx_st\");\n                                               disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []})\n                                      ];\n                                    trait_refs = []}\n                                   ];\n                                 output =\n                                 (Types.RawPtr\n                                    (Types.Adt {\n                                       def_id =\n                                       { Types.index = (27, 21556);\n                                         krate = \"openssl3\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"ossl_lib_ctx_st\");\n                                            disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args = []; trait_refs = []},\n                                     true));\n                                 safety = Types.Safe }\n                               })\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21556);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data =\n                                   (Types.TypeNs \"ossl_lib_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ];\n                        trait = None;\n                        ty =\n                        (Types.Arrow\n                           { Types.bound_vars = [];\n                             value =\n                             { Types.abi = Types.Abi {todo = \"Rust\"};\n                               c_variadic = false;\n                               inputs =\n                               [Types.Adt {\n                                  def_id =\n                                  { Types.index = (2, 2222); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"ptr\");\n                                       disambiguator = 0 };\n                                      { Types.data =\n                                        (Types.TypeNs \"non_null\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"NonNull\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Type\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (27, 21556);\n                                          krate = \"openssl3\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"ossl_lib_ctx_st\");\n                                             disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args = []; trait_refs = []})\n                                    ];\n                                  trait_refs = []}\n                                 ];\n                               output =\n                               (Types.RawPtr\n                                  (Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21556);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ossl_lib_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []},\n                                   true));\n                               safety = Types.Safe }\n                             })};\n                      hir_id = (Some (\"228\", \"18\"));\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"64\"; line = \"56\" };\n                        lo = { Types.col = \"16\"; line = \"56\" } };\n                      ty =\n                      (Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21556); krate = \"openssl3\";\n                              path =\n                              [{ Types.data =\n                                 (Types.TypeNs \"ossl_lib_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true))\n                      };\n                     { Types.attributes = [];\n                       contents =\n                       Types.Call {args = [];\n                         bounds_impls =\n                         [{ Types.args = [];\n                            impl =\n                            Types.Builtin {\n                              trait =\n                              { Types.def_id =\n                                { Types.index = (2, 2148); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ptr\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"metadata\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"Thin\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args =\n                                [(Types.Type (Types.Int Types.I8))] }};\n                            trait =\n                            { Types.def_id =\n                              { Types.index = (2, 2148); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ptr\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"metadata\");\n                                    disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"Thin\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type (Types.Int Types.I8))] }\n                            }\n                           ];\n                         fn_span =\n                         { Types.filename =\n                           (Types.Real\n                              (Types.LocalPath\n                                 \"rust/implementation/openssl3/tunnel/context.rs\"));\n                           hi = { Types.col = \"27\"; line = \"57\" };\n                           lo = { Types.col = \"16\"; line = \"57\" } };\n                         from_hir_call = true;\n                         fun' =\n                         { Types.attributes = [];\n                           contents =\n                           Types.GlobalName {\n                             id =\n                             { Types.index = (2, 2598); krate = \"core\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ptr\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.ValueNs \"null\");\n                                   disambiguator = 0 }\n                                 ]\n                               }};\n                           hir_id = None;\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"25\"; line = \"57\" };\n                             lo = { Types.col = \"16\"; line = \"57\" } };\n                           ty =\n                           (Types.Arrow\n                              { Types.bound_vars = [];\n                                value =\n                                { Types.abi = Types.Abi {todo = \"Rust\"};\n                                  c_variadic = false; inputs = [];\n                                  output =\n                                  (Types.RawPtr ((Types.Int Types.I8), false));\n                                  safety = Types.Safe }\n                                })\n                           };\n                         generic_args = [(Types.Type (Types.Int Types.I8))];\n                         trait = None;\n                         ty =\n                         (Types.Arrow\n                            { Types.bound_vars = [];\n                              value =\n                              { Types.abi = Types.Abi {todo = \"Rust\"};\n                                c_variadic = false; inputs = [];\n                                output =\n                                (Types.RawPtr ((Types.Int Types.I8), false));\n                                safety = Types.Safe }\n                              })};\n                       hir_id = (Some (\"228\", \"26\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3/tunnel/context.rs\"));\n                         hi = { Types.col = \"27\"; line = \"57\" };\n                         lo = { Types.col = \"16\"; line = \"57\" } };\n                       ty = (Types.RawPtr ((Types.Int Types.I8), false)) };\n                     { Types.attributes = [];\n                       contents =\n                       Types.Match {\n                         arms =\n                         [{ Types.attributes = [];\n                            body =\n                            { Types.attributes = [];\n                              contents =\n                              Types.Call {args = []; bounds_impls = [];\n                                fn_span =\n                                { Types.filename =\n                                  (Types.Real\n                                     (Types.LocalPath\n                                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                  hi = { Types.col = \"65\"; line = \"59\" };\n                                  lo = { Types.col = \"36\"; line = \"59\" } };\n                                from_hir_call = true;\n                                fun' =\n                                { Types.attributes = [];\n                                  contents =\n                                  Types.GlobalName {\n                                    id =\n                                    { Types.index = (27, 18559);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data = Types.ForeignMod;\n                                         disambiguator = 3379 };\n                                        { Types.data =\n                                          (Types.ValueNs \"TLS_client_method\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }};\n                                  hir_id = None;\n                                  span =\n                                  { Types.filename =\n                                    (Types.Real\n                                       (Types.LocalPath\n                                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                    hi = { Types.col = \"63\"; line = \"59\" };\n                                    lo = { Types.col = \"36\"; line = \"59\" } };\n                                  ty =\n                                  (Types.Arrow\n                                     { Types.bound_vars = [];\n                                       value =\n                                       { Types.abi =\n                                         Types.Abi {\n                                           todo = \"C { unwind: false }\"};\n                                         c_variadic = false; inputs = [];\n                                         output =\n                                         (Types.RawPtr\n                                            (Types.Adt {\n                                               def_id =\n                                               { Types.index = (27, 22635);\n                                                 krate = \"openssl3\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs\n                                                       \"ssl_method_st\");\n                                                    disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []},\n                                             false));\n                                         safety = Types.Unsafe }\n                                       })\n                                  };\n                                generic_args = []; trait = None;\n                                ty =\n                                (Types.Arrow\n                                   { Types.bound_vars = [];\n                                     value =\n                                     { Types.abi =\n                                       Types.Abi {\n                                         todo = \"C { unwind: false }\"};\n                                       c_variadic = false; inputs = [];\n                                       output =\n                                       (Types.RawPtr\n                                          (Types.Adt {\n                                             def_id =\n                                             { Types.index = (27, 22635);\n                                               krate = \"openssl3\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs\n                                                     \"ssl_method_st\");\n                                                  disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args = [];\n                                             trait_refs = []},\n                                           false));\n                                       safety = Types.Unsafe }\n                                     })};\n                              hir_id = (Some (\"228\", \"37\"));\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"65\"; line = \"59\" };\n                                lo = { Types.col = \"36\"; line = \"59\" } };\n                              ty =\n                              (Types.RawPtr\n                                 (Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 22635);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"ssl_method_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              };\n                            guard = None;\n                            lint_level =\n                            (Types.Explicit\n                               { Types.local_id = \"36\";\n                                 owner =\n                                 { Types.index = (0, 228);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data =\n                                      (Types.TypeNs \"implementation\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"openssl3\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"tunnel\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"context\");\n                                       disambiguator = 0 };\n                                     { Types.data =\n                                       (Types.ValueNs \"new_ssl_context\");\n                                       disambiguator = 0 }\n                                     ]\n                                   }\n                                 });\n                            pattern =\n                            { Types.attributes = [];\n                              contents =\n                              Types.Variant {args = [];\n                                info =\n                                { Types.typ =\n                                  { Types.index = (0, 1395);\n                                    krate = \"sandwich\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"tunnel\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"context\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Mode\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  typ_is_record = false;\n                                  typ_is_struct = false;\n                                  type_namespace =\n                                  { Types.index = (0, 1395);\n                                    krate = \"sandwich\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"tunnel\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"context\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  variant =\n                                  { Types.index = (0, 1396);\n                                    krate = \"sandwich\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"tunnel\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"context\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Mode\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Client\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  variant_index = \"0\";\n                                  variant_is_record = false };\n                                subpatterns = []};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"32\"; line = \"59\" };\n                                lo = { Types.col = \"20\"; line = \"59\" } };\n                              ty =\n                              Types.Adt {\n                                def_id =\n                                { Types.index = (0, 1395);\n                                  krate = \"sandwich\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"tunnel\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"context\");\n                                      disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"Mode\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []}\n                              };\n                            scope = { Types.data = Types.Node; id = \"36\" };\n                            span =\n                            { Types.filename =\n                              (Types.Real\n                                 (Types.LocalPath\n                                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n                              hi = { Types.col = \"65\"; line = \"59\" };\n                              lo = { Types.col = \"20\"; line = \"59\" } }\n                            };\n                           { Types.attributes = [];\n                             body =\n                             { Types.attributes = [];\n                               contents =\n                               Types.Call {args = []; bounds_impls = [];\n                                 fn_span =\n                                 { Types.filename =\n                                   (Types.Real\n                                      (Types.LocalPath\n                                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                   hi = { Types.col = \"65\"; line = \"60\" };\n                                   lo = { Types.col = \"36\"; line = \"60\" } };\n                                 from_hir_call = true;\n                                 fun' =\n                                 { Types.attributes = [];\n                                   contents =\n                                   Types.GlobalName {\n                                     id =\n                                     { Types.index = (27, 18557);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data = Types.ForeignMod;\n                                          disambiguator = 3378 };\n                                         { Types.data =\n                                           (Types.ValueNs \"TLS_server_method\");\n                                           disambiguator = 0 }\n                                         ]\n                                       }};\n                                   hir_id = None;\n                                   span =\n                                   { Types.filename =\n                                     (Types.Real\n                                        (Types.LocalPath\n                                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                     hi = { Types.col = \"63\"; line = \"60\" };\n                                     lo = { Types.col = \"36\"; line = \"60\" } };\n                                   ty =\n                                   (Types.Arrow\n                                      { Types.bound_vars = [];\n                                        value =\n                                        { Types.abi =\n                                          Types.Abi {\n                                            todo = \"C { unwind: false }\"};\n                                          c_variadic = false; inputs = [];\n                                          output =\n                                          (Types.RawPtr\n                                             (Types.Adt {\n                                                def_id =\n                                                { Types.index = (27, 22635);\n                                                  krate = \"openssl3\";\n                                                  path =\n                                                  [{ Types.data =\n                                                     (Types.TypeNs\n                                                        \"ssl_method_st\");\n                                                     disambiguator = 0 }\n                                                    ]\n                                                  };\n                                                generic_args = [];\n                                                trait_refs = []},\n                                              false));\n                                          safety = Types.Unsafe }\n                                        })\n                                   };\n                                 generic_args = []; trait = None;\n                                 ty =\n                                 (Types.Arrow\n                                    { Types.bound_vars = [];\n                                      value =\n                                      { Types.abi =\n                                        Types.Abi {\n                                          todo = \"C { unwind: false }\"};\n                                        c_variadic = false; inputs = [];\n                                        output =\n                                        (Types.RawPtr\n                                           (Types.Adt {\n                                              def_id =\n                                              { Types.index = (27, 22635);\n                                                krate = \"openssl3\";\n                                                path =\n                                                [{ Types.data =\n                                                   (Types.TypeNs\n                                                      \"ssl_method_st\");\n                                                   disambiguator = 0 }\n                                                  ]\n                                                };\n                                              generic_args = [];\n                                              trait_refs = []},\n                                            false));\n                                        safety = Types.Unsafe }\n                                      })};\n                               hir_id = (Some (\"228\", \"45\"));\n                               span =\n                               { Types.filename =\n                                 (Types.Real\n                                    (Types.LocalPath\n                                       \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                 hi = { Types.col = \"65\"; line = \"60\" };\n                                 lo = { Types.col = \"36\"; line = \"60\" } };\n                               ty =\n                               (Types.RawPtr\n                                  (Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 22635);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_method_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []},\n                                   false))\n                               };\n                             guard = None;\n                             lint_level =\n                             (Types.Explicit\n                                { Types.local_id = \"44\";\n                                  owner =\n                                  { Types.index = (0, 228);\n                                    krate = \"sandwich\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"implementation\");\n                                       disambiguator = 0 };\n                                      { Types.data =\n                                        (Types.TypeNs \"openssl3\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"tunnel\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"context\");\n                                        disambiguator = 0 };\n                                      { Types.data =\n                                        (Types.ValueNs \"new_ssl_context\");\n                                        disambiguator = 0 }\n                                      ]\n                                    }\n                                  });\n                             pattern =\n                             { Types.attributes = [];\n                               contents =\n                               Types.Variant {args = [];\n                                 info =\n                                 { Types.typ =\n                                   { Types.index = (0, 1395);\n                                     krate = \"sandwich\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"tunnel\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"context\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"Mode\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   typ_is_record = false;\n                                   typ_is_struct = false;\n                                   type_namespace =\n                                   { Types.index = (0, 1395);\n                                     krate = \"sandwich\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"tunnel\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"context\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   variant =\n                                   { Types.index = (0, 1398);\n                                     krate = \"sandwich\";\n                                     path =\n                                     [{ Types.data = (Types.TypeNs \"tunnel\");\n                                        disambiguator = 0 };\n                                       { Types.data =\n                                         (Types.TypeNs \"context\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"Mode\");\n                                         disambiguator = 0 };\n                                       { Types.data = (Types.TypeNs \"Server\");\n                                         disambiguator = 0 }\n                                       ]\n                                     };\n                                   variant_index = \"1\";\n                                   variant_is_record = false };\n                                 subpatterns = []};\n                               hir_id = None;\n                               span =\n                               { Types.filename =\n                                 (Types.Real\n                                    (Types.LocalPath\n                                       \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                 hi = { Types.col = \"32\"; line = \"60\" };\n                                 lo = { Types.col = \"20\"; line = \"60\" } };\n                               ty =\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (0, 1395);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data = (Types.TypeNs \"tunnel\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"context\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"Mode\");\n                                       disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []}\n                               };\n                             scope = { Types.data = Types.Node; id = \"44\" };\n                             span =\n                             { Types.filename =\n                               (Types.Real\n                                  (Types.LocalPath\n                                     \"rust/implementation/openssl3/tunnel/context.rs\"));\n                               hi = { Types.col = \"65\"; line = \"60\" };\n                               lo = { Types.col = \"20\"; line = \"60\" } }\n                             }\n                           ];\n                         scrutinee =\n                         { Types.attributes = [];\n                           contents =\n                           Types.VarRef {\n                             id =\n                             { Types.id =\n                               { Types.local_id = \"4\";\n                                 owner =\n                                 { Types.index = (0, 228);\n                                   krate = \"sandwich\";\n                                   path =\n                                   [{ Types.data =\n                                      (Types.TypeNs \"implementation\");\n                                      disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"openssl3\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"tunnel\");\n                                       disambiguator = 0 };\n                                     { Types.data = (Types.TypeNs \"context\");\n                                       disambiguator = 0 };\n                                     { Types.data =\n                                       (Types.ValueNs \"new_ssl_context\");\n                                       disambiguator = 0 }\n                                     ]\n                                   }\n                                 };\n                               name = \"mode\" }};\n                           hir_id = (Some (\"228\", \"31\"));\n                           span =\n                           { Types.filename =\n                             (Types.Real\n                                (Types.LocalPath\n                                   \"rust/implementation/openssl3/tunnel/context.rs\"));\n                             hi = { Types.col = \"26\"; line = \"58\" };\n                             lo = { Types.col = \"22\"; line = \"58\" } };\n                           ty =\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (0, 1395); krate = \"sandwich\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"tunnel\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"context\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"Mode\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []}\n                           }};\n                       hir_id = (Some (\"228\", \"30\"));\n                       span =\n                       { Types.filename =\n                         (Types.Real\n                            (Types.LocalPath\n                               \"rust/implementation/openssl3/tunnel/context.rs\"));\n                         hi = { Types.col = \"17\"; line = \"61\" };\n                         lo = { Types.col = \"16\"; line = \"58\" } };\n                       ty =\n                       (Types.RawPtr\n                          (Types.Adt {\n                             def_id =\n                             { Types.index = (27, 22635); krate = \"openssl3\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"ssl_method_st\");\n                                  disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args = []; trait_refs = []},\n                           false))\n                       }\n                     ];\n                   bounds_impls = [];\n                   fn_span =\n                   { Types.filename =\n                     (Types.Real\n                        (Types.LocalPath\n                           \"rust/implementation/openssl3/tunnel/context.rs\"));\n                     hi = { Types.col = \"13\"; line = \"62\" };\n                     lo = { Types.col = \"12\"; line = \"55\" } };\n                   from_hir_call = true;\n                   fun' =\n                   { Types.attributes = [];\n                     contents =\n                     Types.GlobalName {\n                       id =\n                       { Types.index = (27, 18142); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = Types.ForeignMod;\n                            disambiguator = 3171 };\n                           { Types.data = (Types.ValueNs \"SSL_CTX_new_ex\");\n                             disambiguator = 0 }\n                           ]\n                         }};\n                     hir_id = None;\n                     span =\n                     { Types.filename =\n                       (Types.Real\n                          (Types.LocalPath\n                             \"rust/implementation/openssl3/tunnel/context.rs\"));\n                       hi = { Types.col = \"36\"; line = \"55\" };\n                       lo = { Types.col = \"12\"; line = \"55\" } };\n                     ty =\n                     (Types.Arrow\n                        { Types.bound_vars = [];\n                          value =\n                          { Types.abi =\n                            Types.Abi {todo = \"C { unwind: false }\"};\n                            c_variadic = false;\n                            inputs =\n                            [(Types.RawPtr\n                                (Types.Adt {\n                                   def_id =\n                                   { Types.index = (27, 21556);\n                                     krate = \"openssl3\";\n                                     path =\n                                     [{ Types.data =\n                                        (Types.TypeNs \"ossl_lib_ctx_st\");\n                                        disambiguator = 0 }\n                                       ]\n                                     };\n                                   generic_args = []; trait_refs = []},\n                                 true));\n                              (Types.RawPtr ((Types.Int Types.I8), false));\n                              (Types.RawPtr\n                                 (Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 22635);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"ssl_method_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  false))\n                              ];\n                            output =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            safety = Types.Unsafe }\n                          })\n                     };\n                   generic_args = []; trait = None;\n                   ty =\n                   (Types.Arrow\n                      { Types.bound_vars = [];\n                        value =\n                        { Types.abi =\n                          Types.Abi {todo = \"C { unwind: false }\"};\n                          c_variadic = false;\n                          inputs =\n                          [(Types.RawPtr\n                              (Types.Adt {\n                                 def_id =\n                                 { Types.index = (27, 21556);\n                                   krate = \"openssl3\";\n                                   path =\n                                   [{ Types.data =\n                                      (Types.TypeNs \"ossl_lib_ctx_st\");\n                                      disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []},\n                               true));\n                            (Types.RawPtr ((Types.Int Types.I8), false));\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 22635);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_method_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                false))\n                            ];\n                          output =\n                          (Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true));\n                          safety = Types.Unsafe }\n                        })};\n                 hir_id = (Some (\"228\", \"14\"));\n                 span =\n                 { Types.filename =\n                   (Types.Real\n                      (Types.LocalPath\n                         \"rust/implementation/openssl3/tunnel/context.rs\"));\n                   hi = { Types.col = \"13\"; line = \"62\" };\n                   lo = { Types.col = \"12\"; line = \"55\" } };\n                 ty =\n                 (Types.RawPtr\n                    (Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []},\n                     true))\n                 };\n                { Types.attributes = [];\n                  contents =\n                  Types.PointerCoercion {\n                    cast = (Types.ClosureFnPointer Types.Safe);\n                    source =\n                    { Types.attributes = [];\n                      contents =\n                      Types.Closure {\n                        body =\n                        { Types.attributes = [];\n                          contents =\n                          Types.Call {\n                            args =\n                            [{ Types.attributes = [];\n                               contents =\n                               Types.VarRef {\n                                 id =\n                                 { Types.id =\n                                   { Types.local_id = \"51\";\n                                     owner =\n                                     { Types.index = (0, 228);\n                                       krate = \"sandwich\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"implementation\");\n                                          disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"openssl3\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"tunnel\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.TypeNs \"context\");\n                                           disambiguator = 0 };\n                                         { Types.data =\n                                           (Types.ValueNs \"new_ssl_context\");\n                                           disambiguator = 0 }\n                                         ]\n                                       }\n                                     };\n                                   name = \"ptr\" }};\n                               hir_id = (Some (\"228\", \"56\"));\n                               span =\n                               { Types.filename =\n                                 (Types.Real\n                                    (Types.LocalPath\n                                       \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                 hi = { Types.col = \"44\"; line = \"63\" };\n                                 lo = { Types.col = \"41\"; line = \"63\" } };\n                               ty =\n                               (Types.RawPtr\n                                  (Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []},\n                                   true))\n                               }\n                              ];\n                            bounds_impls = [];\n                            fn_span =\n                            { Types.filename =\n                              (Types.Real\n                                 (Types.LocalPath\n                                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n                              hi = { Types.col = \"45\"; line = \"63\" };\n                              lo = { Types.col = \"18\"; line = \"63\" } };\n                            from_hir_call = true;\n                            fun' =\n                            { Types.attributes = [];\n                              contents =\n                              Types.GlobalName {\n                                id =\n                                { Types.index = (27, 18146);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = Types.ForeignMod;\n                                     disambiguator = 3173 };\n                                    { Types.data =\n                                      (Types.ValueNs \"SSL_CTX_free\");\n                                      disambiguator = 0 }\n                                    ]\n                                  }};\n                              hir_id = None;\n                              span =\n                              { Types.filename =\n                                (Types.Real\n                                   (Types.LocalPath\n                                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                hi = { Types.col = \"40\"; line = \"63\" };\n                                lo = { Types.col = \"18\"; line = \"63\" } };\n                              ty =\n                              (Types.Arrow\n                                 { Types.bound_vars = [];\n                                   value =\n                                   { Types.abi =\n                                     Types.Abi {todo = \"C { unwind: false }\"};\n                                     c_variadic = false;\n                                     inputs =\n                                     [(Types.RawPtr\n                                         (Types.Adt {\n                                            def_id =\n                                            { Types.index = (27, 21403);\n                                              krate = \"openssl3\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ssl_ctx_st\");\n                                                 disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args = [];\n                                            trait_refs = []},\n                                          true))\n                                       ];\n                                     output = (Types.Tuple []);\n                                     safety = Types.Unsafe }\n                                   })\n                              };\n                            generic_args = []; trait = None;\n                            ty =\n                            (Types.Arrow\n                               { Types.bound_vars = [];\n                                 value =\n                                 { Types.abi =\n                                   Types.Abi {todo = \"C { unwind: false }\"};\n                                   c_variadic = false;\n                                   inputs =\n                                   [(Types.RawPtr\n                                       (Types.Adt {\n                                          def_id =\n                                          { Types.index = (27, 21403);\n                                            krate = \"openssl3\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"ssl_ctx_st\");\n                                               disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []},\n                                        true))\n                                     ];\n                                   output = (Types.Tuple []);\n                                   safety = Types.Unsafe }\n                                 })};\n                          hir_id = (Some (\"228\", \"52\"));\n                          span =\n                          { Types.filename =\n                            (Types.Real\n                               (Types.LocalPath\n                                  \"rust/implementation/openssl3/tunnel/context.rs\"));\n                            hi = { Types.col = \"45\"; line = \"63\" };\n                            lo = { Types.col = \"18\"; line = \"63\" } };\n                          ty = (Types.Tuple []) };\n                        movability = None;\n                        params =\n                        [{ Types.attributes = []; hir_id = None; pat = None;\n                           self_kind = None;\n                           ty =\n                           (Types.Ref\n                              ({ Types.kind = Types.ReErased },\n                               (Types.Arrow\n                                  { Types.bound_vars = [];\n                                    value =\n                                    { Types.abi = Types.Abi {todo = \"Rust\"};\n                                      c_variadic = false;\n                                      inputs =\n                                      [(Types.RawPtr\n                                          (Types.Adt {\n                                             def_id =\n                                             { Types.index = (27, 21403);\n                                               krate = \"openssl3\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"ssl_ctx_st\");\n                                                  disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args = [];\n                                             trait_refs = []},\n                                           true))\n                                        ];\n                                      output = (Types.Tuple []);\n                                      safety = Types.Safe }\n                                    }),\n                               false));\n                           ty_span = None };\n                          { Types.attributes = [];\n                            hir_id =\n                            (Some { Types.local_id = \"50\";\n                                    owner =\n                                    { Types.index = (0, 228);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"implementation\");\n                                         disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"openssl3\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"tunnel\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.TypeNs \"context\");\n                                          disambiguator = 0 };\n                                        { Types.data =\n                                          (Types.ValueNs \"new_ssl_context\");\n                                          disambiguator = 0 }\n                                        ]\n                                      }\n                                    });\n                            pat =\n                            (Some { Types.attributes = [];\n                                    contents =\n                                    Types.Binding {is_primary = true;\n                                      mode =\n                                      { Types.by_ref = Types.No;\n                                        mutability = false };\n                                      subpattern = None;\n                                      ty =\n                                      (Types.RawPtr\n                                         (Types.Adt {\n                                            def_id =\n                                            { Types.index = (27, 21403);\n                                              krate = \"openssl3\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ssl_ctx_st\");\n                                                 disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args = [];\n                                            trait_refs = []},\n                                          true));\n                                      var =\n                                      { Types.id =\n                                        { Types.local_id = \"51\";\n                                          owner =\n                                          { Types.index = (0, 228);\n                                            krate = \"sandwich\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"implementation\");\n                                               disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"openssl3\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"tunnel\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.TypeNs \"context\");\n                                                disambiguator = 0 };\n                                              { Types.data =\n                                                (Types.ValueNs\n                                                   \"new_ssl_context\");\n                                                disambiguator = 0 }\n                                              ]\n                                            }\n                                          };\n                                        name = \"ptr\" }};\n                                    hir_id = None;\n                                    span =\n                                    { Types.filename =\n                                      (Types.Real\n                                         (Types.LocalPath\n                                            \"rust/implementation/openssl3/tunnel/context.rs\"));\n                                      hi = { Types.col = \"16\"; line = \"63\" };\n                                      lo = { Types.col = \"13\"; line = \"63\" }\n                                      };\n                                    ty =\n                                    (Types.RawPtr\n                                       (Types.Adt {\n                                          def_id =\n                                          { Types.index = (27, 21403);\n                                            krate = \"openssl3\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"ssl_ctx_st\");\n                                               disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []},\n                                        true))\n                                    });\n                            self_kind = None;\n                            ty =\n                            (Types.RawPtr\n                               (Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []},\n                                true));\n                            ty_span = None }\n                          ];\n                        upvars = []};\n                      hir_id = None;\n                      span =\n                      { Types.filename =\n                        (Types.Real\n                           (Types.LocalPath\n                              \"rust/implementation/openssl3/tunnel/context.rs\"));\n                        hi = { Types.col = \"45\"; line = \"63\" };\n                        lo = { Types.col = \"12\"; line = \"63\" } };\n                      ty =\n                      (Types.Arrow\n                         { Types.bound_vars = [];\n                           value =\n                           { Types.abi = Types.Abi {todo = \"Rust\"};\n                             c_variadic = false;\n                             inputs =\n                             [(Types.RawPtr\n                                 (Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21403);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"ssl_ctx_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []},\n                                  true))\n                               ];\n                             output = (Types.Tuple []); safety = Types.Safe }\n                           })\n                      }};\n                  hir_id = (Some (\"228\", \"49\"));\n                  span =\n                  { Types.filename =\n                    (Types.Real\n                       (Types.LocalPath\n                          \"rust/implementation/openssl3/tunnel/context.rs\"));\n                    hi = { Types.col = \"45\"; line = \"63\" };\n                    lo = { Types.col = \"12\"; line = \"63\" } };\n                  ty =\n                  (Types.Arrow\n                     { Types.bound_vars = [];\n                       value =\n                       { Types.abi = Types.Abi {todo = \"Rust\"};\n                         c_variadic = false;\n                         inputs =\n                         [(Types.RawPtr\n                             (Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []},\n                              true))\n                           ];\n                         output = (Types.Tuple []); safety = Types.Safe }\n                       })\n                  }\n                ];\n              bounds_impls = [];\n              fn_span =\n              { Types.filename =\n                (Types.Real\n                   (Types.LocalPath\n                      \"rust/implementation/openssl3/tunnel/context.rs\"));\n                hi = { Types.col = \"9\"; line = \"64\" };\n                lo = { Types.col = \"8\"; line = \"54\" } };\n              from_hir_call = true;\n              fun' =\n              { Types.attributes = [];\n                contents =\n                Types.GlobalName {\n                  id =\n                  { Types.index = (0, 622); krate = \"sandwich\";\n                    path =\n                    [{ Types.data = (Types.TypeNs \"support\");\n                       disambiguator = 0 };\n                      { Types.data = (Types.TypeNs \"pimpl\");\n                        disambiguator = 0 };\n                      { Types.data = Types.Impl; disambiguator = 2 };\n                      { Types.data = (Types.ValueNs \"new\"); disambiguator = 0\n                        }\n                      ]\n                    }};\n                hir_id = None;\n                span =\n                { Types.filename =\n                  (Types.Real\n                     (Types.LocalPath\n                        \"rust/implementation/openssl3/tunnel/context.rs\"));\n                  hi = { Types.col = \"18\"; line = \"54\" };\n                  lo = { Types.col = \"8\"; line = \"54\" } };\n                ty =\n                (Types.Arrow\n                   { Types.bound_vars = [];\n                     value =\n                     { Types.abi = Types.Abi {todo = \"Rust\"};\n                       c_variadic = false;\n                       inputs =\n                       [(Types.RawPtr\n                           (Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []},\n                            true));\n                         (Types.Arrow\n                            { Types.bound_vars = [];\n                              value =\n                              { Types.abi = Types.Abi {todo = \"Rust\"};\n                                c_variadic = false;\n                                inputs =\n                                [(Types.RawPtr\n                                    (Types.Adt {\n                                       def_id =\n                                       { Types.index = (27, 21403);\n                                         krate = \"openssl3\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"ssl_ctx_st\");\n                                            disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args = []; trait_refs = []},\n                                     true))\n                                  ];\n                                output = (Types.Tuple []);\n                                safety = Types.Safe }\n                              })\n                         ];\n                       output =\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (2, 36174); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"option\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Option\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (0, 608); krate = \"sandwich\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"support\");\n                                    disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"pimpl\");\n                                     disambiguator = 0 };\n                                   { Types.data = (Types.TypeNs \"Pimpl\");\n                                     disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args =\n                               [(Types.Lifetime\n                                   { Types.kind = Types.ReErased });\n                                 (Types.Type\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (27, 21403);\n                                        krate = \"openssl3\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"ssl_ctx_st\");\n                                           disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args = []; trait_refs = []})\n                                 ];\n                               trait_refs =\n                               [{ Types.args = [];\n                                  impl =\n                                  Types.Builtin {\n                                    trait =\n                                    { Types.def_id =\n                                      { Types.index = (2, 26413);\n                                        krate = \"core\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"marker\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"Sized\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Type\n                                          Types.Adt {\n                                            def_id =\n                                            { Types.index = (27, 21403);\n                                              krate = \"openssl3\";\n                                              path =\n                                              [{ Types.data =\n                                                 (Types.TypeNs \"ssl_ctx_st\");\n                                                 disambiguator = 0 }\n                                                ]\n                                              };\n                                            generic_args = [];\n                                            trait_refs = []})\n                                        ]\n                                      }};\n                                  trait =\n                                  { Types.def_id =\n                                    { Types.index = (2, 26413);\n                                      krate = \"core\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"marker\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Sized\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Type\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (27, 21403);\n                                            krate = \"openssl3\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"ssl_ctx_st\");\n                                               disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []})\n                                      ]\n                                    }\n                                  }\n                                 ]})\n                           ];\n                         trait_refs =\n                         [{ Types.args = [];\n                            impl =\n                            Types.Builtin {\n                              trait =\n                              { Types.def_id =\n                                { Types.index = (2, 26413); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"marker\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"Sized\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args =\n                                [(Types.Type\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (0, 608);\n                                        krate = \"sandwich\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"support\");\n                                           disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"pimpl\");\n                                            disambiguator = 0 };\n                                          { Types.data =\n                                            (Types.TypeNs \"Pimpl\");\n                                            disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args =\n                                      [(Types.Lifetime\n                                          { Types.kind = Types.ReErased });\n                                        (Types.Type\n                                           Types.Adt {\n                                             def_id =\n                                             { Types.index = (27, 21403);\n                                               krate = \"openssl3\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"ssl_ctx_st\");\n                                                  disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args = [];\n                                             trait_refs = []})\n                                        ];\n                                      trait_refs =\n                                      [{ Types.args = [];\n                                         impl =\n                                         Types.Builtin {\n                                           trait =\n                                           { Types.def_id =\n                                             { Types.index = (2, 26413);\n                                               krate = \"core\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"marker\");\n                                                  disambiguator = 0 };\n                                                 { Types.data =\n                                                   (Types.TypeNs \"Sized\");\n                                                   disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args =\n                                             [(Types.Type\n                                                 Types.Adt {\n                                                   def_id =\n                                                   { Types.index =\n                                                     (27, 21403);\n                                                     krate = \"openssl3\";\n                                                     path =\n                                                     [{ Types.data =\n                                                        (Types.TypeNs\n                                                           \"ssl_ctx_st\");\n                                                        disambiguator = 0 }\n                                                       ]\n                                                     };\n                                                   generic_args = [];\n                                                   trait_refs = []})\n                                               ]\n                                             }};\n                                         trait =\n                                         { Types.def_id =\n                                           { Types.index = (2, 26413);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"marker\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"Sized\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args =\n                                           [(Types.Type\n                                               Types.Adt {\n                                                 def_id =\n                                                 { Types.index = (27, 21403);\n                                                   krate = \"openssl3\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs\n                                                         \"ssl_ctx_st\");\n                                                      disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 generic_args = [];\n                                                 trait_refs = []})\n                                             ]\n                                           }\n                                         }\n                                        ]})\n                                  ]\n                                }};\n                            trait =\n                            { Types.def_id =\n                              { Types.index = (2, 26413); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"marker\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"Sized\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 608);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"support\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"pimpl\");\n                                          disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Pimpl\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Lifetime\n                                        { Types.kind = Types.ReErased });\n                                      (Types.Type\n                                         Types.Adt {\n                                           def_id =\n                                           { Types.index = (27, 21403);\n                                             krate = \"openssl3\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"ssl_ctx_st\");\n                                                disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args = []; trait_refs = []})\n                                      ];\n                                    trait_refs =\n                                    [{ Types.args = [];\n                                       impl =\n                                       Types.Builtin {\n                                         trait =\n                                         { Types.def_id =\n                                           { Types.index = (2, 26413);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"marker\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"Sized\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args =\n                                           [(Types.Type\n                                               Types.Adt {\n                                                 def_id =\n                                                 { Types.index = (27, 21403);\n                                                   krate = \"openssl3\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs\n                                                         \"ssl_ctx_st\");\n                                                      disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 generic_args = [];\n                                                 trait_refs = []})\n                                             ]\n                                           }};\n                                       trait =\n                                       { Types.def_id =\n                                         { Types.index = (2, 26413);\n                                           krate = \"core\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"marker\");\n                                              disambiguator = 0 };\n                                             { Types.data =\n                                               (Types.TypeNs \"Sized\");\n                                               disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args =\n                                         [(Types.Type\n                                             Types.Adt {\n                                               def_id =\n                                               { Types.index = (27, 21403);\n                                                 krate = \"openssl3\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs\n                                                       \"ssl_ctx_st\");\n                                                    disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []})\n                                           ]\n                                         }\n                                       }\n                                      ]})\n                                ]\n                              }\n                            }\n                           ]};\n                       safety = Types.Unsafe }\n                     })\n                };\n              generic_args =\n              [(Types.Lifetime { Types.kind = Types.ReErased });\n                (Types.Type\n                   Types.Adt {\n                     def_id =\n                     { Types.index = (27, 21403); krate = \"openssl3\";\n                       path =\n                       [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                          disambiguator = 0 }\n                         ]\n                       };\n                     generic_args = []; trait_refs = []})\n                ];\n              trait = None;\n              ty =\n              (Types.Arrow\n                 { Types.bound_vars = [];\n                   value =\n                   { Types.abi = Types.Abi {todo = \"Rust\"};\n                     c_variadic = false;\n                     inputs =\n                     [(Types.RawPtr\n                         (Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []},\n                          true));\n                       (Types.Arrow\n                          { Types.bound_vars = [];\n                            value =\n                            { Types.abi = Types.Abi {todo = \"Rust\"};\n                              c_variadic = false;\n                              inputs =\n                              [(Types.RawPtr\n                                  (Types.Adt {\n                                     def_id =\n                                     { Types.index = (27, 21403);\n                                       krate = \"openssl3\";\n                                       path =\n                                       [{ Types.data =\n                                          (Types.TypeNs \"ssl_ctx_st\");\n                                          disambiguator = 0 }\n                                         ]\n                                       };\n                                     generic_args = []; trait_refs = []},\n                                   true))\n                                ];\n                              output = (Types.Tuple []); safety = Types.Safe\n                              }\n                            })\n                       ];\n                     output =\n                     Types.Adt {\n                       def_id =\n                       { Types.index = (2, 36174); krate = \"core\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"option\");\n                            disambiguator = 0 };\n                           { Types.data = (Types.TypeNs \"Option\");\n                             disambiguator = 0 }\n                           ]\n                         };\n                       generic_args =\n                       [(Types.Type\n                           Types.Adt {\n                             def_id =\n                             { Types.index = (0, 608); krate = \"sandwich\";\n                               path =\n                               [{ Types.data = (Types.TypeNs \"support\");\n                                  disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"pimpl\");\n                                   disambiguator = 0 };\n                                 { Types.data = (Types.TypeNs \"Pimpl\");\n                                   disambiguator = 0 }\n                                 ]\n                               };\n                             generic_args =\n                             [(Types.Lifetime { Types.kind = Types.ReErased });\n                               (Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21403);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"ssl_ctx_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []})\n                               ];\n                             trait_refs =\n                             [{ Types.args = [];\n                                impl =\n                                Types.Builtin {\n                                  trait =\n                                  { Types.def_id =\n                                    { Types.index = (2, 26413);\n                                      krate = \"core\";\n                                      path =\n                                      [{ Types.data = (Types.TypeNs \"marker\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Sized\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Type\n                                        Types.Adt {\n                                          def_id =\n                                          { Types.index = (27, 21403);\n                                            krate = \"openssl3\";\n                                            path =\n                                            [{ Types.data =\n                                               (Types.TypeNs \"ssl_ctx_st\");\n                                               disambiguator = 0 }\n                                              ]\n                                            };\n                                          generic_args = []; trait_refs = []})\n                                      ]\n                                    }};\n                                trait =\n                                { Types.def_id =\n                                  { Types.index = (2, 26413); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"marker\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Sized\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Type\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (27, 21403);\n                                          krate = \"openssl3\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"ssl_ctx_st\");\n                                             disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args = []; trait_refs = []})\n                                    ]\n                                  }\n                                }\n                               ]})\n                         ];\n                       trait_refs =\n                       [{ Types.args = [];\n                          impl =\n                          Types.Builtin {\n                            trait =\n                            { Types.def_id =\n                              { Types.index = (2, 26413); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"marker\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"Sized\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (0, 608);\n                                      krate = \"sandwich\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"support\");\n                                         disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"pimpl\");\n                                          disambiguator = 0 };\n                                        { Types.data = (Types.TypeNs \"Pimpl\");\n                                          disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args =\n                                    [(Types.Lifetime\n                                        { Types.kind = Types.ReErased });\n                                      (Types.Type\n                                         Types.Adt {\n                                           def_id =\n                                           { Types.index = (27, 21403);\n                                             krate = \"openssl3\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"ssl_ctx_st\");\n                                                disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args = []; trait_refs = []})\n                                      ];\n                                    trait_refs =\n                                    [{ Types.args = [];\n                                       impl =\n                                       Types.Builtin {\n                                         trait =\n                                         { Types.def_id =\n                                           { Types.index = (2, 26413);\n                                             krate = \"core\";\n                                             path =\n                                             [{ Types.data =\n                                                (Types.TypeNs \"marker\");\n                                                disambiguator = 0 };\n                                               { Types.data =\n                                                 (Types.TypeNs \"Sized\");\n                                                 disambiguator = 0 }\n                                               ]\n                                             };\n                                           generic_args =\n                                           [(Types.Type\n                                               Types.Adt {\n                                                 def_id =\n                                                 { Types.index = (27, 21403);\n                                                   krate = \"openssl3\";\n                                                   path =\n                                                   [{ Types.data =\n                                                      (Types.TypeNs\n                                                         \"ssl_ctx_st\");\n                                                      disambiguator = 0 }\n                                                     ]\n                                                   };\n                                                 generic_args = [];\n                                                 trait_refs = []})\n                                             ]\n                                           }};\n                                       trait =\n                                       { Types.def_id =\n                                         { Types.index = (2, 26413);\n                                           krate = \"core\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"marker\");\n                                              disambiguator = 0 };\n                                             { Types.data =\n                                               (Types.TypeNs \"Sized\");\n                                               disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args =\n                                         [(Types.Type\n                                             Types.Adt {\n                                               def_id =\n                                               { Types.index = (27, 21403);\n                                                 krate = \"openssl3\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs\n                                                       \"ssl_ctx_st\");\n                                                    disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []})\n                                           ]\n                                         }\n                                       }\n                                      ]})\n                                ]\n                              }};\n                          trait =\n                          { Types.def_id =\n                            { Types.index = (2, 26413); krate = \"core\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"marker\");\n                                 disambiguator = 0 };\n                                { Types.data = (Types.TypeNs \"Sized\");\n                                  disambiguator = 0 }\n                                ]\n                              };\n                            generic_args =\n                            [(Types.Type\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (0, 608);\n                                    krate = \"sandwich\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"support\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"pimpl\");\n                                        disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Pimpl\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Lifetime\n                                      { Types.kind = Types.ReErased });\n                                    (Types.Type\n                                       Types.Adt {\n                                         def_id =\n                                         { Types.index = (27, 21403);\n                                           krate = \"openssl3\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"ssl_ctx_st\");\n                                              disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args = []; trait_refs = []})\n                                    ];\n                                  trait_refs =\n                                  [{ Types.args = [];\n                                     impl =\n                                     Types.Builtin {\n                                       trait =\n                                       { Types.def_id =\n                                         { Types.index = (2, 26413);\n                                           krate = \"core\";\n                                           path =\n                                           [{ Types.data =\n                                              (Types.TypeNs \"marker\");\n                                              disambiguator = 0 };\n                                             { Types.data =\n                                               (Types.TypeNs \"Sized\");\n                                               disambiguator = 0 }\n                                             ]\n                                           };\n                                         generic_args =\n                                         [(Types.Type\n                                             Types.Adt {\n                                               def_id =\n                                               { Types.index = (27, 21403);\n                                                 krate = \"openssl3\";\n                                                 path =\n                                                 [{ Types.data =\n                                                    (Types.TypeNs\n                                                       \"ssl_ctx_st\");\n                                                    disambiguator = 0 }\n                                                   ]\n                                                 };\n                                               generic_args = [];\n                                               trait_refs = []})\n                                           ]\n                                         }};\n                                     trait =\n                                     { Types.def_id =\n                                       { Types.index = (2, 26413);\n                                         krate = \"core\";\n                                         path =\n                                         [{ Types.data =\n                                            (Types.TypeNs \"marker\");\n                                            disambiguator = 0 };\n                                           { Types.data =\n                                             (Types.TypeNs \"Sized\");\n                                             disambiguator = 0 }\n                                           ]\n                                         };\n                                       generic_args =\n                                       [(Types.Type\n                                           Types.Adt {\n                                             def_id =\n                                             { Types.index = (27, 21403);\n                                               krate = \"openssl3\";\n                                               path =\n                                               [{ Types.data =\n                                                  (Types.TypeNs \"ssl_ctx_st\");\n                                                  disambiguator = 0 }\n                                                 ]\n                                               };\n                                             generic_args = [];\n                                             trait_refs = []})\n                                         ]\n                                       }\n                                     }\n                                    ]})\n                              ]\n                            }\n                          }\n                         ]};\n                     safety = Types.Unsafe }\n                   })};\n            hir_id = (Some (\"228\", \"8\"));\n            span =\n            { Types.filename =\n              (Types.Real\n                 (Types.LocalPath\n                    \"rust/implementation/openssl3/tunnel/context.rs\"));\n              hi = { Types.col = \"9\"; line = \"64\" };\n              lo = { Types.col = \"8\"; line = \"54\" } };\n            ty =\n            Types.Adt {\n              def_id =\n              { Types.index = (2, 36174); krate = \"core\";\n                path =\n                [{ Types.data = (Types.TypeNs \"option\"); disambiguator = 0 };\n                  { Types.data = (Types.TypeNs \"Option\"); disambiguator = 0 }\n                  ]\n                };\n              generic_args =\n              [(Types.Type\n                  Types.Adt {\n                    def_id =\n                    { Types.index = (0, 608); krate = \"sandwich\";\n                      path =\n                      [{ Types.data = (Types.TypeNs \"support\");\n                         disambiguator = 0 };\n                        { Types.data = (Types.TypeNs \"pimpl\");\n                          disambiguator = 0 };\n                        { Types.data = (Types.TypeNs \"Pimpl\");\n                          disambiguator = 0 }\n                        ]\n                      };\n                    generic_args =\n                    [(Types.Lifetime { Types.kind = Types.ReErased });\n                      (Types.Type\n                         Types.Adt {\n                           def_id =\n                           { Types.index = (27, 21403); krate = \"openssl3\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                disambiguator = 0 }\n                               ]\n                             };\n                           generic_args = []; trait_refs = []})\n                      ];\n                    trait_refs =\n                    [{ Types.args = [];\n                       impl =\n                       Types.Builtin {\n                         trait =\n                         { Types.def_id =\n                           { Types.index = (2, 26413); krate = \"core\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"marker\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"Sized\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args =\n                           [(Types.Type\n                               Types.Adt {\n                                 def_id =\n                                 { Types.index = (27, 21403);\n                                   krate = \"openssl3\";\n                                   path =\n                                   [{ Types.data =\n                                      (Types.TypeNs \"ssl_ctx_st\");\n                                      disambiguator = 0 }\n                                     ]\n                                   };\n                                 generic_args = []; trait_refs = []})\n                             ]\n                           }};\n                       trait =\n                       { Types.def_id =\n                         { Types.index = (2, 26413); krate = \"core\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"marker\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Sized\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Type\n                             Types.Adt {\n                               def_id =\n                               { Types.index = (27, 21403);\n                                 krate = \"openssl3\";\n                                 path =\n                                 [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                    disambiguator = 0 }\n                                   ]\n                                 };\n                               generic_args = []; trait_refs = []})\n                           ]\n                         }\n                       }\n                      ]})\n                ];\n              trait_refs =\n              [{ Types.args = [];\n                 impl =\n                 Types.Builtin {\n                   trait =\n                   { Types.def_id =\n                     { Types.index = (2, 26413); krate = \"core\";\n                       path =\n                       [{ Types.data = (Types.TypeNs \"marker\");\n                          disambiguator = 0 };\n                         { Types.data = (Types.TypeNs \"Sized\");\n                           disambiguator = 0 }\n                         ]\n                       };\n                     generic_args =\n                     [(Types.Type\n                         Types.Adt {\n                           def_id =\n                           { Types.index = (0, 608); krate = \"sandwich\";\n                             path =\n                             [{ Types.data = (Types.TypeNs \"support\");\n                                disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"pimpl\");\n                                 disambiguator = 0 };\n                               { Types.data = (Types.TypeNs \"Pimpl\");\n                                 disambiguator = 0 }\n                               ]\n                             };\n                           generic_args =\n                           [(Types.Lifetime { Types.kind = Types.ReErased });\n                             (Types.Type\n                                Types.Adt {\n                                  def_id =\n                                  { Types.index = (27, 21403);\n                                    krate = \"openssl3\";\n                                    path =\n                                    [{ Types.data =\n                                       (Types.TypeNs \"ssl_ctx_st\");\n                                       disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args = []; trait_refs = []})\n                             ];\n                           trait_refs =\n                           [{ Types.args = [];\n                              impl =\n                              Types.Builtin {\n                                trait =\n                                { Types.def_id =\n                                  { Types.index = (2, 26413); krate = \"core\";\n                                    path =\n                                    [{ Types.data = (Types.TypeNs \"marker\");\n                                       disambiguator = 0 };\n                                      { Types.data = (Types.TypeNs \"Sized\");\n                                        disambiguator = 0 }\n                                      ]\n                                    };\n                                  generic_args =\n                                  [(Types.Type\n                                      Types.Adt {\n                                        def_id =\n                                        { Types.index = (27, 21403);\n                                          krate = \"openssl3\";\n                                          path =\n                                          [{ Types.data =\n                                             (Types.TypeNs \"ssl_ctx_st\");\n                                             disambiguator = 0 }\n                                            ]\n                                          };\n                                        generic_args = []; trait_refs = []})\n                                    ]\n                                  }};\n                              trait =\n                              { Types.def_id =\n                                { Types.index = (2, 26413); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"marker\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"Sized\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args =\n                                [(Types.Type\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (27, 21403);\n                                        krate = \"openssl3\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"ssl_ctx_st\");\n                                           disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args = []; trait_refs = []})\n                                  ]\n                                }\n                              }\n                             ]})\n                       ]\n                     }};\n                 trait =\n                 { Types.def_id =\n                   { Types.index = (2, 26413); krate = \"core\";\n                     path =\n                     [{ Types.data = (Types.TypeNs \"marker\");\n                        disambiguator = 0 };\n                       { Types.data = (Types.TypeNs \"Sized\");\n                         disambiguator = 0 }\n                       ]\n                     };\n                   generic_args =\n                   [(Types.Type\n                       Types.Adt {\n                         def_id =\n                         { Types.index = (0, 608); krate = \"sandwich\";\n                           path =\n                           [{ Types.data = (Types.TypeNs \"support\");\n                              disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"pimpl\");\n                               disambiguator = 0 };\n                             { Types.data = (Types.TypeNs \"Pimpl\");\n                               disambiguator = 0 }\n                             ]\n                           };\n                         generic_args =\n                         [(Types.Lifetime { Types.kind = Types.ReErased });\n                           (Types.Type\n                              Types.Adt {\n                                def_id =\n                                { Types.index = (27, 21403);\n                                  krate = \"openssl3\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                     disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args = []; trait_refs = []})\n                           ];\n                         trait_refs =\n                         [{ Types.args = [];\n                            impl =\n                            Types.Builtin {\n                              trait =\n                              { Types.def_id =\n                                { Types.index = (2, 26413); krate = \"core\";\n                                  path =\n                                  [{ Types.data = (Types.TypeNs \"marker\");\n                                     disambiguator = 0 };\n                                    { Types.data = (Types.TypeNs \"Sized\");\n                                      disambiguator = 0 }\n                                    ]\n                                  };\n                                generic_args =\n                                [(Types.Type\n                                    Types.Adt {\n                                      def_id =\n                                      { Types.index = (27, 21403);\n                                        krate = \"openssl3\";\n                                        path =\n                                        [{ Types.data =\n                                           (Types.TypeNs \"ssl_ctx_st\");\n                                           disambiguator = 0 }\n                                          ]\n                                        };\n                                      generic_args = []; trait_refs = []})\n                                  ]\n                                }};\n                            trait =\n                            { Types.def_id =\n                              { Types.index = (2, 26413); krate = \"core\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"marker\");\n                                   disambiguator = 0 };\n                                  { Types.data = (Types.TypeNs \"Sized\");\n                                    disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args =\n                              [(Types.Type\n                                  Types.Adt {\n                                    def_id =\n                                    { Types.index = (27, 21403);\n                                      krate = \"openssl3\";\n                                      path =\n                                      [{ Types.data =\n                                         (Types.TypeNs \"ssl_ctx_st\");\n                                         disambiguator = 0 }\n                                        ]\n                                      };\n                                    generic_args = []; trait_refs = []})\n                                ]\n                              }\n                            }\n                           ]})\n                     ]\n                   }\n                 }\n                ]}\n            });\n    region_scope = { Types.data = Types.Node; id = \"59\" };\n    safety_mode = Types.ExplicitUnsafe;\n    span =\n    { Types.filename =\n      (Types.Real\n         (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n      hi = { Types.col = \"5\"; line = \"65\" };\n      lo = { Types.col = \"4\"; line = \"53\" } };\n    stmts = []; targeted_by_break = false};\n  hir_id = (Some (\"228\", \"7\"));\n  span =\n  { Types.filename =\n    (Types.Real\n       (Types.LocalPath \"rust/implementation/openssl3/tunnel/context.rs\"));\n    hi = { Types.col = \"5\"; line = \"65\" };\n    lo = { Types.col = \"4\"; line = \"53\" } };\n  ty =\n  Types.Adt {\n    def_id =\n    { Types.index = (2, 36174); krate = \"core\";\n      path =\n      [{ Types.data = (Types.TypeNs \"option\"); disambiguator = 0 };\n        { Types.data = (Types.TypeNs \"Option\"); disambiguator = 0 }]\n      };\n    generic_args =\n    [(Types.Type\n        Types.Adt {\n          def_id =\n          { Types.index = (0, 608); krate = \"sandwich\";\n            path =\n            [{ Types.data = (Types.TypeNs \"support\"); disambiguator = 0 };\n              { Types.data = (Types.TypeNs \"pimpl\"); disambiguator = 0 };\n              { Types.data = (Types.TypeNs \"Pimpl\"); disambiguator = 0 }]\n            };\n          generic_args =\n          [(Types.Lifetime { Types.kind = Types.ReErased });\n            (Types.Type\n               Types.Adt {\n                 def_id =\n                 { Types.index = (27, 21403); krate = \"openssl3\";\n                   path =\n                   [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                      disambiguator = 0 }\n                     ]\n                   };\n                 generic_args = []; trait_refs = []})\n            ];\n          trait_refs =\n          [{ Types.args = [];\n             impl =\n             Types.Builtin {\n               trait =\n               { Types.def_id =\n                 { Types.index = (2, 26413); krate = \"core\";\n                   path =\n                   [{ Types.data = (Types.TypeNs \"marker\"); disambiguator = 0\n                      };\n                     { Types.data = (Types.TypeNs \"Sized\"); disambiguator = 0\n                       }\n                     ]\n                   };\n                 generic_args =\n                 [(Types.Type\n                     Types.Adt {\n                       def_id =\n                       { Types.index = (27, 21403); krate = \"openssl3\";\n                         path =\n                         [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                            disambiguator = 0 }\n                           ]\n                         };\n                       generic_args = []; trait_refs = []})\n                   ]\n                 }};\n             trait =\n             { Types.def_id =\n               { Types.index = (2, 26413); krate = \"core\";\n                 path =\n                 [{ Types.data = (Types.TypeNs \"marker\"); disambiguator = 0 };\n                   { Types.data = (Types.TypeNs \"Sized\"); disambiguator = 0 }\n                   ]\n                 };\n               generic_args =\n               [(Types.Type\n                   Types.Adt {\n                     def_id =\n                     { Types.index = (27, 21403); krate = \"openssl3\";\n                       path =\n                       [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                          disambiguator = 0 }\n                         ]\n                       };\n                     generic_args = []; trait_refs = []})\n                 ]\n               }\n             }\n            ]})\n      ];\n    trait_refs =\n    [{ Types.args = [];\n       impl =\n       Types.Builtin {\n         trait =\n         { Types.def_id =\n           { Types.index = (2, 26413); krate = \"core\";\n             path =\n             [{ Types.data = (Types.TypeNs \"marker\"); disambiguator = 0 };\n               { Types.data = (Types.TypeNs \"Sized\"); disambiguator = 0 }]\n             };\n           generic_args =\n           [(Types.Type\n               Types.Adt {\n                 def_id =\n                 { Types.index = (0, 608); krate = \"sandwich\";\n                   path =\n                   [{ Types.data = (Types.TypeNs \"support\");\n                      disambiguator = 0 };\n                     { Types.data = (Types.TypeNs \"pimpl\"); disambiguator = 0\n                       };\n                     { Types.data = (Types.TypeNs \"Pimpl\"); disambiguator = 0\n                       }\n                     ]\n                   };\n                 generic_args =\n                 [(Types.Lifetime { Types.kind = Types.ReErased });\n                   (Types.Type\n                      Types.Adt {\n                        def_id =\n                        { Types.index = (27, 21403); krate = \"openssl3\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                             disambiguator = 0 }\n                            ]\n                          };\n                        generic_args = []; trait_refs = []})\n                   ];\n                 trait_refs =\n                 [{ Types.args = [];\n                    impl =\n                    Types.Builtin {\n                      trait =\n                      { Types.def_id =\n                        { Types.index = (2, 26413); krate = \"core\";\n                          path =\n                          [{ Types.data = (Types.TypeNs \"marker\");\n                             disambiguator = 0 };\n                            { Types.data = (Types.TypeNs \"Sized\");\n                              disambiguator = 0 }\n                            ]\n                          };\n                        generic_args =\n                        [(Types.Type\n                            Types.Adt {\n                              def_id =\n                              { Types.index = (27, 21403);\n                                krate = \"openssl3\";\n                                path =\n                                [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                   disambiguator = 0 }\n                                  ]\n                                };\n                              generic_args = []; trait_refs = []})\n                          ]\n                        }};\n                    trait =\n                    { Types.def_id =\n                      { Types.index = (2, 26413); krate = \"core\";\n                        path =\n                        [{ Types.data = (Types.TypeNs \"marker\");\n                           disambiguator = 0 };\n                          { Types.data = (Types.TypeNs \"Sized\");\n                            disambiguator = 0 }\n                          ]\n                        };\n                      generic_args =\n                      [(Types.Type\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []})\n                        ]\n                      }\n                    }\n                   ]})\n             ]\n           }};\n       trait =\n       { Types.def_id =\n         { Types.index = (2, 26413); krate = \"core\";\n           path =\n           [{ Types.data = (Types.TypeNs \"marker\"); disambiguator = 0 };\n             { Types.data = (Types.TypeNs \"Sized\"); disambiguator = 0 }]\n           };\n         generic_args =\n         [(Types.Type\n             Types.Adt {\n               def_id =\n               { Types.index = (0, 608); krate = \"sandwich\";\n                 path =\n                 [{ Types.data = (Types.TypeNs \"support\"); disambiguator = 0\n                    };\n                   { Types.data = (Types.TypeNs \"pimpl\"); disambiguator = 0 };\n                   { Types.data = (Types.TypeNs \"Pimpl\"); disambiguator = 0 }\n                   ]\n                 };\n               generic_args =\n               [(Types.Lifetime { Types.kind = Types.ReErased });\n                 (Types.Type\n                    Types.Adt {\n                      def_id =\n                      { Types.index = (27, 21403); krate = \"openssl3\";\n                        path =\n                        [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                           disambiguator = 0 }\n                          ]\n                        };\n                      generic_args = []; trait_refs = []})\n                 ];\n               trait_refs =\n               [{ Types.args = [];\n                  impl =\n                  Types.Builtin {\n                    trait =\n                    { Types.def_id =\n                      { Types.index = (2, 26413); krate = \"core\";\n                        path =\n                        [{ Types.data = (Types.TypeNs \"marker\");\n                           disambiguator = 0 };\n                          { Types.data = (Types.TypeNs \"Sized\");\n                            disambiguator = 0 }\n                          ]\n                        };\n                      generic_args =\n                      [(Types.Type\n                          Types.Adt {\n                            def_id =\n                            { Types.index = (27, 21403); krate = \"openssl3\";\n                              path =\n                              [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                                 disambiguator = 0 }\n                                ]\n                              };\n                            generic_args = []; trait_refs = []})\n                        ]\n                      }};\n                  trait =\n                  { Types.def_id =\n                    { Types.index = (2, 26413); krate = \"core\";\n                      path =\n                      [{ Types.data = (Types.TypeNs \"marker\");\n                         disambiguator = 0 };\n                        { Types.data = (Types.TypeNs \"Sized\");\n                          disambiguator = 0 }\n                        ]\n                      };\n                    generic_args =\n                    [(Types.Type\n                        Types.Adt {\n                          def_id =\n                          { Types.index = (27, 21403); krate = \"openssl3\";\n                            path =\n                            [{ Types.data = (Types.TypeNs \"ssl_ctx_st\");\n                               disambiguator = 0 }\n                              ]\n                            };\n                          generic_args = []; trait_refs = []})\n                      ]\n                    }\n                  }\n                 ]})\n           ]\n         }\n       }\n      ]}\n  }"

      <:
      Core.Option.t_Option (Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_ssl_ctx_st))
    (fun temp_0_ ->
        let _:Prims.unit = temp_0_ in
        Core.Convert.f_into #(Sandwich_proto.Errors.t_SystemError & string)
          #Sandwich.Error.t_Error
          #FStar.Tactics.Typeclasses.solve
          ((Sandwich_proto.Errors.SystemError_SYSTEMERROR_MEMORY
              <:
              Sandwich_proto.Errors.t_SystemError),
            "failed to instantiate a new `SSL_CTX`"
            <:
            (Sandwich_proto.Errors.t_SystemError & string))
        <:
        Sandwich.Error.t_Error)

let impl_5__try_from
      (ctx: Sandwich.t_Context)
      (configuration: Sandwich_api_proto.Configuration.t_Configuration)
     =
  let lib_ctx:Sandwich.Implementation.Openssl3.t_LibCtx =
    Core.Borrow.f_borrow #Sandwich.t_Context
      #Sandwich.Implementation.Openssl3.t_LibCtx
      #FStar.Tactics.Typeclasses.solve
      ctx
  in
  match Sandwich.Tunnel.Tls.Support.configuration_get_mode_and_options configuration with
  | Core.Result.Result_Ok (mode, tls_options) ->
    (match new_ssl_context ctx mode with
      | Core.Result.Result_Ok ssl_ctx ->
        let ssl_ctx_wrapped:t_SslContext =
          SslContext (Sandwich.Support.Pimpl.impl_2__as_nonnull #Openssl3.t_ssl_ctx_st ssl_ctx)
          <:
          t_SslContext
        in
        (match impl__SslContext__set_default_parameters ssl_ctx_wrapped with
          | Core.Result.Result_Ok _ ->
            (match impl__SslContext__set_trust ssl_ctx_wrapped mode with
              | Core.Result.Result_Ok _ ->
                (match
                    impl__SslContext__set_min_and_max_tls_version ssl_ctx_wrapped tls_options
                  with
                  | Core.Result.Result_Ok _ ->
                    (match
                        impl__SslContext__configure_tls12 ssl_ctx_wrapped
                          (Protobuf.Message_field.impl__as_ref #Sandwich_api_proto.Tls.t_TLSv12Config
                              tls_options.Sandwich_api_proto.Tls.f_tls12
                            <:
                            Core.Option.t_Option Sandwich_api_proto.Tls.t_TLSv12Config)
                      with
                      | Core.Result.Result_Ok _ ->
                        (match
                            impl__SslContext__configure_tls13 ssl_ctx_wrapped
                              (Protobuf.Message_field.impl__as_ref #Sandwich_api_proto.Tls.t_TLSv13Config
                                  tls_options.Sandwich_api_proto.Tls.f_tls13
                                <:
                                Core.Option.t_Option Sandwich_api_proto.Tls.t_TLSv13Config)
                          with
                          | Core.Result.Result_Ok _ ->
                            (match
                                impl__SslContext__set_alpn_protocols #Alloc.String.t_String
                                  #(Core.Slice.Iter.t_Iter Alloc.String.t_String)
                                  ssl_ctx_wrapped
                                  (Core.Slice.impl__iter #Alloc.String.t_String
                                      (Core.Ops.Deref.f_deref #(Alloc.Vec.t_Vec
                                              Alloc.String.t_String Alloc.Alloc.t_Global)
                                          #FStar.Tactics.Typeclasses.solve
                                          tls_options.Sandwich_api_proto.Tls.f_alpn_protocols
                                        <:
                                        t_Slice Alloc.String.t_String)
                                    <:
                                    Core.Slice.Iter.t_Iter Alloc.String.t_String)
                              with
                              | Core.Result.Result_Ok _ ->
                                (match
                                    Core.Convert.f_try_from #Sandwich.Implementation.Openssl3.Tunnel.X509_verify_param.t_X509VerifyParam
                                      #(Sandwich.Support.Pimpl.t_Pimpl Openssl3.t_ssl_ctx_st)
                                      #FStar.Tactics.Typeclasses.solve
                                      ssl_ctx
                                  with
                                  | Core.Result.Result_Ok x509_verify_param ->
                                    (match
                                        Sandwich.Implementation.Openssl3.Tunnel.X509_verify_param.impl_3__set_default_parameters
                                          x509_verify_param
                                      with
                                      | Core.Result.Result_Ok _ ->
                                        (match
                                            Core.Result.impl__and_then #(Core.Option.t_Option
                                                Sandwich_api_proto.Verifiers.t_X509Verifier)
                                              #Sandwich.Error.t_Error
                                              #(Core.Option.t_Option
                                                Sandwich_api_proto.Verifiers.t_X509Verifier)
                                              (Sandwich.Tunnel.Tls.Support.tls_options_get_x509_verifier
                                                  tls_options
                                                <:
                                                Core.Result.t_Result
                                                  (Core.Option.t_Option
                                                    Sandwich_api_proto.Verifiers.t_X509Verifier)
                                                  Sandwich.Error.t_Error)
                                              Sandwich.Tunnel.Tls.Support.x509_verifier_verify_emptiness

                                          with
                                          | Core.Result.Result_Ok x509_verifier ->
                                            let _:Prims.unit =
                                              Sandwich.Implementation.Openssl3.Tunnel.X509_verify_param.impl_3__update_certificate_chain_validation_depth_from_x509_verifier
                                                x509_verify_param
                                                x509_verifier
                                            in
                                            (match
                                                impl__SslContext__set_identity ssl_ctx_wrapped
                                                  lib_ctx
                                                  (Protobuf.Message_field.impl__as_ref #Sandwich_api_proto.Tls.t_X509Identity
                                                      tls_options.Sandwich_api_proto.Tls.f_identity
                                                    <:
                                                    Core.Option.t_Option
                                                    Sandwich_api_proto.Tls.t_X509Identity)
                                              with
                                              | Core.Result.Result_Ok _ ->
                                                (match
                                                    impl__SslContext__fill_certificate_trust_store ssl_ctx_wrapped
                                                      lib_ctx
                                                      x509_verifier
                                                  with
                                                  | Core.Result.Result_Ok _ ->
                                                    (match
                                                        impl__SslContext__fill_certificate_trust_store_with_default_cas
                                                          ssl_ctx_wrapped
                                                          x509_verifier
                                                      with
                                                      | Core.Result.Result_Ok _ ->
                                                        let verify_mode:Sandwich.Tunnel.Tls.t_VerifyMode
                                                        =
                                                          get_verify_mode_from_mode_and_x509_verifier
                                                            mode
                                                            x509_verifier
                                                        in
                                                        let _:Prims.unit =
                                                          impl__SslContext__set_verify_mode ssl_ctx_wrapped
                                                            verify_mode
                                                        in
                                                        let security_requirements:Sandwich.Tunnel.Tls.t_TunnelSecurityRequirements
                                                        =
                                                          Core.Option.impl__unwrap_or_default #Sandwich.Tunnel.Tls.t_TunnelSecurityRequirements
                                                            (Core.Option.impl__map #Sandwich_api_proto.Verifiers.t_X509Verifier
                                                                #Sandwich.Tunnel.Tls.t_TunnelSecurityRequirements
                                                                x509_verifier
                                                                Core.Convert.From.from
                                                              <:
                                                              Core.Option.t_Option
                                                              Sandwich.Tunnel.Tls.t_TunnelSecurityRequirements
                                                            )
                                                        in
                                                        Core.Result.Result_Ok
                                                        ({
                                                            f__lib_ctx = lib_ctx;
                                                            f_mode = mode;
                                                            f_security_requirements
                                                            =
                                                            security_requirements;
                                                            f_ssl_ctx = ssl_ctx
                                                          }
                                                          <:
                                                          t_Context)
                                                        <:
                                                        Core.Result.t_Result t_Context
                                                          Sandwich.Error.t_Error
                                                      | Core.Result.Result_Err err ->
                                                        Core.Result.Result_Err err
                                                        <:
                                                        Core.Result.t_Result t_Context
                                                          Sandwich.Error.t_Error)
                                                  | Core.Result.Result_Err err ->
                                                    Core.Result.Result_Err err
                                                    <:
                                                    Core.Result.t_Result t_Context
                                                      Sandwich.Error.t_Error)
                                              | Core.Result.Result_Err err ->
                                                Core.Result.Result_Err err
                                                <:
                                                Core.Result.t_Result t_Context
                                                  Sandwich.Error.t_Error)
                                          | Core.Result.Result_Err err ->
                                            Core.Result.Result_Err err
                                            <:
                                            Core.Result.t_Result t_Context Sandwich.Error.t_Error)
                                      | Core.Result.Result_Err err ->
                                        Core.Result.Result_Err err
                                        <:
                                        Core.Result.t_Result t_Context Sandwich.Error.t_Error)
                                  | Core.Result.Result_Err err ->
                                    Core.Result.Result_Err err
                                    <:
                                    Core.Result.t_Result t_Context Sandwich.Error.t_Error)
                              | Core.Result.Result_Err err ->
                                Core.Result.Result_Err err
                                <:
                                Core.Result.t_Result t_Context Sandwich.Error.t_Error)
                          | Core.Result.Result_Err err ->
                            Core.Result.Result_Err err
                            <:
                            Core.Result.t_Result t_Context Sandwich.Error.t_Error)
                      | Core.Result.Result_Err err ->
                        Core.Result.Result_Err err
                        <:
                        Core.Result.t_Result t_Context Sandwich.Error.t_Error)
                  | Core.Result.Result_Err err ->
                    Core.Result.Result_Err err
                    <:
                    Core.Result.t_Result t_Context Sandwich.Error.t_Error)
              | Core.Result.Result_Err err ->
                Core.Result.Result_Err err <: Core.Result.t_Result t_Context Sandwich.Error.t_Error)
          | Core.Result.Result_Err err ->
            Core.Result.Result_Err err <: Core.Result.t_Result t_Context Sandwich.Error.t_Error)
      | Core.Result.Result_Err err ->
        Core.Result.Result_Err err <: Core.Result.t_Result t_Context Sandwich.Error.t_Error)
  | Core.Result.Result_Err err ->
    Core.Result.Result_Err err <: Core.Result.t_Result t_Context Sandwich.Error.t_Error

let impl_5__new_tunnel
      (self: t_Context)
      (io: Sandwich.Tunnel.Io.t_BoxedIO)
      (configuration: Sandwich_api_proto.Tunnel.t_TunnelConfiguration)
     =
  Sandwich.Implementation.Openssl3.Tunnel.Ssl.impl_5__build ({
        Sandwich.Implementation.Openssl3.Tunnel.Ssl.f_ssl_ctx = self;
        Sandwich.Implementation.Openssl3.Tunnel.Ssl.f_io = io;
        Sandwich.Implementation.Openssl3.Tunnel.Ssl.f_configuration = configuration
      }
      <:
      Sandwich.Implementation.Openssl3.Tunnel.Ssl.t_TunnelBuilder)
